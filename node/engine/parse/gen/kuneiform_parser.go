// Code generated from KuneiformParser.g4 by ANTLR 4.13.1. DO NOT EDIT.

package gen // KuneiformParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type KuneiformParser struct {
	*antlr.BaseParser
}

var KuneiformParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func kuneiformparserParserInit() {
	staticData := &KuneiformParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'{'", "'}'", "'['", "']'", "':'", "';'", "'('", "')'", "','", "'@'",
		"'!'", "'.'", "'||'", "'*'", "'='", "'=='", "'#'", "'$'", "'%'", "'+'",
		"'-'", "'/'", "'^'", "", "'<'", "'<='", "'>'", "'>='", "'::'", "'_'",
		"':='", "'..'", "'\"'", "'use'", "'unuse'", "'table'", "'action'", "'create'",
		"'alter'", "'column'", "'add'", "'drop'", "'rename'", "'to'", "'constraint'",
		"'check'", "'foreign'", "'primary'", "'key'", "'on'", "'do'", "'unique'",
		"'cascade'", "'restrict'", "'set'", "'default'", "'null'", "'delete'",
		"'update'", "'references'", "'ref'", "'not'", "'index'", "'and'", "'or'",
		"'like'", "'ilike'", "'in'", "'between'", "'is'", "'exists'", "'all'",
		"'any'", "'join'", "'left'", "'right'", "'inner'", "'as'", "'asc'",
		"'desc'", "'limit'", "'offset'", "'order'", "'by'", "'group'", "'having'",
		"'returns'", "'no'", "'with'", "'case'", "'when'", "'then'", "'end'",
		"'distinct'", "'from'", "'where'", "'collate'", "'select'", "'insert'",
		"'values'", "'full'", "'union'", "'intersect'", "'except'", "'nulls'",
		"'first'", "'last'", "'returning'", "'into'", "'conflict'", "'nothing'",
		"'for'", "'if'", "'elseif'", "'else'", "'break'", "'continue'", "'return'",
		"'next'", "'over'", "'partition'", "'window'", "'filter'", "'recursive'",
		"'grant'", "'granted'", "'revoke'", "'role'", "'replace'", "'array'",
		"'namespace'", "'transfer'", "'ownership'", "'roles'", "'call'", "",
		"'true'", "'false'", "", "", "", "'on_update'", "'on_delete'", "'set_default'",
		"'set_null'", "'no_action'",
	}
	staticData.SymbolicNames = []string{
		"", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COL", "SCOL", "LPAREN",
		"RPAREN", "COMMA", "AT", "EXCL", "PERIOD", "CONCAT", "STAR", "EQUALS",
		"EQUATE", "HASH", "DOLLAR", "MOD", "PLUS", "MINUS", "DIV", "EXP", "NEQ",
		"LT", "LTE", "GT", "GTE", "TYPE_CAST", "UNDERSCORE", "ASSIGN", "RANGE",
		"DOUBLE_QUOTE", "USE", "UNUSE", "TABLE", "ACTION", "CREATE", "ALTER",
		"COLUMN", "ADD", "DROP", "RENAME", "TO", "CONSTRAINT", "CHECK", "FOREIGN",
		"PRIMARY", "KEY", "ON", "DO", "UNIQUE", "CASCADE", "RESTRICT", "SET",
		"DEFAULT", "NULL", "DELETE", "UPDATE", "REFERENCES", "REF", "NOT", "INDEX",
		"AND", "OR", "LIKE", "ILIKE", "IN", "BETWEEN", "IS", "EXISTS", "ALL",
		"ANY", "JOIN", "LEFT", "RIGHT", "INNER", "AS", "ASC", "DESC", "LIMIT",
		"OFFSET", "ORDER", "BY", "GROUP", "HAVING", "RETURNS", "NO", "WITH",
		"CASE", "WHEN", "THEN", "END", "DISTINCT", "FROM", "WHERE", "COLLATE",
		"SELECT", "INSERT", "VALUES", "FULL", "UNION", "INTERSECT", "EXCEPT",
		"NULLS", "FIRST", "LAST", "RETURNING", "INTO", "CONFLICT", "NOTHING",
		"FOR", "IF", "ELSEIF", "ELSE", "BREAK", "CONTINUE", "RETURN", "NEXT",
		"OVER", "PARTITION", "WINDOW", "FILTER", "RECURSIVE", "GRANT", "GRANTED",
		"REVOKE", "ROLE", "REPLACE", "ARRAY", "NAMESPACE", "TRANSFER", "OWNERSHIP",
		"ROLES", "CALL", "STRING_", "TRUE", "FALSE", "DIGITS_", "BINARY_", "LEGACY_FOREIGN_KEY",
		"LEGACY_ON_UPDATE", "LEGACY_ON_DELETE", "LEGACY_SET_DEFAULT", "LEGACY_SET_NULL",
		"LEGACY_NO_ACTION", "IDENTIFIER", "VARIABLE", "CONTEXTUAL_VARIABLE",
		"HASH_IDENTIFIER", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "SQL_COMMENT",
	}
	staticData.RuleNames = []string{
		"entry", "statement", "literal", "identifier", "allowed_identifier",
		"identifier_list", "type", "type_cast", "variable", "table_column_def",
		"type_list", "named_type_list", "inline_constraint", "fk_action", "fk_constraint",
		"action_return", "sql_statement", "common_table_expression", "create_table_statement",
		"table_constraint_def", "opt_drop_behavior", "drop_table_statement",
		"alter_table_statement", "alter_table_action", "create_index_statement",
		"drop_index_statement", "create_role_statement", "drop_role_statement",
		"grant_statement", "revoke_statement", "transfer_ownership_statement",
		"privilege_list", "privilege", "create_action_statement", "drop_action_statement",
		"use_extension_statement", "unuse_extension_statement", "create_namespace_statement",
		"drop_namespace_statement", "select_statement", "compound_operator",
		"ordering_term", "select_core", "relation", "join", "result_column",
		"update_statement", "update_set_clause", "insert_statement", "upsert_clause",
		"delete_statement", "sql_expr", "window", "when_then_clause", "sql_expr_list",
		"sql_function_call", "action_expr", "action_expr_list", "action_statement",
		"variable_or_underscore", "action_function_call", "if_then_block", "range",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 154, 1359, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		1, 0, 1, 0, 1, 0, 5, 0, 130, 8, 0, 10, 0, 12, 0, 133, 9, 0, 1, 0, 3, 0,
		136, 8, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 144, 8, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 3, 1, 163, 8, 1, 1, 2, 1, 2, 3, 2, 167, 8, 2, 1, 2,
		1, 2, 3, 2, 171, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 179, 8,
		2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 186, 8, 3, 1, 4, 1, 4, 1, 5, 1,
		5, 1, 5, 5, 5, 193, 8, 5, 10, 5, 12, 5, 196, 9, 5, 1, 6, 1, 6, 1, 6, 1,
		6, 1, 6, 3, 6, 203, 8, 6, 1, 6, 3, 6, 206, 8, 6, 1, 6, 1, 6, 3, 6, 210,
		8, 6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 5, 9, 220, 8, 9,
		10, 9, 12, 9, 223, 9, 9, 1, 10, 1, 10, 1, 10, 5, 10, 228, 8, 10, 10, 10,
		12, 10, 231, 9, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 5, 11, 239,
		8, 11, 10, 11, 12, 11, 242, 9, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1,
		12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 257, 8, 12,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3,
		13, 269, 8, 13, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 275, 8, 14, 1, 14, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 283, 8, 14, 3, 14, 285, 8, 14, 1,
		15, 1, 15, 3, 15, 289, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 3, 15, 299, 8, 15, 1, 16, 1, 16, 3, 16, 303, 8, 16, 1, 16,
		1, 16, 1, 16, 5, 16, 308, 8, 16, 10, 16, 12, 16, 311, 9, 16, 3, 16, 313,
		8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 319, 8, 16, 1, 17, 1, 17, 1,
		17, 1, 17, 1, 17, 5, 17, 326, 8, 17, 10, 17, 12, 17, 329, 9, 17, 3, 17,
		331, 8, 17, 1, 17, 3, 17, 334, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17,
		1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 346, 8, 18, 1, 18, 1, 18, 1,
		18, 1, 18, 3, 18, 352, 8, 18, 1, 18, 1, 18, 1, 18, 3, 18, 357, 8, 18, 5,
		18, 359, 8, 18, 10, 18, 12, 18, 362, 9, 18, 1, 18, 1, 18, 1, 19, 1, 19,
		3, 19, 368, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 393, 8, 19, 1, 20, 1, 20, 1,
		21, 1, 21, 1, 21, 1, 21, 3, 21, 401, 8, 21, 1, 21, 1, 21, 3, 21, 405, 8,
		21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 23, 3, 23, 420, 8, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1,
		23, 1, 23, 1, 23, 3, 23, 429, 8, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1,
		23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 453, 8, 23, 1, 24,
		1, 24, 3, 24, 457, 8, 24, 1, 24, 1, 24, 1, 24, 1, 24, 3, 24, 463, 8, 24,
		1, 24, 3, 24, 466, 8, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
		25, 1, 25, 1, 25, 1, 25, 3, 25, 478, 8, 25, 1, 25, 1, 25, 1, 26, 1, 26,
		1, 26, 1, 26, 1, 26, 3, 26, 487, 8, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1,
		27, 1, 27, 3, 27, 495, 8, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28,
		3, 28, 503, 8, 28, 1, 28, 1, 28, 3, 28, 507, 8, 28, 1, 28, 1, 28, 3, 28,
		511, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 517, 8, 28, 1, 29, 1, 29,
		1, 29, 3, 29, 522, 8, 29, 1, 29, 1, 29, 3, 29, 526, 8, 29, 1, 29, 1, 29,
		3, 29, 530, 8, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 536, 8, 29, 1, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 543, 8, 30, 1, 31, 1, 31, 1, 31, 5,
		31, 548, 8, 31, 10, 31, 12, 31, 551, 9, 31, 1, 32, 1, 32, 1, 33, 1, 33,
		1, 33, 3, 33, 558, 8, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 564, 8, 33,
		1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 5, 33, 573, 8, 33, 10,
		33, 12, 33, 576, 9, 33, 3, 33, 578, 8, 33, 1, 33, 1, 33, 5, 33, 582, 8,
		33, 10, 33, 12, 33, 585, 9, 33, 1, 33, 3, 33, 588, 8, 33, 1, 33, 1, 33,
		5, 33, 592, 8, 33, 10, 33, 12, 33, 595, 9, 33, 1, 33, 1, 33, 1, 34, 1,
		34, 1, 34, 1, 34, 3, 34, 603, 8, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35,
		1, 35, 3, 35, 611, 8, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1,
		35, 1, 35, 1, 35, 1, 35, 5, 35, 623, 8, 35, 10, 35, 12, 35, 626, 9, 35,
		3, 35, 628, 8, 35, 1, 35, 3, 35, 631, 8, 35, 1, 35, 1, 35, 1, 35, 1, 36,
		1, 36, 1, 36, 1, 36, 3, 36, 640, 8, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1,
		37, 3, 37, 647, 8, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38,
		655, 8, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 663, 8, 39,
		10, 39, 12, 39, 666, 9, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 673,
		8, 39, 10, 39, 12, 39, 676, 9, 39, 3, 39, 678, 8, 39, 1, 39, 1, 39, 3,
		39, 682, 8, 39, 1, 39, 1, 39, 3, 39, 686, 8, 39, 1, 40, 1, 40, 3, 40, 690,
		8, 40, 1, 40, 1, 40, 3, 40, 694, 8, 40, 1, 41, 1, 41, 3, 41, 698, 8, 41,
		1, 41, 1, 41, 3, 41, 702, 8, 41, 1, 42, 1, 42, 3, 42, 706, 8, 42, 1, 42,
		1, 42, 1, 42, 5, 42, 711, 8, 42, 10, 42, 12, 42, 714, 9, 42, 1, 42, 1,
		42, 1, 42, 5, 42, 719, 8, 42, 10, 42, 12, 42, 722, 9, 42, 3, 42, 724, 8,
		42, 1, 42, 1, 42, 3, 42, 728, 8, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42,
		3, 42, 735, 8, 42, 3, 42, 737, 8, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42,
		1, 42, 1, 42, 1, 42, 1, 42, 5, 42, 748, 8, 42, 10, 42, 12, 42, 751, 9,
		42, 3, 42, 753, 8, 42, 1, 43, 1, 43, 1, 43, 3, 43, 758, 8, 43, 1, 43, 1,
		43, 3, 43, 762, 8, 43, 1, 43, 3, 43, 765, 8, 43, 1, 43, 1, 43, 1, 43, 1,
		43, 3, 43, 771, 8, 43, 1, 43, 3, 43, 774, 8, 43, 3, 43, 776, 8, 43, 1,
		44, 3, 44, 779, 8, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45,
		3, 45, 788, 8, 45, 1, 45, 3, 45, 791, 8, 45, 1, 45, 1, 45, 1, 45, 3, 45,
		796, 8, 45, 1, 45, 3, 45, 799, 8, 45, 1, 46, 1, 46, 1, 46, 3, 46, 804,
		8, 46, 1, 46, 3, 46, 807, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 5, 46, 813,
		8, 46, 10, 46, 12, 46, 816, 9, 46, 1, 46, 1, 46, 1, 46, 5, 46, 821, 8,
		46, 10, 46, 12, 46, 824, 9, 46, 3, 46, 826, 8, 46, 1, 46, 1, 46, 3, 46,
		830, 8, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 3,
		48, 840, 8, 48, 1, 48, 3, 48, 843, 8, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3,
		48, 849, 8, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48,
		1, 48, 5, 48, 860, 8, 48, 10, 48, 12, 48, 863, 9, 48, 1, 48, 3, 48, 866,
		8, 48, 1, 48, 3, 48, 869, 8, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1,
		49, 1, 49, 3, 49, 878, 8, 49, 3, 49, 880, 8, 49, 1, 49, 1, 49, 1, 49, 1,
		49, 1, 49, 1, 49, 1, 49, 5, 49, 889, 8, 49, 10, 49, 12, 49, 892, 9, 49,
		1, 49, 1, 49, 3, 49, 896, 8, 49, 3, 49, 898, 8, 49, 1, 50, 1, 50, 1, 50,
		1, 50, 3, 50, 904, 8, 50, 1, 50, 3, 50, 907, 8, 50, 1, 50, 1, 50, 3, 50,
		911, 8, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 918, 8, 51, 1, 51,
		1, 51, 1, 51, 1, 51, 3, 51, 924, 8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1,
		51, 1, 51, 1, 51, 3, 51, 933, 8, 51, 1, 51, 1, 51, 1, 51, 3, 51, 938, 8,
		51, 1, 51, 1, 51, 3, 51, 942, 8, 51, 1, 51, 1, 51, 3, 51, 946, 8, 51, 1,
		51, 1, 51, 1, 51, 3, 51, 951, 8, 51, 1, 51, 1, 51, 3, 51, 955, 8, 51, 1,
		51, 1, 51, 1, 51, 3, 51, 960, 8, 51, 1, 51, 1, 51, 3, 51, 964, 8, 51, 1,
		51, 1, 51, 3, 51, 968, 8, 51, 1, 51, 4, 51, 971, 8, 51, 11, 51, 12, 51,
		972, 1, 51, 1, 51, 3, 51, 977, 8, 51, 1, 51, 1, 51, 1, 51, 3, 51, 982,
		8, 51, 1, 51, 3, 51, 985, 8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 991,
		8, 51, 1, 51, 1, 51, 3, 51, 995, 8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1,
		51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51,
		1011, 8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 1017, 8, 51, 1, 51, 1,
		51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51,
		1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 1037, 8, 51, 1, 51, 1,
		51, 1, 51, 1, 51, 3, 51, 1043, 8, 51, 1, 51, 1, 51, 3, 51, 1047, 8, 51,
		3, 51, 1049, 8, 51, 1, 51, 1, 51, 3, 51, 1053, 8, 51, 1, 51, 1, 51, 1,
		51, 1, 51, 1, 51, 3, 51, 1060, 8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51,
		1066, 8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 1073, 8, 51, 1,
		51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 1081, 8, 51, 5, 51, 1083,
		8, 51, 10, 51, 12, 51, 1086, 9, 51, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52,
		1092, 8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 5, 52, 1099, 8, 52, 10,
		52, 12, 52, 1102, 9, 52, 3, 52, 1104, 8, 52, 1, 52, 1, 52, 1, 53, 1, 53,
		1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 5, 54, 1116, 8, 54, 10, 54, 12,
		54, 1119, 9, 54, 1, 55, 1, 55, 1, 55, 3, 55, 1124, 8, 55, 1, 55, 1, 55,
		3, 55, 1128, 8, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3,
		56, 1137, 8, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1143, 8, 56, 1, 56,
		1, 56, 3, 56, 1147, 8, 56, 1, 56, 1, 56, 3, 56, 1151, 8, 56, 1, 56, 3,
		56, 1154, 8, 56, 1, 56, 1, 56, 3, 56, 1158, 8, 56, 1, 56, 1, 56, 3, 56,
		1162, 8, 56, 1, 56, 1, 56, 3, 56, 1166, 8, 56, 1, 56, 1, 56, 1, 56, 1,
		56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56,
		1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1,
		56, 3, 56, 1193, 8, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1199, 8, 56,
		1, 56, 1, 56, 3, 56, 1203, 8, 56, 3, 56, 1205, 8, 56, 1, 56, 1, 56, 3,
		56, 1209, 8, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1214, 8, 56, 1, 56, 1, 56,
		1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1222, 8, 56, 5, 56, 1224, 8, 56, 10,
		56, 12, 56, 1227, 9, 56, 1, 57, 1, 57, 1, 57, 5, 57, 1232, 8, 57, 10, 57,
		12, 57, 1235, 9, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 5,
		58, 1244, 8, 58, 10, 58, 12, 58, 1247, 9, 58, 1, 58, 1, 58, 3, 58, 1251,
		8, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 1258, 8, 58, 1, 58, 1,
		58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 1270,
		8, 58, 1, 58, 3, 58, 1273, 8, 58, 1, 58, 1, 58, 5, 58, 1277, 8, 58, 10,
		58, 12, 58, 1280, 9, 58, 1, 58, 1, 58, 3, 58, 1284, 8, 58, 1, 58, 1, 58,
		1, 58, 1, 58, 1, 58, 3, 58, 1291, 8, 58, 1, 58, 5, 58, 1294, 8, 58, 10,
		58, 12, 58, 1297, 9, 58, 1, 58, 1, 58, 1, 58, 5, 58, 1302, 8, 58, 10, 58,
		12, 58, 1305, 9, 58, 1, 58, 3, 58, 1308, 8, 58, 1, 58, 3, 58, 1311, 8,
		58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 1321,
		8, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 1329, 8, 58, 1,
		59, 1, 59, 1, 60, 1, 60, 1, 60, 3, 60, 1336, 8, 60, 1, 60, 1, 60, 1, 60,
		3, 60, 1341, 8, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 5, 61, 1348, 8,
		61, 10, 61, 12, 61, 1351, 9, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1,
		62, 1, 62, 0, 2, 102, 112, 63, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22,
		24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58,
		60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
		96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124,
		0, 17, 1, 0, 20, 21, 1, 0, 137, 138, 13, 0, 34, 35, 37, 39, 41, 43, 46,
		49, 52, 52, 54, 54, 56, 56, 63, 63, 87, 87, 112, 118, 125, 129, 131, 135,
		147, 147, 1, 0, 148, 149, 1, 0, 58, 59, 1, 0, 53, 54, 6, 0, 34, 34, 38,
		39, 42, 42, 58, 59, 98, 99, 134, 135, 1, 0, 79, 80, 1, 0, 106, 107, 2,
		0, 75, 77, 101, 101, 3, 0, 14, 14, 19, 19, 22, 22, 1, 0, 66, 67, 2, 0,
		15, 16, 24, 28, 2, 0, 11, 11, 20, 21, 2, 0, 15, 15, 31, 31, 1, 0, 116,
		117, 2, 0, 30, 30, 148, 148, 1573, 0, 126, 1, 0, 0, 0, 2, 143, 1, 0, 0,
		0, 4, 178, 1, 0, 0, 0, 6, 185, 1, 0, 0, 0, 8, 187, 1, 0, 0, 0, 10, 189,
		1, 0, 0, 0, 12, 197, 1, 0, 0, 0, 14, 211, 1, 0, 0, 0, 16, 214, 1, 0, 0,
		0, 18, 216, 1, 0, 0, 0, 20, 224, 1, 0, 0, 0, 22, 232, 1, 0, 0, 0, 24, 256,
		1, 0, 0, 0, 26, 258, 1, 0, 0, 0, 28, 270, 1, 0, 0, 0, 30, 286, 1, 0, 0,
		0, 32, 312, 1, 0, 0, 0, 34, 320, 1, 0, 0, 0, 36, 340, 1, 0, 0, 0, 38, 367,
		1, 0, 0, 0, 40, 394, 1, 0, 0, 0, 42, 396, 1, 0, 0, 0, 44, 406, 1, 0, 0,
		0, 46, 452, 1, 0, 0, 0, 48, 454, 1, 0, 0, 0, 50, 473, 1, 0, 0, 0, 52, 481,
		1, 0, 0, 0, 54, 490, 1, 0, 0, 0, 56, 498, 1, 0, 0, 0, 58, 518, 1, 0, 0,
		0, 60, 537, 1, 0, 0, 0, 62, 544, 1, 0, 0, 0, 64, 552, 1, 0, 0, 0, 66, 554,
		1, 0, 0, 0, 68, 598, 1, 0, 0, 0, 70, 606, 1, 0, 0, 0, 72, 635, 1, 0, 0,
		0, 74, 641, 1, 0, 0, 0, 76, 650, 1, 0, 0, 0, 78, 658, 1, 0, 0, 0, 80, 693,
		1, 0, 0, 0, 82, 695, 1, 0, 0, 0, 84, 703, 1, 0, 0, 0, 86, 775, 1, 0, 0,
		0, 88, 778, 1, 0, 0, 0, 90, 798, 1, 0, 0, 0, 92, 800, 1, 0, 0, 0, 94, 831,
		1, 0, 0, 0, 96, 835, 1, 0, 0, 0, 98, 870, 1, 0, 0, 0, 100, 899, 1, 0, 0,
		0, 102, 994, 1, 0, 0, 0, 104, 1087, 1, 0, 0, 0, 106, 1107, 1, 0, 0, 0,
		108, 1112, 1, 0, 0, 0, 110, 1120, 1, 0, 0, 0, 112, 1165, 1, 0, 0, 0, 114,
		1228, 1, 0, 0, 0, 116, 1328, 1, 0, 0, 0, 118, 1330, 1, 0, 0, 0, 120, 1335,
		1, 0, 0, 0, 122, 1344, 1, 0, 0, 0, 124, 1354, 1, 0, 0, 0, 126, 131, 3,
		2, 1, 0, 127, 128, 5, 6, 0, 0, 128, 130, 3, 2, 1, 0, 129, 127, 1, 0, 0,
		0, 130, 133, 1, 0, 0, 0, 131, 129, 1, 0, 0, 0, 131, 132, 1, 0, 0, 0, 132,
		135, 1, 0, 0, 0, 133, 131, 1, 0, 0, 0, 134, 136, 5, 6, 0, 0, 135, 134,
		1, 0, 0, 0, 135, 136, 1, 0, 0, 0, 136, 137, 1, 0, 0, 0, 137, 138, 5, 0,
		0, 1, 138, 1, 1, 0, 0, 0, 139, 140, 5, 1, 0, 0, 140, 141, 3, 6, 3, 0, 141,
		142, 5, 2, 0, 0, 142, 144, 1, 0, 0, 0, 143, 139, 1, 0, 0, 0, 143, 144,
		1, 0, 0, 0, 144, 162, 1, 0, 0, 0, 145, 163, 3, 32, 16, 0, 146, 163, 3,
		36, 18, 0, 147, 163, 3, 44, 22, 0, 148, 163, 3, 42, 21, 0, 149, 163, 3,
		48, 24, 0, 150, 163, 3, 50, 25, 0, 151, 163, 3, 52, 26, 0, 152, 163, 3,
		54, 27, 0, 153, 163, 3, 56, 28, 0, 154, 163, 3, 58, 29, 0, 155, 163, 3,
		60, 30, 0, 156, 163, 3, 66, 33, 0, 157, 163, 3, 68, 34, 0, 158, 163, 3,
		70, 35, 0, 159, 163, 3, 72, 36, 0, 160, 163, 3, 74, 37, 0, 161, 163, 3,
		76, 38, 0, 162, 145, 1, 0, 0, 0, 162, 146, 1, 0, 0, 0, 162, 147, 1, 0,
		0, 0, 162, 148, 1, 0, 0, 0, 162, 149, 1, 0, 0, 0, 162, 150, 1, 0, 0, 0,
		162, 151, 1, 0, 0, 0, 162, 152, 1, 0, 0, 0, 162, 153, 1, 0, 0, 0, 162,
		154, 1, 0, 0, 0, 162, 155, 1, 0, 0, 0, 162, 156, 1, 0, 0, 0, 162, 157,
		1, 0, 0, 0, 162, 158, 1, 0, 0, 0, 162, 159, 1, 0, 0, 0, 162, 160, 1, 0,
		0, 0, 162, 161, 1, 0, 0, 0, 163, 3, 1, 0, 0, 0, 164, 179, 5, 136, 0, 0,
		165, 167, 7, 0, 0, 0, 166, 165, 1, 0, 0, 0, 166, 167, 1, 0, 0, 0, 167,
		168, 1, 0, 0, 0, 168, 179, 5, 139, 0, 0, 169, 171, 7, 0, 0, 0, 170, 169,
		1, 0, 0, 0, 170, 171, 1, 0, 0, 0, 171, 172, 1, 0, 0, 0, 172, 173, 5, 139,
		0, 0, 173, 174, 5, 12, 0, 0, 174, 179, 5, 139, 0, 0, 175, 179, 7, 1, 0,
		0, 176, 179, 5, 57, 0, 0, 177, 179, 5, 140, 0, 0, 178, 164, 1, 0, 0, 0,
		178, 166, 1, 0, 0, 0, 178, 170, 1, 0, 0, 0, 178, 175, 1, 0, 0, 0, 178,
		176, 1, 0, 0, 0, 178, 177, 1, 0, 0, 0, 179, 5, 1, 0, 0, 0, 180, 181, 5,
		33, 0, 0, 181, 182, 3, 8, 4, 0, 182, 183, 5, 33, 0, 0, 183, 186, 1, 0,
		0, 0, 184, 186, 3, 8, 4, 0, 185, 180, 1, 0, 0, 0, 185, 184, 1, 0, 0, 0,
		186, 7, 1, 0, 0, 0, 187, 188, 7, 2, 0, 0, 188, 9, 1, 0, 0, 0, 189, 194,
		3, 6, 3, 0, 190, 191, 5, 9, 0, 0, 191, 193, 3, 6, 3, 0, 192, 190, 1, 0,
		0, 0, 193, 196, 1, 0, 0, 0, 194, 192, 1, 0, 0, 0, 194, 195, 1, 0, 0, 0,
		195, 11, 1, 0, 0, 0, 196, 194, 1, 0, 0, 0, 197, 205, 3, 6, 3, 0, 198, 199,
		5, 7, 0, 0, 199, 202, 5, 139, 0, 0, 200, 201, 5, 9, 0, 0, 201, 203, 5,
		139, 0, 0, 202, 200, 1, 0, 0, 0, 202, 203, 1, 0, 0, 0, 203, 204, 1, 0,
		0, 0, 204, 206, 5, 8, 0, 0, 205, 198, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0,
		206, 209, 1, 0, 0, 0, 207, 208, 5, 3, 0, 0, 208, 210, 5, 4, 0, 0, 209,
		207, 1, 0, 0, 0, 209, 210, 1, 0, 0, 0, 210, 13, 1, 0, 0, 0, 211, 212, 5,
		29, 0, 0, 212, 213, 3, 12, 6, 0, 213, 15, 1, 0, 0, 0, 214, 215, 7, 3, 0,
		0, 215, 17, 1, 0, 0, 0, 216, 217, 3, 6, 3, 0, 217, 221, 3, 12, 6, 0, 218,
		220, 3, 24, 12, 0, 219, 218, 1, 0, 0, 0, 220, 223, 1, 0, 0, 0, 221, 219,
		1, 0, 0, 0, 221, 222, 1, 0, 0, 0, 222, 19, 1, 0, 0, 0, 223, 221, 1, 0,
		0, 0, 224, 229, 3, 12, 6, 0, 225, 226, 5, 9, 0, 0, 226, 228, 3, 12, 6,
		0, 227, 225, 1, 0, 0, 0, 228, 231, 1, 0, 0, 0, 229, 227, 1, 0, 0, 0, 229,
		230, 1, 0, 0, 0, 230, 21, 1, 0, 0, 0, 231, 229, 1, 0, 0, 0, 232, 233, 3,
		6, 3, 0, 233, 240, 3, 12, 6, 0, 234, 235, 5, 9, 0, 0, 235, 236, 3, 6, 3,
		0, 236, 237, 3, 12, 6, 0, 237, 239, 1, 0, 0, 0, 238, 234, 1, 0, 0, 0, 239,
		242, 1, 0, 0, 0, 240, 238, 1, 0, 0, 0, 240, 241, 1, 0, 0, 0, 241, 23, 1,
		0, 0, 0, 242, 240, 1, 0, 0, 0, 243, 244, 5, 48, 0, 0, 244, 257, 5, 49,
		0, 0, 245, 257, 5, 52, 0, 0, 246, 247, 5, 62, 0, 0, 247, 257, 5, 57, 0,
		0, 248, 249, 5, 56, 0, 0, 249, 257, 3, 112, 56, 0, 250, 257, 3, 28, 14,
		0, 251, 252, 5, 46, 0, 0, 252, 253, 5, 7, 0, 0, 253, 254, 3, 102, 51, 0,
		254, 255, 5, 8, 0, 0, 255, 257, 1, 0, 0, 0, 256, 243, 1, 0, 0, 0, 256,
		245, 1, 0, 0, 0, 256, 246, 1, 0, 0, 0, 256, 248, 1, 0, 0, 0, 256, 250,
		1, 0, 0, 0, 256, 251, 1, 0, 0, 0, 257, 25, 1, 0, 0, 0, 258, 259, 5, 50,
		0, 0, 259, 268, 7, 4, 0, 0, 260, 261, 5, 55, 0, 0, 261, 269, 5, 57, 0,
		0, 262, 263, 5, 55, 0, 0, 263, 269, 5, 56, 0, 0, 264, 269, 5, 54, 0, 0,
		265, 266, 5, 88, 0, 0, 266, 269, 5, 37, 0, 0, 267, 269, 5, 53, 0, 0, 268,
		260, 1, 0, 0, 0, 268, 262, 1, 0, 0, 0, 268, 264, 1, 0, 0, 0, 268, 265,
		1, 0, 0, 0, 268, 267, 1, 0, 0, 0, 269, 27, 1, 0, 0, 0, 270, 274, 5, 60,
		0, 0, 271, 272, 3, 6, 3, 0, 272, 273, 5, 12, 0, 0, 273, 275, 1, 0, 0, 0,
		274, 271, 1, 0, 0, 0, 274, 275, 1, 0, 0, 0, 275, 276, 1, 0, 0, 0, 276,
		277, 3, 6, 3, 0, 277, 278, 5, 7, 0, 0, 278, 279, 3, 10, 5, 0, 279, 284,
		5, 8, 0, 0, 280, 282, 3, 26, 13, 0, 281, 283, 3, 26, 13, 0, 282, 281, 1,
		0, 0, 0, 282, 283, 1, 0, 0, 0, 283, 285, 1, 0, 0, 0, 284, 280, 1, 0, 0,
		0, 284, 285, 1, 0, 0, 0, 285, 29, 1, 0, 0, 0, 286, 298, 5, 87, 0, 0, 287,
		289, 5, 36, 0, 0, 288, 287, 1, 0, 0, 0, 288, 289, 1, 0, 0, 0, 289, 290,
		1, 0, 0, 0, 290, 291, 5, 7, 0, 0, 291, 292, 3, 22, 11, 0, 292, 293, 5,
		8, 0, 0, 293, 299, 1, 0, 0, 0, 294, 295, 5, 7, 0, 0, 295, 296, 3, 20, 10,
		0, 296, 297, 5, 8, 0, 0, 297, 299, 1, 0, 0, 0, 298, 288, 1, 0, 0, 0, 298,
		294, 1, 0, 0, 0, 299, 31, 1, 0, 0, 0, 300, 302, 5, 89, 0, 0, 301, 303,
		5, 124, 0, 0, 302, 301, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 304, 1,
		0, 0, 0, 304, 309, 3, 34, 17, 0, 305, 306, 5, 9, 0, 0, 306, 308, 3, 34,
		17, 0, 307, 305, 1, 0, 0, 0, 308, 311, 1, 0, 0, 0, 309, 307, 1, 0, 0, 0,
		309, 310, 1, 0, 0, 0, 310, 313, 1, 0, 0, 0, 311, 309, 1, 0, 0, 0, 312,
		300, 1, 0, 0, 0, 312, 313, 1, 0, 0, 0, 313, 318, 1, 0, 0, 0, 314, 319,
		3, 78, 39, 0, 315, 319, 3, 92, 46, 0, 316, 319, 3, 96, 48, 0, 317, 319,
		3, 100, 50, 0, 318, 314, 1, 0, 0, 0, 318, 315, 1, 0, 0, 0, 318, 316, 1,
		0, 0, 0, 318, 317, 1, 0, 0, 0, 319, 33, 1, 0, 0, 0, 320, 333, 3, 6, 3,
		0, 321, 330, 5, 7, 0, 0, 322, 327, 3, 6, 3, 0, 323, 324, 5, 9, 0, 0, 324,
		326, 3, 6, 3, 0, 325, 323, 1, 0, 0, 0, 326, 329, 1, 0, 0, 0, 327, 325,
		1, 0, 0, 0, 327, 328, 1, 0, 0, 0, 328, 331, 1, 0, 0, 0, 329, 327, 1, 0,
		0, 0, 330, 322, 1, 0, 0, 0, 330, 331, 1, 0, 0, 0, 331, 332, 1, 0, 0, 0,
		332, 334, 5, 8, 0, 0, 333, 321, 1, 0, 0, 0, 333, 334, 1, 0, 0, 0, 334,
		335, 1, 0, 0, 0, 335, 336, 5, 78, 0, 0, 336, 337, 5, 7, 0, 0, 337, 338,
		3, 78, 39, 0, 338, 339, 5, 8, 0, 0, 339, 35, 1, 0, 0, 0, 340, 341, 5, 38,
		0, 0, 341, 345, 5, 36, 0, 0, 342, 343, 5, 113, 0, 0, 343, 344, 5, 62, 0,
		0, 344, 346, 5, 71, 0, 0, 345, 342, 1, 0, 0, 0, 345, 346, 1, 0, 0, 0, 346,
		347, 1, 0, 0, 0, 347, 348, 3, 6, 3, 0, 348, 351, 5, 7, 0, 0, 349, 352,
		3, 18, 9, 0, 350, 352, 3, 38, 19, 0, 351, 349, 1, 0, 0, 0, 351, 350, 1,
		0, 0, 0, 352, 360, 1, 0, 0, 0, 353, 356, 5, 9, 0, 0, 354, 357, 3, 18, 9,
		0, 355, 357, 3, 38, 19, 0, 356, 354, 1, 0, 0, 0, 356, 355, 1, 0, 0, 0,
		357, 359, 1, 0, 0, 0, 358, 353, 1, 0, 0, 0, 359, 362, 1, 0, 0, 0, 360,
		358, 1, 0, 0, 0, 360, 361, 1, 0, 0, 0, 361, 363, 1, 0, 0, 0, 362, 360,
		1, 0, 0, 0, 363, 364, 5, 8, 0, 0, 364, 37, 1, 0, 0, 0, 365, 366, 5, 45,
		0, 0, 366, 368, 3, 6, 3, 0, 367, 365, 1, 0, 0, 0, 367, 368, 1, 0, 0, 0,
		368, 392, 1, 0, 0, 0, 369, 370, 5, 52, 0, 0, 370, 371, 5, 7, 0, 0, 371,
		372, 3, 10, 5, 0, 372, 373, 5, 8, 0, 0, 373, 393, 1, 0, 0, 0, 374, 375,
		5, 46, 0, 0, 375, 376, 5, 7, 0, 0, 376, 377, 3, 102, 51, 0, 377, 378, 5,
		8, 0, 0, 378, 393, 1, 0, 0, 0, 379, 380, 5, 47, 0, 0, 380, 381, 5, 49,
		0, 0, 381, 382, 5, 7, 0, 0, 382, 383, 3, 10, 5, 0, 383, 384, 5, 8, 0, 0,
		384, 385, 3, 28, 14, 0, 385, 393, 1, 0, 0, 0, 386, 387, 5, 48, 0, 0, 387,
		388, 5, 49, 0, 0, 388, 389, 5, 7, 0, 0, 389, 390, 3, 10, 5, 0, 390, 391,
		5, 8, 0, 0, 391, 393, 1, 0, 0, 0, 392, 369, 1, 0, 0, 0, 392, 374, 1, 0,
		0, 0, 392, 379, 1, 0, 0, 0, 392, 386, 1, 0, 0, 0, 393, 39, 1, 0, 0, 0,
		394, 395, 7, 5, 0, 0, 395, 41, 1, 0, 0, 0, 396, 397, 5, 42, 0, 0, 397,
		400, 5, 36, 0, 0, 398, 399, 5, 113, 0, 0, 399, 401, 5, 71, 0, 0, 400, 398,
		1, 0, 0, 0, 400, 401, 1, 0, 0, 0, 401, 402, 1, 0, 0, 0, 402, 404, 3, 10,
		5, 0, 403, 405, 3, 40, 20, 0, 404, 403, 1, 0, 0, 0, 404, 405, 1, 0, 0,
		0, 405, 43, 1, 0, 0, 0, 406, 407, 5, 39, 0, 0, 407, 408, 5, 36, 0, 0, 408,
		409, 3, 6, 3, 0, 409, 410, 3, 46, 23, 0, 410, 45, 1, 0, 0, 0, 411, 412,
		5, 39, 0, 0, 412, 413, 5, 40, 0, 0, 413, 414, 3, 6, 3, 0, 414, 419, 5,
		55, 0, 0, 415, 416, 5, 62, 0, 0, 416, 420, 5, 57, 0, 0, 417, 418, 5, 56,
		0, 0, 418, 420, 3, 112, 56, 0, 419, 415, 1, 0, 0, 0, 419, 417, 1, 0, 0,
		0, 420, 453, 1, 0, 0, 0, 421, 422, 5, 39, 0, 0, 422, 423, 5, 40, 0, 0,
		423, 424, 3, 6, 3, 0, 424, 428, 5, 42, 0, 0, 425, 426, 5, 62, 0, 0, 426,
		429, 5, 57, 0, 0, 427, 429, 5, 56, 0, 0, 428, 425, 1, 0, 0, 0, 428, 427,
		1, 0, 0, 0, 429, 453, 1, 0, 0, 0, 430, 431, 5, 41, 0, 0, 431, 432, 5, 40,
		0, 0, 432, 433, 3, 6, 3, 0, 433, 434, 3, 12, 6, 0, 434, 453, 1, 0, 0, 0,
		435, 436, 5, 42, 0, 0, 436, 437, 5, 40, 0, 0, 437, 453, 3, 6, 3, 0, 438,
		439, 5, 43, 0, 0, 439, 440, 5, 40, 0, 0, 440, 441, 3, 6, 3, 0, 441, 442,
		5, 44, 0, 0, 442, 443, 3, 6, 3, 0, 443, 453, 1, 0, 0, 0, 444, 445, 5, 43,
		0, 0, 445, 446, 5, 44, 0, 0, 446, 453, 3, 6, 3, 0, 447, 448, 5, 41, 0,
		0, 448, 453, 3, 38, 19, 0, 449, 450, 5, 42, 0, 0, 450, 451, 5, 45, 0, 0,
		451, 453, 3, 6, 3, 0, 452, 411, 1, 0, 0, 0, 452, 421, 1, 0, 0, 0, 452,
		430, 1, 0, 0, 0, 452, 435, 1, 0, 0, 0, 452, 438, 1, 0, 0, 0, 452, 444,
		1, 0, 0, 0, 452, 447, 1, 0, 0, 0, 452, 449, 1, 0, 0, 0, 453, 47, 1, 0,
		0, 0, 454, 456, 5, 38, 0, 0, 455, 457, 5, 52, 0, 0, 456, 455, 1, 0, 0,
		0, 456, 457, 1, 0, 0, 0, 457, 458, 1, 0, 0, 0, 458, 462, 5, 63, 0, 0, 459,
		460, 5, 113, 0, 0, 460, 461, 5, 62, 0, 0, 461, 463, 5, 71, 0, 0, 462, 459,
		1, 0, 0, 0, 462, 463, 1, 0, 0, 0, 463, 465, 1, 0, 0, 0, 464, 466, 3, 6,
		3, 0, 465, 464, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 467, 1, 0, 0, 0,
		467, 468, 5, 50, 0, 0, 468, 469, 3, 6, 3, 0, 469, 470, 5, 7, 0, 0, 470,
		471, 3, 10, 5, 0, 471, 472, 5, 8, 0, 0, 472, 49, 1, 0, 0, 0, 473, 474,
		5, 42, 0, 0, 474, 477, 5, 63, 0, 0, 475, 476, 5, 113, 0, 0, 476, 478, 5,
		71, 0, 0, 477, 475, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 479, 1, 0, 0,
		0, 479, 480, 3, 6, 3, 0, 480, 51, 1, 0, 0, 0, 481, 482, 5, 38, 0, 0, 482,
		486, 5, 128, 0, 0, 483, 484, 5, 113, 0, 0, 484, 485, 5, 62, 0, 0, 485,
		487, 5, 71, 0, 0, 486, 483, 1, 0, 0, 0, 486, 487, 1, 0, 0, 0, 487, 488,
		1, 0, 0, 0, 488, 489, 3, 6, 3, 0, 489, 53, 1, 0, 0, 0, 490, 491, 5, 42,
		0, 0, 491, 494, 5, 128, 0, 0, 492, 493, 5, 113, 0, 0, 493, 495, 5, 71,
		0, 0, 494, 492, 1, 0, 0, 0, 494, 495, 1, 0, 0, 0, 495, 496, 1, 0, 0, 0,
		496, 497, 3, 6, 3, 0, 497, 55, 1, 0, 0, 0, 498, 502, 5, 125, 0, 0, 499,
		500, 5, 113, 0, 0, 500, 501, 5, 62, 0, 0, 501, 503, 5, 126, 0, 0, 502,
		499, 1, 0, 0, 0, 502, 503, 1, 0, 0, 0, 503, 506, 1, 0, 0, 0, 504, 507,
		3, 62, 31, 0, 505, 507, 3, 6, 3, 0, 506, 504, 1, 0, 0, 0, 506, 505, 1,
		0, 0, 0, 507, 510, 1, 0, 0, 0, 508, 509, 5, 50, 0, 0, 509, 511, 3, 6, 3,
		0, 510, 508, 1, 0, 0, 0, 510, 511, 1, 0, 0, 0, 511, 512, 1, 0, 0, 0, 512,
		516, 5, 44, 0, 0, 513, 517, 3, 6, 3, 0, 514, 517, 5, 136, 0, 0, 515, 517,
		3, 112, 56, 0, 516, 513, 1, 0, 0, 0, 516, 514, 1, 0, 0, 0, 516, 515, 1,
		0, 0, 0, 517, 57, 1, 0, 0, 0, 518, 521, 5, 127, 0, 0, 519, 520, 5, 113,
		0, 0, 520, 522, 5, 126, 0, 0, 521, 519, 1, 0, 0, 0, 521, 522, 1, 0, 0,
		0, 522, 525, 1, 0, 0, 0, 523, 526, 3, 62, 31, 0, 524, 526, 3, 6, 3, 0,
		525, 523, 1, 0, 0, 0, 525, 524, 1, 0, 0, 0, 526, 529, 1, 0, 0, 0, 527,
		528, 5, 50, 0, 0, 528, 530, 3, 6, 3, 0, 529, 527, 1, 0, 0, 0, 529, 530,
		1, 0, 0, 0, 530, 531, 1, 0, 0, 0, 531, 535, 5, 95, 0, 0, 532, 536, 3, 6,
		3, 0, 533, 536, 5, 136, 0, 0, 534, 536, 3, 112, 56, 0, 535, 532, 1, 0,
		0, 0, 535, 533, 1, 0, 0, 0, 535, 534, 1, 0, 0, 0, 536, 59, 1, 0, 0, 0,
		537, 538, 5, 132, 0, 0, 538, 539, 5, 133, 0, 0, 539, 542, 5, 44, 0, 0,
		540, 543, 5, 136, 0, 0, 541, 543, 3, 112, 56, 0, 542, 540, 1, 0, 0, 0,
		542, 541, 1, 0, 0, 0, 543, 61, 1, 0, 0, 0, 544, 549, 3, 64, 32, 0, 545,
		546, 5, 9, 0, 0, 546, 548, 3, 64, 32, 0, 547, 545, 1, 0, 0, 0, 548, 551,
		1, 0, 0, 0, 549, 547, 1, 0, 0, 0, 549, 550, 1, 0, 0, 0, 550, 63, 1, 0,
		0, 0, 551, 549, 1, 0, 0, 0, 552, 553, 7, 6, 0, 0, 553, 65, 1, 0, 0, 0,
		554, 557, 5, 38, 0, 0, 555, 556, 5, 65, 0, 0, 556, 558, 5, 129, 0, 0, 557,
		555, 1, 0, 0, 0, 557, 558, 1, 0, 0, 0, 558, 559, 1, 0, 0, 0, 559, 563,
		5, 37, 0, 0, 560, 561, 5, 113, 0, 0, 561, 562, 5, 62, 0, 0, 562, 564, 5,
		71, 0, 0, 563, 560, 1, 0, 0, 0, 563, 564, 1, 0, 0, 0, 564, 565, 1, 0, 0,
		0, 565, 566, 3, 6, 3, 0, 566, 577, 5, 7, 0, 0, 567, 568, 5, 148, 0, 0,
		568, 574, 3, 12, 6, 0, 569, 570, 5, 9, 0, 0, 570, 571, 5, 148, 0, 0, 571,
		573, 3, 12, 6, 0, 572, 569, 1, 0, 0, 0, 573, 576, 1, 0, 0, 0, 574, 572,
		1, 0, 0, 0, 574, 575, 1, 0, 0, 0, 575, 578, 1, 0, 0, 0, 576, 574, 1, 0,
		0, 0, 577, 567, 1, 0, 0, 0, 577, 578, 1, 0, 0, 0, 578, 579, 1, 0, 0, 0,
		579, 583, 5, 8, 0, 0, 580, 582, 3, 6, 3, 0, 581, 580, 1, 0, 0, 0, 582,
		585, 1, 0, 0, 0, 583, 581, 1, 0, 0, 0, 583, 584, 1, 0, 0, 0, 584, 587,
		1, 0, 0, 0, 585, 583, 1, 0, 0, 0, 586, 588, 3, 30, 15, 0, 587, 586, 1,
		0, 0, 0, 587, 588, 1, 0, 0, 0, 588, 589, 1, 0, 0, 0, 589, 593, 5, 1, 0,
		0, 590, 592, 3, 116, 58, 0, 591, 590, 1, 0, 0, 0, 592, 595, 1, 0, 0, 0,
		593, 591, 1, 0, 0, 0, 593, 594, 1, 0, 0, 0, 594, 596, 1, 0, 0, 0, 595,
		593, 1, 0, 0, 0, 596, 597, 5, 2, 0, 0, 597, 67, 1, 0, 0, 0, 598, 599, 5,
		42, 0, 0, 599, 602, 5, 37, 0, 0, 600, 601, 5, 113, 0, 0, 601, 603, 5, 71,
		0, 0, 602, 600, 1, 0, 0, 0, 602, 603, 1, 0, 0, 0, 603, 604, 1, 0, 0, 0,
		604, 605, 3, 6, 3, 0, 605, 69, 1, 0, 0, 0, 606, 610, 5, 34, 0, 0, 607,
		608, 5, 113, 0, 0, 608, 609, 5, 62, 0, 0, 609, 611, 5, 71, 0, 0, 610, 607,
		1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611, 612, 1, 0, 0, 0, 612, 630, 3, 6,
		3, 0, 613, 627, 5, 1, 0, 0, 614, 615, 3, 6, 3, 0, 615, 616, 5, 5, 0, 0,
		616, 624, 3, 112, 56, 0, 617, 618, 5, 9, 0, 0, 618, 619, 3, 6, 3, 0, 619,
		620, 5, 5, 0, 0, 620, 621, 3, 112, 56, 0, 621, 623, 1, 0, 0, 0, 622, 617,
		1, 0, 0, 0, 623, 626, 1, 0, 0, 0, 624, 622, 1, 0, 0, 0, 624, 625, 1, 0,
		0, 0, 625, 628, 1, 0, 0, 0, 626, 624, 1, 0, 0, 0, 627, 614, 1, 0, 0, 0,
		627, 628, 1, 0, 0, 0, 628, 629, 1, 0, 0, 0, 629, 631, 5, 2, 0, 0, 630,
		613, 1, 0, 0, 0, 630, 631, 1, 0, 0, 0, 631, 632, 1, 0, 0, 0, 632, 633,
		5, 78, 0, 0, 633, 634, 3, 6, 3, 0, 634, 71, 1, 0, 0, 0, 635, 636, 5, 35,
		0, 0, 636, 639, 3, 6, 3, 0, 637, 638, 5, 113, 0, 0, 638, 640, 5, 71, 0,
		0, 639, 637, 1, 0, 0, 0, 639, 640, 1, 0, 0, 0, 640, 73, 1, 0, 0, 0, 641,
		642, 5, 38, 0, 0, 642, 646, 5, 131, 0, 0, 643, 644, 5, 113, 0, 0, 644,
		645, 5, 62, 0, 0, 645, 647, 5, 71, 0, 0, 646, 643, 1, 0, 0, 0, 646, 647,
		1, 0, 0, 0, 647, 648, 1, 0, 0, 0, 648, 649, 3, 6, 3, 0, 649, 75, 1, 0,
		0, 0, 650, 651, 5, 42, 0, 0, 651, 654, 5, 131, 0, 0, 652, 653, 5, 113,
		0, 0, 653, 655, 5, 71, 0, 0, 654, 652, 1, 0, 0, 0, 654, 655, 1, 0, 0, 0,
		655, 656, 1, 0, 0, 0, 656, 657, 3, 6, 3, 0, 657, 77, 1, 0, 0, 0, 658, 664,
		3, 84, 42, 0, 659, 660, 3, 80, 40, 0, 660, 661, 3, 84, 42, 0, 661, 663,
		1, 0, 0, 0, 662, 659, 1, 0, 0, 0, 663, 666, 1, 0, 0, 0, 664, 662, 1, 0,
		0, 0, 664, 665, 1, 0, 0, 0, 665, 677, 1, 0, 0, 0, 666, 664, 1, 0, 0, 0,
		667, 668, 5, 83, 0, 0, 668, 669, 5, 84, 0, 0, 669, 674, 3, 82, 41, 0, 670,
		671, 5, 9, 0, 0, 671, 673, 3, 82, 41, 0, 672, 670, 1, 0, 0, 0, 673, 676,
		1, 0, 0, 0, 674, 672, 1, 0, 0, 0, 674, 675, 1, 0, 0, 0, 675, 678, 1, 0,
		0, 0, 676, 674, 1, 0, 0, 0, 677, 667, 1, 0, 0, 0, 677, 678, 1, 0, 0, 0,
		678, 681, 1, 0, 0, 0, 679, 680, 5, 81, 0, 0, 680, 682, 3, 102, 51, 0, 681,
		679, 1, 0, 0, 0, 681, 682, 1, 0, 0, 0, 682, 685, 1, 0, 0, 0, 683, 684,
		5, 82, 0, 0, 684, 686, 3, 102, 51, 0, 685, 683, 1, 0, 0, 0, 685, 686, 1,
		0, 0, 0, 686, 79, 1, 0, 0, 0, 687, 689, 5, 102, 0, 0, 688, 690, 5, 72,
		0, 0, 689, 688, 1, 0, 0, 0, 689, 690, 1, 0, 0, 0, 690, 694, 1, 0, 0, 0,
		691, 694, 5, 103, 0, 0, 692, 694, 5, 104, 0, 0, 693, 687, 1, 0, 0, 0, 693,
		691, 1, 0, 0, 0, 693, 692, 1, 0, 0, 0, 694, 81, 1, 0, 0, 0, 695, 697, 3,
		102, 51, 0, 696, 698, 7, 7, 0, 0, 697, 696, 1, 0, 0, 0, 697, 698, 1, 0,
		0, 0, 698, 701, 1, 0, 0, 0, 699, 700, 5, 105, 0, 0, 700, 702, 7, 8, 0,
		0, 701, 699, 1, 0, 0, 0, 701, 702, 1, 0, 0, 0, 702, 83, 1, 0, 0, 0, 703,
		705, 5, 98, 0, 0, 704, 706, 5, 94, 0, 0, 705, 704, 1, 0, 0, 0, 705, 706,
		1, 0, 0, 0, 706, 707, 1, 0, 0, 0, 707, 712, 3, 90, 45, 0, 708, 709, 5,
		9, 0, 0, 709, 711, 3, 90, 45, 0, 710, 708, 1, 0, 0, 0, 711, 714, 1, 0,
		0, 0, 712, 710, 1, 0, 0, 0, 712, 713, 1, 0, 0, 0, 713, 723, 1, 0, 0, 0,
		714, 712, 1, 0, 0, 0, 715, 716, 5, 95, 0, 0, 716, 720, 3, 86, 43, 0, 717,
		719, 3, 88, 44, 0, 718, 717, 1, 0, 0, 0, 719, 722, 1, 0, 0, 0, 720, 718,
		1, 0, 0, 0, 720, 721, 1, 0, 0, 0, 721, 724, 1, 0, 0, 0, 722, 720, 1, 0,
		0, 0, 723, 715, 1, 0, 0, 0, 723, 724, 1, 0, 0, 0, 724, 727, 1, 0, 0, 0,
		725, 726, 5, 96, 0, 0, 726, 728, 3, 102, 51, 0, 727, 725, 1, 0, 0, 0, 727,
		728, 1, 0, 0, 0, 728, 736, 1, 0, 0, 0, 729, 730, 5, 85, 0, 0, 730, 731,
		5, 84, 0, 0, 731, 734, 3, 108, 54, 0, 732, 733, 5, 86, 0, 0, 733, 735,
		3, 102, 51, 0, 734, 732, 1, 0, 0, 0, 734, 735, 1, 0, 0, 0, 735, 737, 1,
		0, 0, 0, 736, 729, 1, 0, 0, 0, 736, 737, 1, 0, 0, 0, 737, 752, 1, 0, 0,
		0, 738, 739, 5, 122, 0, 0, 739, 740, 3, 6, 3, 0, 740, 741, 5, 78, 0, 0,
		741, 749, 3, 104, 52, 0, 742, 743, 5, 9, 0, 0, 743, 744, 3, 6, 3, 0, 744,
		745, 5, 78, 0, 0, 745, 746, 3, 104, 52, 0, 746, 748, 1, 0, 0, 0, 747, 742,
		1, 0, 0, 0, 748, 751, 1, 0, 0, 0, 749, 747, 1, 0, 0, 0, 749, 750, 1, 0,
		0, 0, 750, 753, 1, 0, 0, 0, 751, 749, 1, 0, 0, 0, 752, 738, 1, 0, 0, 0,
		752, 753, 1, 0, 0, 0, 753, 85, 1, 0, 0, 0, 754, 755, 3, 6, 3, 0, 755, 756,
		5, 12, 0, 0, 756, 758, 1, 0, 0, 0, 757, 754, 1, 0, 0, 0, 757, 758, 1, 0,
		0, 0, 758, 759, 1, 0, 0, 0, 759, 764, 3, 6, 3, 0, 760, 762, 5, 78, 0, 0,
		761, 760, 1, 0, 0, 0, 761, 762, 1, 0, 0, 0, 762, 763, 1, 0, 0, 0, 763,
		765, 3, 6, 3, 0, 764, 761, 1, 0, 0, 0, 764, 765, 1, 0, 0, 0, 765, 776,
		1, 0, 0, 0, 766, 767, 5, 7, 0, 0, 767, 768, 3, 78, 39, 0, 768, 773, 5,
		8, 0, 0, 769, 771, 5, 78, 0, 0, 770, 769, 1, 0, 0, 0, 770, 771, 1, 0, 0,
		0, 771, 772, 1, 0, 0, 0, 772, 774, 3, 6, 3, 0, 773, 770, 1, 0, 0, 0, 773,
		774, 1, 0, 0, 0, 774, 776, 1, 0, 0, 0, 775, 757, 1, 0, 0, 0, 775, 766,
		1, 0, 0, 0, 776, 87, 1, 0, 0, 0, 777, 779, 7, 9, 0, 0, 778, 777, 1, 0,
		0, 0, 778, 779, 1, 0, 0, 0, 779, 780, 1, 0, 0, 0, 780, 781, 5, 74, 0, 0,
		781, 782, 3, 86, 43, 0, 782, 783, 5, 50, 0, 0, 783, 784, 3, 102, 51, 0,
		784, 89, 1, 0, 0, 0, 785, 790, 3, 102, 51, 0, 786, 788, 5, 78, 0, 0, 787,
		786, 1, 0, 0, 0, 787, 788, 1, 0, 0, 0, 788, 789, 1, 0, 0, 0, 789, 791,
		3, 6, 3, 0, 790, 787, 1, 0, 0, 0, 790, 791, 1, 0, 0, 0, 791, 799, 1, 0,
		0, 0, 792, 793, 3, 6, 3, 0, 793, 794, 5, 12, 0, 0, 794, 796, 1, 0, 0, 0,
		795, 792, 1, 0, 0, 0, 795, 796, 1, 0, 0, 0, 796, 797, 1, 0, 0, 0, 797,
		799, 5, 14, 0, 0, 798, 785, 1, 0, 0, 0, 798, 795, 1, 0, 0, 0, 799, 91,
		1, 0, 0, 0, 800, 801, 5, 59, 0, 0, 801, 806, 3, 6, 3, 0, 802, 804, 5, 78,
		0, 0, 803, 802, 1, 0, 0, 0, 803, 804, 1, 0, 0, 0, 804, 805, 1, 0, 0, 0,
		805, 807, 3, 6, 3, 0, 806, 803, 1, 0, 0, 0, 806, 807, 1, 0, 0, 0, 807,
		808, 1, 0, 0, 0, 808, 809, 5, 55, 0, 0, 809, 814, 3, 94, 47, 0, 810, 811,
		5, 9, 0, 0, 811, 813, 3, 94, 47, 0, 812, 810, 1, 0, 0, 0, 813, 816, 1,
		0, 0, 0, 814, 812, 1, 0, 0, 0, 814, 815, 1, 0, 0, 0, 815, 825, 1, 0, 0,
		0, 816, 814, 1, 0, 0, 0, 817, 818, 5, 95, 0, 0, 818, 822, 3, 86, 43, 0,
		819, 821, 3, 88, 44, 0, 820, 819, 1, 0, 0, 0, 821, 824, 1, 0, 0, 0, 822,
		820, 1, 0, 0, 0, 822, 823, 1, 0, 0, 0, 823, 826, 1, 0, 0, 0, 824, 822,
		1, 0, 0, 0, 825, 817, 1, 0, 0, 0, 825, 826, 1, 0, 0, 0, 826, 829, 1, 0,
		0, 0, 827, 828, 5, 96, 0, 0, 828, 830, 3, 102, 51, 0, 829, 827, 1, 0, 0,
		0, 829, 830, 1, 0, 0, 0, 830, 93, 1, 0, 0, 0, 831, 832, 3, 6, 3, 0, 832,
		833, 5, 15, 0, 0, 833, 834, 3, 102, 51, 0, 834, 95, 1, 0, 0, 0, 835, 836,
		5, 99, 0, 0, 836, 837, 5, 109, 0, 0, 837, 842, 3, 6, 3, 0, 838, 840, 5,
		78, 0, 0, 839, 838, 1, 0, 0, 0, 839, 840, 1, 0, 0, 0, 840, 841, 1, 0, 0,
		0, 841, 843, 3, 6, 3, 0, 842, 839, 1, 0, 0, 0, 842, 843, 1, 0, 0, 0, 843,
		848, 1, 0, 0, 0, 844, 845, 5, 7, 0, 0, 845, 846, 3, 10, 5, 0, 846, 847,
		5, 8, 0, 0, 847, 849, 1, 0, 0, 0, 848, 844, 1, 0, 0, 0, 848, 849, 1, 0,
		0, 0, 849, 865, 1, 0, 0, 0, 850, 851, 5, 100, 0, 0, 851, 852, 5, 7, 0,
		0, 852, 853, 3, 108, 54, 0, 853, 861, 5, 8, 0, 0, 854, 855, 5, 9, 0, 0,
		855, 856, 5, 7, 0, 0, 856, 857, 3, 108, 54, 0, 857, 858, 5, 8, 0, 0, 858,
		860, 1, 0, 0, 0, 859, 854, 1, 0, 0, 0, 860, 863, 1, 0, 0, 0, 861, 859,
		1, 0, 0, 0, 861, 862, 1, 0, 0, 0, 862, 866, 1, 0, 0, 0, 863, 861, 1, 0,
		0, 0, 864, 866, 3, 78, 39, 0, 865, 850, 1, 0, 0, 0, 865, 864, 1, 0, 0,
		0, 866, 868, 1, 0, 0, 0, 867, 869, 3, 98, 49, 0, 868, 867, 1, 0, 0, 0,
		868, 869, 1, 0, 0, 0, 869, 97, 1, 0, 0, 0, 870, 871, 5, 50, 0, 0, 871,
		879, 5, 110, 0, 0, 872, 873, 5, 7, 0, 0, 873, 874, 3, 10, 5, 0, 874, 877,
		5, 8, 0, 0, 875, 876, 5, 96, 0, 0, 876, 878, 3, 102, 51, 0, 877, 875, 1,
		0, 0, 0, 877, 878, 1, 0, 0, 0, 878, 880, 1, 0, 0, 0, 879, 872, 1, 0, 0,
		0, 879, 880, 1, 0, 0, 0, 880, 881, 1, 0, 0, 0, 881, 897, 5, 51, 0, 0, 882,
		898, 5, 111, 0, 0, 883, 884, 5, 59, 0, 0, 884, 885, 5, 55, 0, 0, 885, 890,
		3, 94, 47, 0, 886, 887, 5, 9, 0, 0, 887, 889, 3, 94, 47, 0, 888, 886, 1,
		0, 0, 0, 889, 892, 1, 0, 0, 0, 890, 888, 1, 0, 0, 0, 890, 891, 1, 0, 0,
		0, 891, 895, 1, 0, 0, 0, 892, 890, 1, 0, 0, 0, 893, 894, 5, 96, 0, 0, 894,
		896, 3, 102, 51, 0, 895, 893, 1, 0, 0, 0, 895, 896, 1, 0, 0, 0, 896, 898,
		1, 0, 0, 0, 897, 882, 1, 0, 0, 0, 897, 883, 1, 0, 0, 0, 898, 99, 1, 0,
		0, 0, 899, 900, 5, 58, 0, 0, 900, 901, 5, 95, 0, 0, 901, 906, 3, 6, 3,
		0, 902, 904, 5, 78, 0, 0, 903, 902, 1, 0, 0, 0, 903, 904, 1, 0, 0, 0, 904,
		905, 1, 0, 0, 0, 905, 907, 3, 6, 3, 0, 906, 903, 1, 0, 0, 0, 906, 907,
		1, 0, 0, 0, 907, 910, 1, 0, 0, 0, 908, 909, 5, 96, 0, 0, 909, 911, 3, 102,
		51, 0, 910, 908, 1, 0, 0, 0, 910, 911, 1, 0, 0, 0, 911, 101, 1, 0, 0, 0,
		912, 913, 6, 51, -1, 0, 913, 914, 5, 7, 0, 0, 914, 915, 3, 102, 51, 0,
		915, 917, 5, 8, 0, 0, 916, 918, 3, 14, 7, 0, 917, 916, 1, 0, 0, 0, 917,
		918, 1, 0, 0, 0, 918, 995, 1, 0, 0, 0, 919, 920, 7, 0, 0, 0, 920, 995,
		3, 102, 51, 22, 921, 923, 3, 4, 2, 0, 922, 924, 3, 14, 7, 0, 923, 922,
		1, 0, 0, 0, 923, 924, 1, 0, 0, 0, 924, 995, 1, 0, 0, 0, 925, 932, 3, 110,
		55, 0, 926, 927, 5, 123, 0, 0, 927, 928, 5, 7, 0, 0, 928, 929, 5, 96, 0,
		0, 929, 930, 3, 102, 51, 0, 930, 931, 5, 8, 0, 0, 931, 933, 1, 0, 0, 0,
		932, 926, 1, 0, 0, 0, 932, 933, 1, 0, 0, 0, 933, 934, 1, 0, 0, 0, 934,
		937, 5, 120, 0, 0, 935, 938, 3, 104, 52, 0, 936, 938, 3, 6, 3, 0, 937,
		935, 1, 0, 0, 0, 937, 936, 1, 0, 0, 0, 938, 995, 1, 0, 0, 0, 939, 941,
		3, 110, 55, 0, 940, 942, 3, 14, 7, 0, 941, 940, 1, 0, 0, 0, 941, 942, 1,
		0, 0, 0, 942, 995, 1, 0, 0, 0, 943, 945, 3, 16, 8, 0, 944, 946, 3, 14,
		7, 0, 945, 944, 1, 0, 0, 0, 945, 946, 1, 0, 0, 0, 946, 995, 1, 0, 0, 0,
		947, 948, 5, 130, 0, 0, 948, 950, 5, 3, 0, 0, 949, 951, 3, 108, 54, 0,
		950, 949, 1, 0, 0, 0, 950, 951, 1, 0, 0, 0, 951, 952, 1, 0, 0, 0, 952,
		954, 5, 4, 0, 0, 953, 955, 3, 14, 7, 0, 954, 953, 1, 0, 0, 0, 954, 955,
		1, 0, 0, 0, 955, 995, 1, 0, 0, 0, 956, 957, 3, 6, 3, 0, 957, 958, 5, 12,
		0, 0, 958, 960, 1, 0, 0, 0, 959, 956, 1, 0, 0, 0, 959, 960, 1, 0, 0, 0,
		960, 961, 1, 0, 0, 0, 961, 963, 3, 6, 3, 0, 962, 964, 3, 14, 7, 0, 963,
		962, 1, 0, 0, 0, 963, 964, 1, 0, 0, 0, 964, 995, 1, 0, 0, 0, 965, 967,
		5, 90, 0, 0, 966, 968, 3, 102, 51, 0, 967, 966, 1, 0, 0, 0, 967, 968, 1,
		0, 0, 0, 968, 970, 1, 0, 0, 0, 969, 971, 3, 106, 53, 0, 970, 969, 1, 0,
		0, 0, 971, 972, 1, 0, 0, 0, 972, 970, 1, 0, 0, 0, 972, 973, 1, 0, 0, 0,
		973, 976, 1, 0, 0, 0, 974, 975, 5, 115, 0, 0, 975, 977, 3, 102, 51, 0,
		976, 974, 1, 0, 0, 0, 976, 977, 1, 0, 0, 0, 977, 978, 1, 0, 0, 0, 978,
		979, 5, 93, 0, 0, 979, 995, 1, 0, 0, 0, 980, 982, 5, 62, 0, 0, 981, 980,
		1, 0, 0, 0, 981, 982, 1, 0, 0, 0, 982, 983, 1, 0, 0, 0, 983, 985, 5, 71,
		0, 0, 984, 981, 1, 0, 0, 0, 984, 985, 1, 0, 0, 0, 985, 986, 1, 0, 0, 0,
		986, 987, 5, 7, 0, 0, 987, 988, 3, 78, 39, 0, 988, 990, 5, 8, 0, 0, 989,
		991, 3, 14, 7, 0, 990, 989, 1, 0, 0, 0, 990, 991, 1, 0, 0, 0, 991, 995,
		1, 0, 0, 0, 992, 993, 5, 62, 0, 0, 993, 995, 3, 102, 51, 3, 994, 912, 1,
		0, 0, 0, 994, 919, 1, 0, 0, 0, 994, 921, 1, 0, 0, 0, 994, 925, 1, 0, 0,
		0, 994, 939, 1, 0, 0, 0, 994, 943, 1, 0, 0, 0, 994, 947, 1, 0, 0, 0, 994,
		959, 1, 0, 0, 0, 994, 965, 1, 0, 0, 0, 994, 984, 1, 0, 0, 0, 994, 992,
		1, 0, 0, 0, 995, 1084, 1, 0, 0, 0, 996, 997, 10, 20, 0, 0, 997, 998, 5,
		23, 0, 0, 998, 1083, 3, 102, 51, 21, 999, 1000, 10, 19, 0, 0, 1000, 1001,
		7, 10, 0, 0, 1001, 1083, 3, 102, 51, 20, 1002, 1003, 10, 18, 0, 0, 1003,
		1004, 7, 0, 0, 0, 1004, 1083, 3, 102, 51, 19, 1005, 1006, 10, 9, 0, 0,
		1006, 1007, 5, 13, 0, 0, 1007, 1083, 3, 102, 51, 10, 1008, 1010, 10, 7,
		0, 0, 1009, 1011, 5, 62, 0, 0, 1010, 1009, 1, 0, 0, 0, 1010, 1011, 1, 0,
		0, 0, 1011, 1012, 1, 0, 0, 0, 1012, 1013, 7, 11, 0, 0, 1013, 1083, 3, 102,
		51, 8, 1014, 1016, 10, 6, 0, 0, 1015, 1017, 5, 62, 0, 0, 1016, 1015, 1,
		0, 0, 0, 1016, 1017, 1, 0, 0, 0, 1017, 1018, 1, 0, 0, 0, 1018, 1019, 5,
		69, 0, 0, 1019, 1020, 3, 102, 51, 0, 1020, 1021, 5, 64, 0, 0, 1021, 1022,
		3, 102, 51, 7, 1022, 1083, 1, 0, 0, 0, 1023, 1024, 10, 5, 0, 0, 1024, 1025,
		7, 12, 0, 0, 1025, 1083, 3, 102, 51, 6, 1026, 1027, 10, 2, 0, 0, 1027,
		1028, 5, 64, 0, 0, 1028, 1083, 3, 102, 51, 3, 1029, 1030, 10, 1, 0, 0,
		1030, 1031, 5, 65, 0, 0, 1031, 1083, 3, 102, 51, 2, 1032, 1033, 10, 24,
		0, 0, 1033, 1034, 5, 12, 0, 0, 1034, 1036, 3, 6, 3, 0, 1035, 1037, 3, 14,
		7, 0, 1036, 1035, 1, 0, 0, 0, 1036, 1037, 1, 0, 0, 0, 1037, 1083, 1, 0,
		0, 0, 1038, 1039, 10, 23, 0, 0, 1039, 1048, 5, 3, 0, 0, 1040, 1049, 3,
		102, 51, 0, 1041, 1043, 3, 102, 51, 0, 1042, 1041, 1, 0, 0, 0, 1042, 1043,
		1, 0, 0, 0, 1043, 1044, 1, 0, 0, 0, 1044, 1046, 5, 5, 0, 0, 1045, 1047,
		3, 102, 51, 0, 1046, 1045, 1, 0, 0, 0, 1046, 1047, 1, 0, 0, 0, 1047, 1049,
		1, 0, 0, 0, 1048, 1040, 1, 0, 0, 0, 1048, 1042, 1, 0, 0, 0, 1049, 1050,
		1, 0, 0, 0, 1050, 1052, 5, 4, 0, 0, 1051, 1053, 3, 14, 7, 0, 1052, 1051,
		1, 0, 0, 0, 1052, 1053, 1, 0, 0, 0, 1053, 1083, 1, 0, 0, 0, 1054, 1055,
		10, 21, 0, 0, 1055, 1056, 5, 97, 0, 0, 1056, 1083, 3, 6, 3, 0, 1057, 1059,
		10, 8, 0, 0, 1058, 1060, 5, 62, 0, 0, 1059, 1058, 1, 0, 0, 0, 1059, 1060,
		1, 0, 0, 0, 1060, 1061, 1, 0, 0, 0, 1061, 1062, 5, 68, 0, 0, 1062, 1065,
		5, 7, 0, 0, 1063, 1066, 3, 108, 54, 0, 1064, 1066, 3, 78, 39, 0, 1065,
		1063, 1, 0, 0, 0, 1065, 1064, 1, 0, 0, 0, 1066, 1067, 1, 0, 0, 0, 1067,
		1068, 5, 8, 0, 0, 1068, 1083, 1, 0, 0, 0, 1069, 1070, 10, 4, 0, 0, 1070,
		1072, 5, 70, 0, 0, 1071, 1073, 5, 62, 0, 0, 1072, 1071, 1, 0, 0, 0, 1072,
		1073, 1, 0, 0, 0, 1073, 1080, 1, 0, 0, 0, 1074, 1075, 5, 94, 0, 0, 1075,
		1076, 5, 95, 0, 0, 1076, 1081, 3, 102, 51, 0, 1077, 1081, 5, 57, 0, 0,
		1078, 1081, 5, 137, 0, 0, 1079, 1081, 5, 138, 0, 0, 1080, 1074, 1, 0, 0,
		0, 1080, 1077, 1, 0, 0, 0, 1080, 1078, 1, 0, 0, 0, 1080, 1079, 1, 0, 0,
		0, 1081, 1083, 1, 0, 0, 0, 1082, 996, 1, 0, 0, 0, 1082, 999, 1, 0, 0, 0,
		1082, 1002, 1, 0, 0, 0, 1082, 1005, 1, 0, 0, 0, 1082, 1008, 1, 0, 0, 0,
		1082, 1014, 1, 0, 0, 0, 1082, 1023, 1, 0, 0, 0, 1082, 1026, 1, 0, 0, 0,
		1082, 1029, 1, 0, 0, 0, 1082, 1032, 1, 0, 0, 0, 1082, 1038, 1, 0, 0, 0,
		1082, 1054, 1, 0, 0, 0, 1082, 1057, 1, 0, 0, 0, 1082, 1069, 1, 0, 0, 0,
		1083, 1086, 1, 0, 0, 0, 1084, 1082, 1, 0, 0, 0, 1084, 1085, 1, 0, 0, 0,
		1085, 103, 1, 0, 0, 0, 1086, 1084, 1, 0, 0, 0, 1087, 1091, 5, 7, 0, 0,
		1088, 1089, 5, 121, 0, 0, 1089, 1090, 5, 84, 0, 0, 1090, 1092, 3, 108,
		54, 0, 1091, 1088, 1, 0, 0, 0, 1091, 1092, 1, 0, 0, 0, 1092, 1103, 1, 0,
		0, 0, 1093, 1094, 5, 83, 0, 0, 1094, 1095, 5, 84, 0, 0, 1095, 1100, 3,
		82, 41, 0, 1096, 1097, 5, 9, 0, 0, 1097, 1099, 3, 82, 41, 0, 1098, 1096,
		1, 0, 0, 0, 1099, 1102, 1, 0, 0, 0, 1100, 1098, 1, 0, 0, 0, 1100, 1101,
		1, 0, 0, 0, 1101, 1104, 1, 0, 0, 0, 1102, 1100, 1, 0, 0, 0, 1103, 1093,
		1, 0, 0, 0, 1103, 1104, 1, 0, 0, 0, 1104, 1105, 1, 0, 0, 0, 1105, 1106,
		5, 8, 0, 0, 1106, 105, 1, 0, 0, 0, 1107, 1108, 5, 91, 0, 0, 1108, 1109,
		3, 102, 51, 0, 1109, 1110, 5, 92, 0, 0, 1110, 1111, 3, 102, 51, 0, 1111,
		107, 1, 0, 0, 0, 1112, 1117, 3, 102, 51, 0, 1113, 1114, 5, 9, 0, 0, 1114,
		1116, 3, 102, 51, 0, 1115, 1113, 1, 0, 0, 0, 1116, 1119, 1, 0, 0, 0, 1117,
		1115, 1, 0, 0, 0, 1117, 1118, 1, 0, 0, 0, 1118, 109, 1, 0, 0, 0, 1119,
		1117, 1, 0, 0, 0, 1120, 1121, 3, 6, 3, 0, 1121, 1127, 5, 7, 0, 0, 1122,
		1124, 5, 94, 0, 0, 1123, 1122, 1, 0, 0, 0, 1123, 1124, 1, 0, 0, 0, 1124,
		1125, 1, 0, 0, 0, 1125, 1128, 3, 108, 54, 0, 1126, 1128, 5, 14, 0, 0, 1127,
		1123, 1, 0, 0, 0, 1127, 1126, 1, 0, 0, 0, 1127, 1128, 1, 0, 0, 0, 1128,
		1129, 1, 0, 0, 0, 1129, 1130, 5, 8, 0, 0, 1130, 111, 1, 0, 0, 0, 1131,
		1132, 6, 56, -1, 0, 1132, 1133, 5, 7, 0, 0, 1133, 1134, 3, 112, 56, 0,
		1134, 1136, 5, 8, 0, 0, 1135, 1137, 3, 14, 7, 0, 1136, 1135, 1, 0, 0, 0,
		1136, 1137, 1, 0, 0, 0, 1137, 1166, 1, 0, 0, 0, 1138, 1139, 7, 13, 0, 0,
		1139, 1166, 3, 112, 56, 14, 1140, 1142, 3, 4, 2, 0, 1141, 1143, 3, 14,
		7, 0, 1142, 1141, 1, 0, 0, 0, 1142, 1143, 1, 0, 0, 0, 1143, 1166, 1, 0,
		0, 0, 1144, 1146, 3, 120, 60, 0, 1145, 1147, 3, 14, 7, 0, 1146, 1145, 1,
		0, 0, 0, 1146, 1147, 1, 0, 0, 0, 1147, 1166, 1, 0, 0, 0, 1148, 1150, 3,
		16, 8, 0, 1149, 1151, 3, 14, 7, 0, 1150, 1149, 1, 0, 0, 0, 1150, 1151,
		1, 0, 0, 0, 1151, 1166, 1, 0, 0, 0, 1152, 1154, 5, 130, 0, 0, 1153, 1152,
		1, 0, 0, 0, 1153, 1154, 1, 0, 0, 0, 1154, 1155, 1, 0, 0, 0, 1155, 1157,
		5, 3, 0, 0, 1156, 1158, 3, 114, 57, 0, 1157, 1156, 1, 0, 0, 0, 1157, 1158,
		1, 0, 0, 0, 1158, 1159, 1, 0, 0, 0, 1159, 1161, 5, 4, 0, 0, 1160, 1162,
		3, 14, 7, 0, 1161, 1160, 1, 0, 0, 0, 1161, 1162, 1, 0, 0, 0, 1162, 1166,
		1, 0, 0, 0, 1163, 1164, 5, 62, 0, 0, 1164, 1166, 3, 112, 56, 3, 1165, 1131,
		1, 0, 0, 0, 1165, 1138, 1, 0, 0, 0, 1165, 1140, 1, 0, 0, 0, 1165, 1144,
		1, 0, 0, 0, 1165, 1148, 1, 0, 0, 0, 1165, 1153, 1, 0, 0, 0, 1165, 1163,
		1, 0, 0, 0, 1166, 1225, 1, 0, 0, 0, 1167, 1168, 10, 13, 0, 0, 1168, 1169,
		5, 23, 0, 0, 1169, 1224, 3, 112, 56, 14, 1170, 1171, 10, 12, 0, 0, 1171,
		1172, 7, 10, 0, 0, 1172, 1224, 3, 112, 56, 13, 1173, 1174, 10, 11, 0, 0,
		1174, 1175, 7, 0, 0, 0, 1175, 1224, 3, 112, 56, 12, 1176, 1177, 10, 6,
		0, 0, 1177, 1178, 5, 13, 0, 0, 1178, 1224, 3, 112, 56, 7, 1179, 1180, 10,
		5, 0, 0, 1180, 1181, 7, 12, 0, 0, 1181, 1224, 3, 112, 56, 6, 1182, 1183,
		10, 2, 0, 0, 1183, 1184, 5, 64, 0, 0, 1184, 1224, 3, 112, 56, 3, 1185,
		1186, 10, 1, 0, 0, 1186, 1187, 5, 65, 0, 0, 1187, 1224, 3, 112, 56, 2,
		1188, 1189, 10, 16, 0, 0, 1189, 1190, 5, 12, 0, 0, 1190, 1192, 3, 6, 3,
		0, 1191, 1193, 3, 14, 7, 0, 1192, 1191, 1, 0, 0, 0, 1192, 1193, 1, 0, 0,
		0, 1193, 1224, 1, 0, 0, 0, 1194, 1195, 10, 15, 0, 0, 1195, 1204, 5, 3,
		0, 0, 1196, 1205, 3, 112, 56, 0, 1197, 1199, 3, 112, 56, 0, 1198, 1197,
		1, 0, 0, 0, 1198, 1199, 1, 0, 0, 0, 1199, 1200, 1, 0, 0, 0, 1200, 1202,
		5, 5, 0, 0, 1201, 1203, 3, 112, 56, 0, 1202, 1201, 1, 0, 0, 0, 1202, 1203,
		1, 0, 0, 0, 1203, 1205, 1, 0, 0, 0, 1204, 1196, 1, 0, 0, 0, 1204, 1198,
		1, 0, 0, 0, 1205, 1206, 1, 0, 0, 0, 1206, 1208, 5, 4, 0, 0, 1207, 1209,
		3, 14, 7, 0, 1208, 1207, 1, 0, 0, 0, 1208, 1209, 1, 0, 0, 0, 1209, 1224,
		1, 0, 0, 0, 1210, 1211, 10, 4, 0, 0, 1211, 1213, 5, 70, 0, 0, 1212, 1214,
		5, 62, 0, 0, 1213, 1212, 1, 0, 0, 0, 1213, 1214, 1, 0, 0, 0, 1214, 1221,
		1, 0, 0, 0, 1215, 1216, 5, 94, 0, 0, 1216, 1217, 5, 95, 0, 0, 1217, 1222,
		3, 112, 56, 0, 1218, 1222, 5, 57, 0, 0, 1219, 1222, 5, 137, 0, 0, 1220,
		1222, 5, 138, 0, 0, 1221, 1215, 1, 0, 0, 0, 1221, 1218, 1, 0, 0, 0, 1221,
		1219, 1, 0, 0, 0, 1221, 1220, 1, 0, 0, 0, 1222, 1224, 1, 0, 0, 0, 1223,
		1167, 1, 0, 0, 0, 1223, 1170, 1, 0, 0, 0, 1223, 1173, 1, 0, 0, 0, 1223,
		1176, 1, 0, 0, 0, 1223, 1179, 1, 0, 0, 0, 1223, 1182, 1, 0, 0, 0, 1223,
		1185, 1, 0, 0, 0, 1223, 1188, 1, 0, 0, 0, 1223, 1194, 1, 0, 0, 0, 1223,
		1210, 1, 0, 0, 0, 1224, 1227, 1, 0, 0, 0, 1225, 1223, 1, 0, 0, 0, 1225,
		1226, 1, 0, 0, 0, 1226, 113, 1, 0, 0, 0, 1227, 1225, 1, 0, 0, 0, 1228,
		1233, 3, 112, 56, 0, 1229, 1230, 5, 9, 0, 0, 1230, 1232, 3, 112, 56, 0,
		1231, 1229, 1, 0, 0, 0, 1232, 1235, 1, 0, 0, 0, 1233, 1231, 1, 0, 0, 0,
		1233, 1234, 1, 0, 0, 0, 1234, 115, 1, 0, 0, 0, 1235, 1233, 1, 0, 0, 0,
		1236, 1237, 5, 148, 0, 0, 1237, 1238, 3, 12, 6, 0, 1238, 1239, 5, 6, 0,
		0, 1239, 1329, 1, 0, 0, 0, 1240, 1245, 3, 118, 59, 0, 1241, 1242, 5, 9,
		0, 0, 1242, 1244, 3, 118, 59, 0, 1243, 1241, 1, 0, 0, 0, 1244, 1247, 1,
		0, 0, 0, 1245, 1243, 1, 0, 0, 0, 1245, 1246, 1, 0, 0, 0, 1246, 1248, 1,
		0, 0, 0, 1247, 1245, 1, 0, 0, 0, 1248, 1249, 7, 14, 0, 0, 1249, 1251, 1,
		0, 0, 0, 1250, 1240, 1, 0, 0, 0, 1250, 1251, 1, 0, 0, 0, 1251, 1252, 1,
		0, 0, 0, 1252, 1253, 3, 120, 60, 0, 1253, 1254, 5, 6, 0, 0, 1254, 1329,
		1, 0, 0, 0, 1255, 1257, 3, 112, 56, 0, 1256, 1258, 3, 12, 6, 0, 1257, 1256,
		1, 0, 0, 0, 1257, 1258, 1, 0, 0, 0, 1258, 1259, 1, 0, 0, 0, 1259, 1260,
		7, 14, 0, 0, 1260, 1261, 3, 112, 56, 0, 1261, 1262, 5, 6, 0, 0, 1262, 1329,
		1, 0, 0, 0, 1263, 1264, 5, 112, 0, 0, 1264, 1265, 5, 148, 0, 0, 1265, 1272,
		5, 68, 0, 0, 1266, 1273, 3, 124, 62, 0, 1267, 1273, 3, 32, 16, 0, 1268,
		1270, 5, 130, 0, 0, 1269, 1268, 1, 0, 0, 0, 1269, 1270, 1, 0, 0, 0, 1270,
		1271, 1, 0, 0, 0, 1271, 1273, 3, 112, 56, 0, 1272, 1266, 1, 0, 0, 0, 1272,
		1267, 1, 0, 0, 0, 1272, 1269, 1, 0, 0, 0, 1273, 1274, 1, 0, 0, 0, 1274,
		1278, 5, 1, 0, 0, 1275, 1277, 3, 116, 58, 0, 1276, 1275, 1, 0, 0, 0, 1277,
		1280, 1, 0, 0, 0, 1278, 1276, 1, 0, 0, 0, 1278, 1279, 1, 0, 0, 0, 1279,
		1281, 1, 0, 0, 0, 1280, 1278, 1, 0, 0, 0, 1281, 1283, 5, 2, 0, 0, 1282,
		1284, 5, 6, 0, 0, 1283, 1282, 1, 0, 0, 0, 1283, 1284, 1, 0, 0, 0, 1284,
		1329, 1, 0, 0, 0, 1285, 1286, 5, 113, 0, 0, 1286, 1295, 3, 122, 61, 0,
		1287, 1291, 5, 114, 0, 0, 1288, 1289, 5, 115, 0, 0, 1289, 1291, 5, 113,
		0, 0, 1290, 1287, 1, 0, 0, 0, 1290, 1288, 1, 0, 0, 0, 1291, 1292, 1, 0,
		0, 0, 1292, 1294, 3, 122, 61, 0, 1293, 1290, 1, 0, 0, 0, 1294, 1297, 1,
		0, 0, 0, 1295, 1293, 1, 0, 0, 0, 1295, 1296, 1, 0, 0, 0, 1296, 1307, 1,
		0, 0, 0, 1297, 1295, 1, 0, 0, 0, 1298, 1299, 5, 115, 0, 0, 1299, 1303,
		5, 1, 0, 0, 1300, 1302, 3, 116, 58, 0, 1301, 1300, 1, 0, 0, 0, 1302, 1305,
		1, 0, 0, 0, 1303, 1301, 1, 0, 0, 0, 1303, 1304, 1, 0, 0, 0, 1304, 1306,
		1, 0, 0, 0, 1305, 1303, 1, 0, 0, 0, 1306, 1308, 5, 2, 0, 0, 1307, 1298,
		1, 0, 0, 0, 1307, 1308, 1, 0, 0, 0, 1308, 1310, 1, 0, 0, 0, 1309, 1311,
		5, 6, 0, 0, 1310, 1309, 1, 0, 0, 0, 1310, 1311, 1, 0, 0, 0, 1311, 1329,
		1, 0, 0, 0, 1312, 1313, 3, 32, 16, 0, 1313, 1314, 5, 6, 0, 0, 1314, 1329,
		1, 0, 0, 0, 1315, 1316, 7, 15, 0, 0, 1316, 1329, 5, 6, 0, 0, 1317, 1320,
		5, 118, 0, 0, 1318, 1321, 3, 114, 57, 0, 1319, 1321, 3, 32, 16, 0, 1320,
		1318, 1, 0, 0, 0, 1320, 1319, 1, 0, 0, 0, 1320, 1321, 1, 0, 0, 0, 1321,
		1322, 1, 0, 0, 0, 1322, 1329, 5, 6, 0, 0, 1323, 1324, 5, 118, 0, 0, 1324,
		1325, 5, 119, 0, 0, 1325, 1326, 3, 114, 57, 0, 1326, 1327, 5, 6, 0, 0,
		1327, 1329, 1, 0, 0, 0, 1328, 1236, 1, 0, 0, 0, 1328, 1250, 1, 0, 0, 0,
		1328, 1255, 1, 0, 0, 0, 1328, 1263, 1, 0, 0, 0, 1328, 1285, 1, 0, 0, 0,
		1328, 1312, 1, 0, 0, 0, 1328, 1315, 1, 0, 0, 0, 1328, 1317, 1, 0, 0, 0,
		1328, 1323, 1, 0, 0, 0, 1329, 117, 1, 0, 0, 0, 1330, 1331, 7, 16, 0, 0,
		1331, 119, 1, 0, 0, 0, 1332, 1333, 3, 6, 3, 0, 1333, 1334, 5, 12, 0, 0,
		1334, 1336, 1, 0, 0, 0, 1335, 1332, 1, 0, 0, 0, 1335, 1336, 1, 0, 0, 0,
		1336, 1337, 1, 0, 0, 0, 1337, 1338, 3, 6, 3, 0, 1338, 1340, 5, 7, 0, 0,
		1339, 1341, 3, 114, 57, 0, 1340, 1339, 1, 0, 0, 0, 1340, 1341, 1, 0, 0,
		0, 1341, 1342, 1, 0, 0, 0, 1342, 1343, 5, 8, 0, 0, 1343, 121, 1, 0, 0,
		0, 1344, 1345, 3, 112, 56, 0, 1345, 1349, 5, 1, 0, 0, 1346, 1348, 3, 116,
		58, 0, 1347, 1346, 1, 0, 0, 0, 1348, 1351, 1, 0, 0, 0, 1349, 1347, 1, 0,
		0, 0, 1349, 1350, 1, 0, 0, 0, 1350, 1352, 1, 0, 0, 0, 1351, 1349, 1, 0,
		0, 0, 1352, 1353, 5, 2, 0, 0, 1353, 123, 1, 0, 0, 0, 1354, 1355, 3, 112,
		56, 0, 1355, 1356, 5, 32, 0, 0, 1356, 1357, 3, 112, 56, 0, 1357, 125, 1,
		0, 0, 0, 191, 131, 135, 143, 162, 166, 170, 178, 185, 194, 202, 205, 209,
		221, 229, 240, 256, 268, 274, 282, 284, 288, 298, 302, 309, 312, 318, 327,
		330, 333, 345, 351, 356, 360, 367, 392, 400, 404, 419, 428, 452, 456, 462,
		465, 477, 486, 494, 502, 506, 510, 516, 521, 525, 529, 535, 542, 549, 557,
		563, 574, 577, 583, 587, 593, 602, 610, 624, 627, 630, 639, 646, 654, 664,
		674, 677, 681, 685, 689, 693, 697, 701, 705, 712, 720, 723, 727, 734, 736,
		749, 752, 757, 761, 764, 770, 773, 775, 778, 787, 790, 795, 798, 803, 806,
		814, 822, 825, 829, 839, 842, 848, 861, 865, 868, 877, 879, 890, 895, 897,
		903, 906, 910, 917, 923, 932, 937, 941, 945, 950, 954, 959, 963, 967, 972,
		976, 981, 984, 990, 994, 1010, 1016, 1036, 1042, 1046, 1048, 1052, 1059,
		1065, 1072, 1080, 1082, 1084, 1091, 1100, 1103, 1117, 1123, 1127, 1136,
		1142, 1146, 1150, 1153, 1157, 1161, 1165, 1192, 1198, 1202, 1204, 1208,
		1213, 1221, 1223, 1225, 1233, 1245, 1250, 1257, 1269, 1272, 1278, 1283,
		1290, 1295, 1303, 1307, 1310, 1320, 1328, 1335, 1340, 1349,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// KuneiformParserInit initializes any static state used to implement KuneiformParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewKuneiformParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func KuneiformParserInit() {
	staticData := &KuneiformParserParserStaticData
	staticData.once.Do(kuneiformparserParserInit)
}

// NewKuneiformParser produces a new parser instance for the optional input antlr.TokenStream.
func NewKuneiformParser(input antlr.TokenStream) *KuneiformParser {
	KuneiformParserInit()
	this := new(KuneiformParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &KuneiformParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "KuneiformParser.g4"

	return this
}

// KuneiformParser tokens.
const (
	KuneiformParserEOF                 = antlr.TokenEOF
	KuneiformParserLBRACE              = 1
	KuneiformParserRBRACE              = 2
	KuneiformParserLBRACKET            = 3
	KuneiformParserRBRACKET            = 4
	KuneiformParserCOL                 = 5
	KuneiformParserSCOL                = 6
	KuneiformParserLPAREN              = 7
	KuneiformParserRPAREN              = 8
	KuneiformParserCOMMA               = 9
	KuneiformParserAT                  = 10
	KuneiformParserEXCL                = 11
	KuneiformParserPERIOD              = 12
	KuneiformParserCONCAT              = 13
	KuneiformParserSTAR                = 14
	KuneiformParserEQUALS              = 15
	KuneiformParserEQUATE              = 16
	KuneiformParserHASH                = 17
	KuneiformParserDOLLAR              = 18
	KuneiformParserMOD                 = 19
	KuneiformParserPLUS                = 20
	KuneiformParserMINUS               = 21
	KuneiformParserDIV                 = 22
	KuneiformParserEXP                 = 23
	KuneiformParserNEQ                 = 24
	KuneiformParserLT                  = 25
	KuneiformParserLTE                 = 26
	KuneiformParserGT                  = 27
	KuneiformParserGTE                 = 28
	KuneiformParserTYPE_CAST           = 29
	KuneiformParserUNDERSCORE          = 30
	KuneiformParserASSIGN              = 31
	KuneiformParserRANGE               = 32
	KuneiformParserDOUBLE_QUOTE        = 33
	KuneiformParserUSE                 = 34
	KuneiformParserUNUSE               = 35
	KuneiformParserTABLE               = 36
	KuneiformParserACTION              = 37
	KuneiformParserCREATE              = 38
	KuneiformParserALTER               = 39
	KuneiformParserCOLUMN              = 40
	KuneiformParserADD                 = 41
	KuneiformParserDROP                = 42
	KuneiformParserRENAME              = 43
	KuneiformParserTO                  = 44
	KuneiformParserCONSTRAINT          = 45
	KuneiformParserCHECK               = 46
	KuneiformParserFOREIGN             = 47
	KuneiformParserPRIMARY             = 48
	KuneiformParserKEY                 = 49
	KuneiformParserON                  = 50
	KuneiformParserDO                  = 51
	KuneiformParserUNIQUE              = 52
	KuneiformParserCASCADE             = 53
	KuneiformParserRESTRICT            = 54
	KuneiformParserSET                 = 55
	KuneiformParserDEFAULT             = 56
	KuneiformParserNULL                = 57
	KuneiformParserDELETE              = 58
	KuneiformParserUPDATE              = 59
	KuneiformParserREFERENCES          = 60
	KuneiformParserREF                 = 61
	KuneiformParserNOT                 = 62
	KuneiformParserINDEX               = 63
	KuneiformParserAND                 = 64
	KuneiformParserOR                  = 65
	KuneiformParserLIKE                = 66
	KuneiformParserILIKE               = 67
	KuneiformParserIN                  = 68
	KuneiformParserBETWEEN             = 69
	KuneiformParserIS                  = 70
	KuneiformParserEXISTS              = 71
	KuneiformParserALL                 = 72
	KuneiformParserANY                 = 73
	KuneiformParserJOIN                = 74
	KuneiformParserLEFT                = 75
	KuneiformParserRIGHT               = 76
	KuneiformParserINNER               = 77
	KuneiformParserAS                  = 78
	KuneiformParserASC                 = 79
	KuneiformParserDESC                = 80
	KuneiformParserLIMIT               = 81
	KuneiformParserOFFSET              = 82
	KuneiformParserORDER               = 83
	KuneiformParserBY                  = 84
	KuneiformParserGROUP               = 85
	KuneiformParserHAVING              = 86
	KuneiformParserRETURNS             = 87
	KuneiformParserNO                  = 88
	KuneiformParserWITH                = 89
	KuneiformParserCASE                = 90
	KuneiformParserWHEN                = 91
	KuneiformParserTHEN                = 92
	KuneiformParserEND                 = 93
	KuneiformParserDISTINCT            = 94
	KuneiformParserFROM                = 95
	KuneiformParserWHERE               = 96
	KuneiformParserCOLLATE             = 97
	KuneiformParserSELECT              = 98
	KuneiformParserINSERT              = 99
	KuneiformParserVALUES              = 100
	KuneiformParserFULL                = 101
	KuneiformParserUNION               = 102
	KuneiformParserINTERSECT           = 103
	KuneiformParserEXCEPT              = 104
	KuneiformParserNULLS               = 105
	KuneiformParserFIRST               = 106
	KuneiformParserLAST                = 107
	KuneiformParserRETURNING           = 108
	KuneiformParserINTO                = 109
	KuneiformParserCONFLICT            = 110
	KuneiformParserNOTHING             = 111
	KuneiformParserFOR                 = 112
	KuneiformParserIF                  = 113
	KuneiformParserELSEIF              = 114
	KuneiformParserELSE                = 115
	KuneiformParserBREAK               = 116
	KuneiformParserCONTINUE            = 117
	KuneiformParserRETURN              = 118
	KuneiformParserNEXT                = 119
	KuneiformParserOVER                = 120
	KuneiformParserPARTITION           = 121
	KuneiformParserWINDOW              = 122
	KuneiformParserFILTER              = 123
	KuneiformParserRECURSIVE           = 124
	KuneiformParserGRANT               = 125
	KuneiformParserGRANTED             = 126
	KuneiformParserREVOKE              = 127
	KuneiformParserROLE                = 128
	KuneiformParserREPLACE             = 129
	KuneiformParserARRAY               = 130
	KuneiformParserNAMESPACE           = 131
	KuneiformParserTRANSFER            = 132
	KuneiformParserOWNERSHIP           = 133
	KuneiformParserROLES               = 134
	KuneiformParserCALL                = 135
	KuneiformParserSTRING_             = 136
	KuneiformParserTRUE                = 137
	KuneiformParserFALSE               = 138
	KuneiformParserDIGITS_             = 139
	KuneiformParserBINARY_             = 140
	KuneiformParserLEGACY_FOREIGN_KEY  = 141
	KuneiformParserLEGACY_ON_UPDATE    = 142
	KuneiformParserLEGACY_ON_DELETE    = 143
	KuneiformParserLEGACY_SET_DEFAULT  = 144
	KuneiformParserLEGACY_SET_NULL     = 145
	KuneiformParserLEGACY_NO_ACTION    = 146
	KuneiformParserIDENTIFIER          = 147
	KuneiformParserVARIABLE            = 148
	KuneiformParserCONTEXTUAL_VARIABLE = 149
	KuneiformParserHASH_IDENTIFIER     = 150
	KuneiformParserWS                  = 151
	KuneiformParserBLOCK_COMMENT       = 152
	KuneiformParserLINE_COMMENT        = 153
	KuneiformParserSQL_COMMENT         = 154
)

// KuneiformParser rules.
const (
	KuneiformParserRULE_entry                        = 0
	KuneiformParserRULE_statement                    = 1
	KuneiformParserRULE_literal                      = 2
	KuneiformParserRULE_identifier                   = 3
	KuneiformParserRULE_allowed_identifier           = 4
	KuneiformParserRULE_identifier_list              = 5
	KuneiformParserRULE_type                         = 6
	KuneiformParserRULE_type_cast                    = 7
	KuneiformParserRULE_variable                     = 8
	KuneiformParserRULE_table_column_def             = 9
	KuneiformParserRULE_type_list                    = 10
	KuneiformParserRULE_named_type_list              = 11
	KuneiformParserRULE_inline_constraint            = 12
	KuneiformParserRULE_fk_action                    = 13
	KuneiformParserRULE_fk_constraint                = 14
	KuneiformParserRULE_action_return                = 15
	KuneiformParserRULE_sql_statement                = 16
	KuneiformParserRULE_common_table_expression      = 17
	KuneiformParserRULE_create_table_statement       = 18
	KuneiformParserRULE_table_constraint_def         = 19
	KuneiformParserRULE_opt_drop_behavior            = 20
	KuneiformParserRULE_drop_table_statement         = 21
	KuneiformParserRULE_alter_table_statement        = 22
	KuneiformParserRULE_alter_table_action           = 23
	KuneiformParserRULE_create_index_statement       = 24
	KuneiformParserRULE_drop_index_statement         = 25
	KuneiformParserRULE_create_role_statement        = 26
	KuneiformParserRULE_drop_role_statement          = 27
	KuneiformParserRULE_grant_statement              = 28
	KuneiformParserRULE_revoke_statement             = 29
	KuneiformParserRULE_transfer_ownership_statement = 30
	KuneiformParserRULE_privilege_list               = 31
	KuneiformParserRULE_privilege                    = 32
	KuneiformParserRULE_create_action_statement      = 33
	KuneiformParserRULE_drop_action_statement        = 34
	KuneiformParserRULE_use_extension_statement      = 35
	KuneiformParserRULE_unuse_extension_statement    = 36
	KuneiformParserRULE_create_namespace_statement   = 37
	KuneiformParserRULE_drop_namespace_statement     = 38
	KuneiformParserRULE_select_statement             = 39
	KuneiformParserRULE_compound_operator            = 40
	KuneiformParserRULE_ordering_term                = 41
	KuneiformParserRULE_select_core                  = 42
	KuneiformParserRULE_relation                     = 43
	KuneiformParserRULE_join                         = 44
	KuneiformParserRULE_result_column                = 45
	KuneiformParserRULE_update_statement             = 46
	KuneiformParserRULE_update_set_clause            = 47
	KuneiformParserRULE_insert_statement             = 48
	KuneiformParserRULE_upsert_clause                = 49
	KuneiformParserRULE_delete_statement             = 50
	KuneiformParserRULE_sql_expr                     = 51
	KuneiformParserRULE_window                       = 52
	KuneiformParserRULE_when_then_clause             = 53
	KuneiformParserRULE_sql_expr_list                = 54
	KuneiformParserRULE_sql_function_call            = 55
	KuneiformParserRULE_action_expr                  = 56
	KuneiformParserRULE_action_expr_list             = 57
	KuneiformParserRULE_action_statement             = 58
	KuneiformParserRULE_variable_or_underscore       = 59
	KuneiformParserRULE_action_function_call         = 60
	KuneiformParserRULE_if_then_block                = 61
	KuneiformParserRULE_range                        = 62
)

// IEntryContext is an interface to support dynamic dispatch.
type IEntryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllStatement() []IStatementContext
	Statement(i int) IStatementContext
	EOF() antlr.TerminalNode
	AllSCOL() []antlr.TerminalNode
	SCOL(i int) antlr.TerminalNode

	// IsEntryContext differentiates from other interfaces.
	IsEntryContext()
}

type EntryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEntryContext() *EntryContext {
	var p = new(EntryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_entry
	return p
}

func InitEmptyEntryContext(p *EntryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_entry
}

func (*EntryContext) IsEntryContext() {}

func NewEntryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EntryContext {
	var p = new(EntryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_entry

	return p
}

func (s *EntryContext) GetParser() antlr.Parser { return s.parser }

func (s *EntryContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *EntryContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *EntryContext) EOF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEOF, 0)
}

func (s *EntryContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserSCOL)
}

func (s *EntryContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, i)
}

func (s *EntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EntryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EntryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitEntry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Entry() (localctx IEntryContext) {
	localctx = NewEntryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, KuneiformParserRULE_entry)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(126)
		p.Statement()
	}
	p.SetState(131)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 0, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(127)
				p.Match(KuneiformParserSCOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(128)
				p.Statement()
			}

		}
		p.SetState(133)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 0, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(135)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserSCOL {
		{
			p.SetState(134)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(137)
		p.Match(KuneiformParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNamespace returns the namespace rule contexts.
	GetNamespace() IIdentifierContext

	// SetNamespace sets the namespace rule contexts.
	SetNamespace(IIdentifierContext)

	// Getter signatures
	Sql_statement() ISql_statementContext
	Create_table_statement() ICreate_table_statementContext
	Alter_table_statement() IAlter_table_statementContext
	Drop_table_statement() IDrop_table_statementContext
	Create_index_statement() ICreate_index_statementContext
	Drop_index_statement() IDrop_index_statementContext
	Create_role_statement() ICreate_role_statementContext
	Drop_role_statement() IDrop_role_statementContext
	Grant_statement() IGrant_statementContext
	Revoke_statement() IRevoke_statementContext
	Transfer_ownership_statement() ITransfer_ownership_statementContext
	Create_action_statement() ICreate_action_statementContext
	Drop_action_statement() IDrop_action_statementContext
	Use_extension_statement() IUse_extension_statementContext
	Unuse_extension_statement() IUnuse_extension_statementContext
	Create_namespace_statement() ICreate_namespace_statementContext
	Drop_namespace_statement() IDrop_namespace_statementContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	namespace IIdentifierContext
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_statement
	return p
}

func InitEmptyStatementContext(p *StatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_statement
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) GetNamespace() IIdentifierContext { return s.namespace }

func (s *StatementContext) SetNamespace(v IIdentifierContext) { s.namespace = v }

func (s *StatementContext) Sql_statement() ISql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *StatementContext) Create_table_statement() ICreate_table_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_table_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_table_statementContext)
}

func (s *StatementContext) Alter_table_statement() IAlter_table_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_table_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_table_statementContext)
}

func (s *StatementContext) Drop_table_statement() IDrop_table_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_table_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_table_statementContext)
}

func (s *StatementContext) Create_index_statement() ICreate_index_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_index_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_index_statementContext)
}

func (s *StatementContext) Drop_index_statement() IDrop_index_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_index_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_index_statementContext)
}

func (s *StatementContext) Create_role_statement() ICreate_role_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_role_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_role_statementContext)
}

func (s *StatementContext) Drop_role_statement() IDrop_role_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_role_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_role_statementContext)
}

func (s *StatementContext) Grant_statement() IGrant_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrant_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrant_statementContext)
}

func (s *StatementContext) Revoke_statement() IRevoke_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRevoke_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRevoke_statementContext)
}

func (s *StatementContext) Transfer_ownership_statement() ITransfer_ownership_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransfer_ownership_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransfer_ownership_statementContext)
}

func (s *StatementContext) Create_action_statement() ICreate_action_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_action_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_action_statementContext)
}

func (s *StatementContext) Drop_action_statement() IDrop_action_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_action_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_action_statementContext)
}

func (s *StatementContext) Use_extension_statement() IUse_extension_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUse_extension_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUse_extension_statementContext)
}

func (s *StatementContext) Unuse_extension_statement() IUnuse_extension_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnuse_extension_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnuse_extension_statementContext)
}

func (s *StatementContext) Create_namespace_statement() ICreate_namespace_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_namespace_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_namespace_statementContext)
}

func (s *StatementContext) Drop_namespace_statement() IDrop_namespace_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_namespace_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_namespace_statementContext)
}

func (s *StatementContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *StatementContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *StatementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, KuneiformParserRULE_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(143)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLBRACE {
		{
			p.SetState(139)
			p.Match(KuneiformParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(140)

			var _x = p.Identifier()

			localctx.(*StatementContext).namespace = _x
		}
		{
			p.SetState(141)
			p.Match(KuneiformParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(162)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(145)
			p.Sql_statement()
		}

	case 2:
		{
			p.SetState(146)
			p.Create_table_statement()
		}

	case 3:
		{
			p.SetState(147)
			p.Alter_table_statement()
		}

	case 4:
		{
			p.SetState(148)
			p.Drop_table_statement()
		}

	case 5:
		{
			p.SetState(149)
			p.Create_index_statement()
		}

	case 6:
		{
			p.SetState(150)
			p.Drop_index_statement()
		}

	case 7:
		{
			p.SetState(151)
			p.Create_role_statement()
		}

	case 8:
		{
			p.SetState(152)
			p.Drop_role_statement()
		}

	case 9:
		{
			p.SetState(153)
			p.Grant_statement()
		}

	case 10:
		{
			p.SetState(154)
			p.Revoke_statement()
		}

	case 11:
		{
			p.SetState(155)
			p.Transfer_ownership_statement()
		}

	case 12:
		{
			p.SetState(156)
			p.Create_action_statement()
		}

	case 13:
		{
			p.SetState(157)
			p.Drop_action_statement()
		}

	case 14:
		{
			p.SetState(158)
			p.Use_extension_statement()
		}

	case 15:
		{
			p.SetState(159)
			p.Unuse_extension_statement()
		}

	case 16:
		{
			p.SetState(160)
			p.Create_namespace_statement()
		}

	case 17:
		{
			p.SetState(161)
			p.Drop_namespace_statement()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) CopyAll(ctx *LiteralContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type String_literalContext struct {
	LiteralContext
}

func NewString_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *String_literalContext {
	var p = new(String_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *String_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literalContext) STRING_() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTRING_, 0)
}

func (s *String_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitString_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Decimal_literalContext struct {
	LiteralContext
}

func NewDecimal_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Decimal_literalContext {
	var p = new(Decimal_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Decimal_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Decimal_literalContext) AllDIGITS_() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserDIGITS_)
}

func (s *Decimal_literalContext) DIGITS_(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIGITS_, i)
}

func (s *Decimal_literalContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Decimal_literalContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Decimal_literalContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Decimal_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDecimal_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Null_literalContext struct {
	LiteralContext
}

func NewNull_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Null_literalContext {
	var p = new(Null_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Null_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_literalContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Null_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitNull_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Boolean_literalContext struct {
	LiteralContext
}

func NewBoolean_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Boolean_literalContext {
	var p = new(Boolean_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Boolean_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_literalContext) TRUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTRUE, 0)
}

func (s *Boolean_literalContext) FALSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFALSE, 0)
}

func (s *Boolean_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitBoolean_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Integer_literalContext struct {
	LiteralContext
}

func NewInteger_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Integer_literalContext {
	var p = new(Integer_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Integer_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_literalContext) DIGITS_() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIGITS_, 0)
}

func (s *Integer_literalContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Integer_literalContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Integer_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitInteger_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Binary_literalContext struct {
	LiteralContext
}

func NewBinary_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Binary_literalContext {
	var p = new(Binary_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Binary_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binary_literalContext) BINARY_() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBINARY_, 0)
}

func (s *Binary_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitBinary_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, KuneiformParserRULE_literal)
	var _la int

	p.SetState(178)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		localctx = NewString_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(164)
			p.Match(KuneiformParserSTRING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewInteger_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(166)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserPLUS || _la == KuneiformParserMINUS {
			{
				p.SetState(165)
				_la = p.GetTokenStream().LA(1)

				if !(_la == KuneiformParserPLUS || _la == KuneiformParserMINUS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(168)
			p.Match(KuneiformParserDIGITS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewDecimal_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(170)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserPLUS || _la == KuneiformParserMINUS {
			{
				p.SetState(169)
				_la = p.GetTokenStream().LA(1)

				if !(_la == KuneiformParserPLUS || _la == KuneiformParserMINUS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(172)
			p.Match(KuneiformParserDIGITS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(173)
			p.Match(KuneiformParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(174)
			p.Match(KuneiformParserDIGITS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewBoolean_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(175)
			_la = p.GetTokenStream().LA(1)

			if !(_la == KuneiformParserTRUE || _la == KuneiformParserFALSE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 5:
		localctx = NewNull_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(176)
			p.Match(KuneiformParserNULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		localctx = NewBinary_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(177)
			p.Match(KuneiformParserBINARY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDOUBLE_QUOTE() []antlr.TerminalNode
	DOUBLE_QUOTE(i int) antlr.TerminalNode
	Allowed_identifier() IAllowed_identifierContext

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) AllDOUBLE_QUOTE() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserDOUBLE_QUOTE)
}

func (s *IdentifierContext) DOUBLE_QUOTE(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserDOUBLE_QUOTE, i)
}

func (s *IdentifierContext) Allowed_identifier() IAllowed_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAllowed_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAllowed_identifierContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, KuneiformParserRULE_identifier)
	p.SetState(185)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserDOUBLE_QUOTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(180)
			p.Match(KuneiformParserDOUBLE_QUOTE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(181)
			p.Allowed_identifier()
		}
		{
			p.SetState(182)
			p.Match(KuneiformParserDOUBLE_QUOTE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserUSE, KuneiformParserUNUSE, KuneiformParserACTION, KuneiformParserCREATE, KuneiformParserALTER, KuneiformParserADD, KuneiformParserDROP, KuneiformParserRENAME, KuneiformParserCHECK, KuneiformParserFOREIGN, KuneiformParserPRIMARY, KuneiformParserKEY, KuneiformParserUNIQUE, KuneiformParserRESTRICT, KuneiformParserDEFAULT, KuneiformParserINDEX, KuneiformParserRETURNS, KuneiformParserFOR, KuneiformParserIF, KuneiformParserELSEIF, KuneiformParserELSE, KuneiformParserBREAK, KuneiformParserCONTINUE, KuneiformParserRETURN, KuneiformParserGRANT, KuneiformParserGRANTED, KuneiformParserREVOKE, KuneiformParserROLE, KuneiformParserREPLACE, KuneiformParserNAMESPACE, KuneiformParserTRANSFER, KuneiformParserOWNERSHIP, KuneiformParserROLES, KuneiformParserCALL, KuneiformParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(184)
			p.Allowed_identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAllowed_identifierContext is an interface to support dynamic dispatch.
type IAllowed_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	CREATE() antlr.TerminalNode
	ALTER() antlr.TerminalNode
	ADD() antlr.TerminalNode
	DROP() antlr.TerminalNode
	RENAME() antlr.TerminalNode
	CHECK() antlr.TerminalNode
	FOREIGN() antlr.TerminalNode
	PRIMARY() antlr.TerminalNode
	KEY() antlr.TerminalNode
	UNIQUE() antlr.TerminalNode
	RESTRICT() antlr.TerminalNode
	INDEX() antlr.TerminalNode
	RETURNS() antlr.TerminalNode
	FOR() antlr.TerminalNode
	IF() antlr.TerminalNode
	ELSEIF() antlr.TerminalNode
	ELSE() antlr.TerminalNode
	BREAK() antlr.TerminalNode
	CONTINUE() antlr.TerminalNode
	RETURN() antlr.TerminalNode
	GRANT() antlr.TerminalNode
	GRANTED() antlr.TerminalNode
	REVOKE() antlr.TerminalNode
	ROLE() antlr.TerminalNode
	REPLACE() antlr.TerminalNode
	NAMESPACE() antlr.TerminalNode
	ROLES() antlr.TerminalNode
	CALL() antlr.TerminalNode
	USE() antlr.TerminalNode
	UNUSE() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	ACTION() antlr.TerminalNode
	TRANSFER() antlr.TerminalNode
	OWNERSHIP() antlr.TerminalNode

	// IsAllowed_identifierContext differentiates from other interfaces.
	IsAllowed_identifierContext()
}

type Allowed_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAllowed_identifierContext() *Allowed_identifierContext {
	var p = new(Allowed_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_allowed_identifier
	return p
}

func InitEmptyAllowed_identifierContext(p *Allowed_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_allowed_identifier
}

func (*Allowed_identifierContext) IsAllowed_identifierContext() {}

func NewAllowed_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Allowed_identifierContext {
	var p = new(Allowed_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_allowed_identifier

	return p
}

func (s *Allowed_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Allowed_identifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Allowed_identifierContext) CREATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCREATE, 0)
}

func (s *Allowed_identifierContext) ALTER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserALTER, 0)
}

func (s *Allowed_identifierContext) ADD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserADD, 0)
}

func (s *Allowed_identifierContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *Allowed_identifierContext) RENAME() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRENAME, 0)
}

func (s *Allowed_identifierContext) CHECK() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCHECK, 0)
}

func (s *Allowed_identifierContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFOREIGN, 0)
}

func (s *Allowed_identifierContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPRIMARY, 0)
}

func (s *Allowed_identifierContext) KEY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserKEY, 0)
}

func (s *Allowed_identifierContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNIQUE, 0)
}

func (s *Allowed_identifierContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRESTRICT, 0)
}

func (s *Allowed_identifierContext) INDEX() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINDEX, 0)
}

func (s *Allowed_identifierContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRETURNS, 0)
}

func (s *Allowed_identifierContext) FOR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFOR, 0)
}

func (s *Allowed_identifierContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Allowed_identifierContext) ELSEIF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserELSEIF, 0)
}

func (s *Allowed_identifierContext) ELSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserELSE, 0)
}

func (s *Allowed_identifierContext) BREAK() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBREAK, 0)
}

func (s *Allowed_identifierContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONTINUE, 0)
}

func (s *Allowed_identifierContext) RETURN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRETURN, 0)
}

func (s *Allowed_identifierContext) GRANT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGRANT, 0)
}

func (s *Allowed_identifierContext) GRANTED() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGRANTED, 0)
}

func (s *Allowed_identifierContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserREVOKE, 0)
}

func (s *Allowed_identifierContext) ROLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserROLE, 0)
}

func (s *Allowed_identifierContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserREPLACE, 0)
}

func (s *Allowed_identifierContext) NAMESPACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNAMESPACE, 0)
}

func (s *Allowed_identifierContext) ROLES() antlr.TerminalNode {
	return s.GetToken(KuneiformParserROLES, 0)
}

func (s *Allowed_identifierContext) CALL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCALL, 0)
}

func (s *Allowed_identifierContext) USE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUSE, 0)
}

func (s *Allowed_identifierContext) UNUSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNUSE, 0)
}

func (s *Allowed_identifierContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDEFAULT, 0)
}

func (s *Allowed_identifierContext) ACTION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserACTION, 0)
}

func (s *Allowed_identifierContext) TRANSFER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTRANSFER, 0)
}

func (s *Allowed_identifierContext) OWNERSHIP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOWNERSHIP, 0)
}

func (s *Allowed_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Allowed_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Allowed_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAllowed_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Allowed_identifier() (localctx IAllowed_identifierContext) {
	localctx = NewAllowed_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, KuneiformParserRULE_allowed_identifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(187)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9127724506742259712) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&1153475387850752001) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifier_listContext is an interface to support dynamic dispatch.
type IIdentifier_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsIdentifier_listContext differentiates from other interfaces.
	IsIdentifier_listContext()
}

type Identifier_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_listContext() *Identifier_listContext {
	var p = new(Identifier_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_identifier_list
	return p
}

func InitEmptyIdentifier_listContext(p *Identifier_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_identifier_list
}

func (*Identifier_listContext) IsIdentifier_listContext() {}

func NewIdentifier_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_listContext {
	var p = new(Identifier_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_identifier_list

	return p
}

func (s *Identifier_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_listContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Identifier_listContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Identifier_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Identifier_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIdentifier_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Identifier_list() (localctx IIdentifier_listContext) {
	localctx = NewIdentifier_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, KuneiformParserRULE_identifier_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(189)
		p.Identifier()
	}
	p.SetState(194)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(190)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(191)
			p.Identifier()
		}

		p.SetState(196)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeContext is an interface to support dynamic dispatch.
type ITypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPrecision returns the precision token.
	GetPrecision() antlr.Token

	// GetScale returns the scale token.
	GetScale() antlr.Token

	// SetPrecision sets the precision token.
	SetPrecision(antlr.Token)

	// SetScale sets the scale token.
	SetScale(antlr.Token)

	// Getter signatures
	Identifier() IIdentifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	LBRACKET() antlr.TerminalNode
	RBRACKET() antlr.TerminalNode
	AllDIGITS_() []antlr.TerminalNode
	DIGITS_(i int) antlr.TerminalNode
	COMMA() antlr.TerminalNode

	// IsTypeContext differentiates from other interfaces.
	IsTypeContext()
}

type TypeContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	precision antlr.Token
	scale     antlr.Token
}

func NewEmptyTypeContext() *TypeContext {
	var p = new(TypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type
	return p
}

func InitEmptyTypeContext(p *TypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type
}

func (*TypeContext) IsTypeContext() {}

func NewTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeContext {
	var p = new(TypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_type

	return p
}

func (s *TypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeContext) GetPrecision() antlr.Token { return s.precision }

func (s *TypeContext) GetScale() antlr.Token { return s.scale }

func (s *TypeContext) SetPrecision(v antlr.Token) { s.precision = v }

func (s *TypeContext) SetScale(v antlr.Token) { s.scale = v }

func (s *TypeContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *TypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *TypeContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *TypeContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *TypeContext) AllDIGITS_() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserDIGITS_)
}

func (s *TypeContext) DIGITS_(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIGITS_, i)
}

func (s *TypeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, 0)
}

func (s *TypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Type_() (localctx ITypeContext) {
	localctx = NewTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, KuneiformParserRULE_type)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(197)
		p.Identifier()
	}
	p.SetState(205)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(198)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(199)

			var _m = p.Match(KuneiformParserDIGITS_)

			localctx.(*TypeContext).precision = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(202)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserCOMMA {
			{
				p.SetState(200)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(201)

				var _m = p.Match(KuneiformParserDIGITS_)

				localctx.(*TypeContext).scale = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(204)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(209)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(207)
			p.Match(KuneiformParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(208)
			p.Match(KuneiformParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_castContext is an interface to support dynamic dispatch.
type IType_castContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TYPE_CAST() antlr.TerminalNode
	Type_() ITypeContext

	// IsType_castContext differentiates from other interfaces.
	IsType_castContext()
}

type Type_castContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_castContext() *Type_castContext {
	var p = new(Type_castContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type_cast
	return p
}

func InitEmptyType_castContext(p *Type_castContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type_cast
}

func (*Type_castContext) IsType_castContext() {}

func NewType_castContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_castContext {
	var p = new(Type_castContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_type_cast

	return p
}

func (s *Type_castContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_castContext) TYPE_CAST() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTYPE_CAST, 0)
}

func (s *Type_castContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Type_castContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_castContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_castContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitType_cast(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Type_cast() (localctx IType_castContext) {
	localctx = NewType_castContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, KuneiformParserRULE_type_cast)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(211)
		p.Match(KuneiformParserTYPE_CAST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(212)
		p.Type_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VARIABLE() antlr.TerminalNode
	CONTEXTUAL_VARIABLE() antlr.TerminalNode

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable
	return p
}

func InitEmptyVariableContext(p *VariableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVARIABLE, 0)
}

func (s *VariableContext) CONTEXTUAL_VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONTEXTUAL_VARIABLE, 0)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Variable() (localctx IVariableContext) {
	localctx = NewVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, KuneiformParserRULE_variable)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(214)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KuneiformParserVARIABLE || _la == KuneiformParserCONTEXTUAL_VARIABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_column_defContext is an interface to support dynamic dispatch.
type ITable_column_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// Getter signatures
	Type_() ITypeContext
	Identifier() IIdentifierContext
	AllInline_constraint() []IInline_constraintContext
	Inline_constraint(i int) IInline_constraintContext

	// IsTable_column_defContext differentiates from other interfaces.
	IsTable_column_defContext()
}

type Table_column_defContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyTable_column_defContext() *Table_column_defContext {
	var p = new(Table_column_defContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_table_column_def
	return p
}

func InitEmptyTable_column_defContext(p *Table_column_defContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_table_column_def
}

func (*Table_column_defContext) IsTable_column_defContext() {}

func NewTable_column_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_defContext {
	var p = new(Table_column_defContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_table_column_def

	return p
}

func (s *Table_column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_defContext) GetName() IIdentifierContext { return s.name }

func (s *Table_column_defContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Table_column_defContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Table_column_defContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_column_defContext) AllInline_constraint() []IInline_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInline_constraintContext); ok {
			len++
		}
	}

	tst := make([]IInline_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInline_constraintContext); ok {
			tst[i] = t.(IInline_constraintContext)
			i++
		}
	}

	return tst
}

func (s *Table_column_defContext) Inline_constraint(i int) IInline_constraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInline_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInline_constraintContext)
}

func (s *Table_column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_column_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitTable_column_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Table_column_def() (localctx ITable_column_defContext) {
	localctx = NewTable_column_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, KuneiformParserRULE_table_column_def)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(216)

		var _x = p.Identifier()

		localctx.(*Table_column_defContext).name = _x
	}
	{
		p.SetState(217)
		p.Type_()
	}
	p.SetState(221)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&5841520560420421632) != 0 {
		{
			p.SetState(218)
			p.Inline_constraint()
		}

		p.SetState(223)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_listContext is an interface to support dynamic dispatch.
type IType_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsType_listContext differentiates from other interfaces.
	IsType_listContext()
}

type Type_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_listContext() *Type_listContext {
	var p = new(Type_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type_list
	return p
}

func InitEmptyType_listContext(p *Type_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type_list
}

func (*Type_listContext) IsType_listContext() {}

func NewType_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_listContext {
	var p = new(Type_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_type_list

	return p
}

func (s *Type_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_listContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Type_listContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Type_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Type_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Type_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitType_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Type_list() (localctx IType_listContext) {
	localctx = NewType_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, KuneiformParserRULE_type_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(224)
		p.Type_()
	}
	p.SetState(229)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(225)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(226)
			p.Type_()
		}

		p.SetState(231)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamed_type_listContext is an interface to support dynamic dispatch.
type INamed_type_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsNamed_type_listContext differentiates from other interfaces.
	IsNamed_type_listContext()
}

type Named_type_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_type_listContext() *Named_type_listContext {
	var p = new(Named_type_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_named_type_list
	return p
}

func InitEmptyNamed_type_listContext(p *Named_type_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_named_type_list
}

func (*Named_type_listContext) IsNamed_type_listContext() {}

func NewNamed_type_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_type_listContext {
	var p = new(Named_type_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_named_type_list

	return p
}

func (s *Named_type_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_type_listContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Named_type_listContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Named_type_listContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Named_type_listContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Named_type_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Named_type_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Named_type_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_type_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_type_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitNamed_type_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Named_type_list() (localctx INamed_type_listContext) {
	localctx = NewNamed_type_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, KuneiformParserRULE_named_type_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(232)
		p.Identifier()
	}
	{
		p.SetState(233)
		p.Type_()
	}
	p.SetState(240)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(234)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(235)
			p.Identifier()
		}
		{
			p.SetState(236)
			p.Type_()
		}

		p.SetState(242)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInline_constraintContext is an interface to support dynamic dispatch.
type IInline_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY() antlr.TerminalNode
	KEY() antlr.TerminalNode
	UNIQUE() antlr.TerminalNode
	NOT() antlr.TerminalNode
	NULL() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	Action_expr() IAction_exprContext
	Fk_constraint() IFk_constraintContext
	CHECK() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	RPAREN() antlr.TerminalNode

	// IsInline_constraintContext differentiates from other interfaces.
	IsInline_constraintContext()
}

type Inline_constraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInline_constraintContext() *Inline_constraintContext {
	var p = new(Inline_constraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_inline_constraint
	return p
}

func InitEmptyInline_constraintContext(p *Inline_constraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_inline_constraint
}

func (*Inline_constraintContext) IsInline_constraintContext() {}

func NewInline_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inline_constraintContext {
	var p = new(Inline_constraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_inline_constraint

	return p
}

func (s *Inline_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Inline_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPRIMARY, 0)
}

func (s *Inline_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserKEY, 0)
}

func (s *Inline_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNIQUE, 0)
}

func (s *Inline_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Inline_constraintContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Inline_constraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDEFAULT, 0)
}

func (s *Inline_constraintContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Inline_constraintContext) Fk_constraint() IFk_constraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFk_constraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFk_constraintContext)
}

func (s *Inline_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCHECK, 0)
}

func (s *Inline_constraintContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Inline_constraintContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Inline_constraintContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Inline_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inline_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Inline_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitInline_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Inline_constraint() (localctx IInline_constraintContext) {
	localctx = NewInline_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, KuneiformParserRULE_inline_constraint)
	p.SetState(256)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserPRIMARY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(243)
			p.Match(KuneiformParserPRIMARY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(244)
			p.Match(KuneiformParserKEY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserUNIQUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(245)
			p.Match(KuneiformParserUNIQUE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserNOT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(246)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(247)
			p.Match(KuneiformParserNULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserDEFAULT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(248)
			p.Match(KuneiformParserDEFAULT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(249)
			p.action_expr(0)
		}

	case KuneiformParserREFERENCES:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(250)
			p.Fk_constraint()
		}

	case KuneiformParserCHECK:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(251)
			p.Match(KuneiformParserCHECK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(252)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(253)
			p.sql_expr(0)
		}
		{
			p.SetState(254)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFk_actionContext is an interface to support dynamic dispatch.
type IFk_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON() antlr.TerminalNode
	UPDATE() antlr.TerminalNode
	DELETE() antlr.TerminalNode
	SET() antlr.TerminalNode
	NULL() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	RESTRICT() antlr.TerminalNode
	NO() antlr.TerminalNode
	ACTION() antlr.TerminalNode
	CASCADE() antlr.TerminalNode

	// IsFk_actionContext differentiates from other interfaces.
	IsFk_actionContext()
}

type Fk_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFk_actionContext() *Fk_actionContext {
	var p = new(Fk_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_fk_action
	return p
}

func InitEmptyFk_actionContext(p *Fk_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_fk_action
}

func (*Fk_actionContext) IsFk_actionContext() {}

func NewFk_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fk_actionContext {
	var p = new(Fk_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_fk_action

	return p
}

func (s *Fk_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Fk_actionContext) ON() antlr.TerminalNode {
	return s.GetToken(KuneiformParserON, 0)
}

func (s *Fk_actionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUPDATE, 0)
}

func (s *Fk_actionContext) DELETE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDELETE, 0)
}

func (s *Fk_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSET, 0)
}

func (s *Fk_actionContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Fk_actionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDEFAULT, 0)
}

func (s *Fk_actionContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRESTRICT, 0)
}

func (s *Fk_actionContext) NO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNO, 0)
}

func (s *Fk_actionContext) ACTION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserACTION, 0)
}

func (s *Fk_actionContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCASCADE, 0)
}

func (s *Fk_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fk_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fk_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitFk_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Fk_action() (localctx IFk_actionContext) {
	localctx = NewFk_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, KuneiformParserRULE_fk_action)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(258)
		p.Match(KuneiformParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(259)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KuneiformParserDELETE || _la == KuneiformParserUPDATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(268)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(260)
			p.Match(KuneiformParserSET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(261)
			p.Match(KuneiformParserNULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(262)
			p.Match(KuneiformParserSET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(263)
			p.Match(KuneiformParserDEFAULT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(264)
			p.Match(KuneiformParserRESTRICT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(265)
			p.Match(KuneiformParserNO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(266)
			p.Match(KuneiformParserACTION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		{
			p.SetState(267)
			p.Match(KuneiformParserCASCADE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFk_constraintContext is an interface to support dynamic dispatch.
type IFk_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNamespace returns the namespace rule contexts.
	GetNamespace() IIdentifierContext

	// GetTable returns the table rule contexts.
	GetTable() IIdentifierContext

	// SetNamespace sets the namespace rule contexts.
	SetNamespace(IIdentifierContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdentifierContext)

	// Getter signatures
	REFERENCES() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext
	RPAREN() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	PERIOD() antlr.TerminalNode
	AllFk_action() []IFk_actionContext
	Fk_action(i int) IFk_actionContext

	// IsFk_constraintContext differentiates from other interfaces.
	IsFk_constraintContext()
}

type Fk_constraintContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	namespace IIdentifierContext
	table     IIdentifierContext
}

func NewEmptyFk_constraintContext() *Fk_constraintContext {
	var p = new(Fk_constraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_fk_constraint
	return p
}

func InitEmptyFk_constraintContext(p *Fk_constraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_fk_constraint
}

func (*Fk_constraintContext) IsFk_constraintContext() {}

func NewFk_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fk_constraintContext {
	var p = new(Fk_constraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_fk_constraint

	return p
}

func (s *Fk_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Fk_constraintContext) GetNamespace() IIdentifierContext { return s.namespace }

func (s *Fk_constraintContext) GetTable() IIdentifierContext { return s.table }

func (s *Fk_constraintContext) SetNamespace(v IIdentifierContext) { s.namespace = v }

func (s *Fk_constraintContext) SetTable(v IIdentifierContext) { s.table = v }

func (s *Fk_constraintContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(KuneiformParserREFERENCES, 0)
}

func (s *Fk_constraintContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Fk_constraintContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Fk_constraintContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Fk_constraintContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Fk_constraintContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Fk_constraintContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Fk_constraintContext) AllFk_action() []IFk_actionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFk_actionContext); ok {
			len++
		}
	}

	tst := make([]IFk_actionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFk_actionContext); ok {
			tst[i] = t.(IFk_actionContext)
			i++
		}
	}

	return tst
}

func (s *Fk_constraintContext) Fk_action(i int) IFk_actionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFk_actionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFk_actionContext)
}

func (s *Fk_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fk_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fk_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitFk_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Fk_constraint() (localctx IFk_constraintContext) {
	localctx = NewFk_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, KuneiformParserRULE_fk_constraint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(270)
		p.Match(KuneiformParserREFERENCES)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(274)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(271)

			var _x = p.Identifier()

			localctx.(*Fk_constraintContext).namespace = _x
		}
		{
			p.SetState(272)
			p.Match(KuneiformParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(276)

		var _x = p.Identifier()

		localctx.(*Fk_constraintContext).table = _x
	}
	{
		p.SetState(277)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(278)
		p.Identifier_list()
	}
	{
		p.SetState(279)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(284)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserON {
		{
			p.SetState(280)
			p.Fk_action()
		}
		p.SetState(282)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserON {
			{
				p.SetState(281)
				p.Fk_action()
			}

		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_returnContext is an interface to support dynamic dispatch.
type IAction_returnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturn_columns returns the return_columns rule contexts.
	GetReturn_columns() INamed_type_listContext

	// GetUnnamed_return_types returns the unnamed_return_types rule contexts.
	GetUnnamed_return_types() IType_listContext

	// SetReturn_columns sets the return_columns rule contexts.
	SetReturn_columns(INamed_type_listContext)

	// SetUnnamed_return_types sets the unnamed_return_types rule contexts.
	SetUnnamed_return_types(IType_listContext)

	// Getter signatures
	RETURNS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Named_type_list() INamed_type_listContext
	Type_list() IType_listContext
	TABLE() antlr.TerminalNode

	// IsAction_returnContext differentiates from other interfaces.
	IsAction_returnContext()
}

type Action_returnContext struct {
	antlr.BaseParserRuleContext
	parser               antlr.Parser
	return_columns       INamed_type_listContext
	unnamed_return_types IType_listContext
}

func NewEmptyAction_returnContext() *Action_returnContext {
	var p = new(Action_returnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_return
	return p
}

func InitEmptyAction_returnContext(p *Action_returnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_return
}

func (*Action_returnContext) IsAction_returnContext() {}

func NewAction_returnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_returnContext {
	var p = new(Action_returnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_action_return

	return p
}

func (s *Action_returnContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_returnContext) GetReturn_columns() INamed_type_listContext { return s.return_columns }

func (s *Action_returnContext) GetUnnamed_return_types() IType_listContext {
	return s.unnamed_return_types
}

func (s *Action_returnContext) SetReturn_columns(v INamed_type_listContext) { s.return_columns = v }

func (s *Action_returnContext) SetUnnamed_return_types(v IType_listContext) {
	s.unnamed_return_types = v
}

func (s *Action_returnContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRETURNS, 0)
}

func (s *Action_returnContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Action_returnContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Action_returnContext) Named_type_list() INamed_type_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_type_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_type_listContext)
}

func (s *Action_returnContext) Type_list() IType_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_listContext)
}

func (s *Action_returnContext) TABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTABLE, 0)
}

func (s *Action_returnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_returnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Action_returnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAction_return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Action_return() (localctx IAction_returnContext) {
	localctx = NewAction_returnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, KuneiformParserRULE_action_return)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(286)
		p.Match(KuneiformParserRETURNS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(298)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.SetState(288)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserTABLE {
			{
				p.SetState(287)
				p.Match(KuneiformParserTABLE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(290)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(291)

			var _x = p.Named_type_list()

			localctx.(*Action_returnContext).return_columns = _x
		}
		{
			p.SetState(292)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(294)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(295)

			var _x = p.Type_list()

			localctx.(*Action_returnContext).unnamed_return_types = _x
		}
		{
			p.SetState(296)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_statementContext is an interface to support dynamic dispatch.
type ISql_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_statement() ISelect_statementContext
	Update_statement() IUpdate_statementContext
	Insert_statement() IInsert_statementContext
	Delete_statement() IDelete_statementContext
	WITH() antlr.TerminalNode
	AllCommon_table_expression() []ICommon_table_expressionContext
	Common_table_expression(i int) ICommon_table_expressionContext
	RECURSIVE() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSql_statementContext differentiates from other interfaces.
	IsSql_statementContext()
}

type Sql_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_statementContext() *Sql_statementContext {
	var p = new(Sql_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_statement
	return p
}

func InitEmptySql_statementContext(p *Sql_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_statement
}

func (*Sql_statementContext) IsSql_statementContext() {}

func NewSql_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_statementContext {
	var p = new(Sql_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql_statement

	return p
}

func (s *Sql_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_statementContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Sql_statementContext) Update_statement() IUpdate_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_statementContext)
}

func (s *Sql_statementContext) Insert_statement() IInsert_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_statementContext)
}

func (s *Sql_statementContext) Delete_statement() IDelete_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_statementContext)
}

func (s *Sql_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWITH, 0)
}

func (s *Sql_statementContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			len++
		}
	}

	tst := make([]ICommon_table_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommon_table_expressionContext); ok {
			tst[i] = t.(ICommon_table_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Sql_statementContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Sql_statementContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRECURSIVE, 0)
}

func (s *Sql_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Sql_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Sql_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSql_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql_statement() (localctx ISql_statementContext) {
	localctx = NewSql_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, KuneiformParserRULE_sql_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(312)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserWITH {
		{
			p.SetState(300)
			p.Match(KuneiformParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(302)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserRECURSIVE {
			{
				p.SetState(301)
				p.Match(KuneiformParserRECURSIVE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(304)
			p.Common_table_expression()
		}
		p.SetState(309)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(305)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(306)
				p.Common_table_expression()
			}

			p.SetState(311)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(318)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserSELECT:
		{
			p.SetState(314)
			p.Select_statement()
		}

	case KuneiformParserUPDATE:
		{
			p.SetState(315)
			p.Update_statement()
		}

	case KuneiformParserINSERT:
		{
			p.SetState(316)
			p.Insert_statement()
		}

	case KuneiformParserDELETE:
		{
			p.SetState(317)
			p.Delete_statement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AS() antlr.TerminalNode
	AllLPAREN() []antlr.TerminalNode
	LPAREN(i int) antlr.TerminalNode
	Select_statement() ISelect_statementContext
	AllRPAREN() []antlr.TerminalNode
	RPAREN(i int) antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_common_table_expression
	return p
}

func InitEmptyCommon_table_expressionContext(p *Common_table_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_common_table_expression
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Common_table_expressionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Common_table_expressionContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Common_table_expressionContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserLPAREN)
}

func (s *Common_table_expressionContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, i)
}

func (s *Common_table_expressionContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Common_table_expressionContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserRPAREN)
}

func (s *Common_table_expressionContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, i)
}

func (s *Common_table_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Common_table_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCommon_table_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, KuneiformParserRULE_common_table_expression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(320)
		p.Identifier()
	}
	p.SetState(333)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLPAREN {
		{
			p.SetState(321)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(330)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9127724498152325120) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&1153475387850752001) != 0) {
			{
				p.SetState(322)
				p.Identifier()
			}
			p.SetState(327)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == KuneiformParserCOMMA {
				{
					p.SetState(323)
					p.Match(KuneiformParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(324)
					p.Identifier()
				}

				p.SetState(329)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(332)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(335)
		p.Match(KuneiformParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(336)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(337)
		p.Select_statement()
	}
	{
		p.SetState(338)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_table_statementContext is an interface to support dynamic dispatch.
type ICreate_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// Getter signatures
	CREATE() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Identifier() IIdentifierContext
	AllTable_column_def() []ITable_column_defContext
	Table_column_def(i int) ITable_column_defContext
	AllTable_constraint_def() []ITable_constraint_defContext
	Table_constraint_def(i int) ITable_constraint_defContext
	IF() antlr.TerminalNode
	NOT() antlr.TerminalNode
	EXISTS() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCreate_table_statementContext differentiates from other interfaces.
	IsCreate_table_statementContext()
}

type Create_table_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyCreate_table_statementContext() *Create_table_statementContext {
	var p = new(Create_table_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_table_statement
	return p
}

func InitEmptyCreate_table_statementContext(p *Create_table_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_table_statement
}

func (*Create_table_statementContext) IsCreate_table_statementContext() {}

func NewCreate_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_statementContext {
	var p = new(Create_table_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_create_table_statement

	return p
}

func (s *Create_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_statementContext) GetName() IIdentifierContext { return s.name }

func (s *Create_table_statementContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_table_statementContext) CREATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCREATE, 0)
}

func (s *Create_table_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTABLE, 0)
}

func (s *Create_table_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Create_table_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Create_table_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_table_statementContext) AllTable_column_def() []ITable_column_defContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_column_defContext); ok {
			len++
		}
	}

	tst := make([]ITable_column_defContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_column_defContext); ok {
			tst[i] = t.(ITable_column_defContext)
			i++
		}
	}

	return tst
}

func (s *Create_table_statementContext) Table_column_def(i int) ITable_column_defContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_column_defContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_column_defContext)
}

func (s *Create_table_statementContext) AllTable_constraint_def() []ITable_constraint_defContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_constraint_defContext); ok {
			len++
		}
	}

	tst := make([]ITable_constraint_defContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_constraint_defContext); ok {
			tst[i] = t.(ITable_constraint_defContext)
			i++
		}
	}

	return tst
}

func (s *Create_table_statementContext) Table_constraint_def(i int) ITable_constraint_defContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_defContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_defContext)
}

func (s *Create_table_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Create_table_statementContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Create_table_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Create_table_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Create_table_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Create_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_table_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCreate_table_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Create_table_statement() (localctx ICreate_table_statementContext) {
	localctx = NewCreate_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, KuneiformParserRULE_create_table_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(340)
		p.Match(KuneiformParserCREATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(341)
		p.Match(KuneiformParserTABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(345)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(342)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(343)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(344)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(347)

		var _x = p.Identifier()

		localctx.(*Create_table_statementContext).name = _x
	}
	{
		p.SetState(348)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(351)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(349)
			p.Table_column_def()
		}

	case 2:
		{
			p.SetState(350)
			p.Table_constraint_def()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(360)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(353)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(356)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(354)
				p.Table_column_def()
			}

		case 2:
			{
				p.SetState(355)
				p.Table_constraint_def()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

		p.SetState(362)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(363)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_constraint_defContext is an interface to support dynamic dispatch.
type ITable_constraint_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// Getter signatures
	UNIQUE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext
	RPAREN() antlr.TerminalNode
	CHECK() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	FOREIGN() antlr.TerminalNode
	KEY() antlr.TerminalNode
	Fk_constraint() IFk_constraintContext
	PRIMARY() antlr.TerminalNode
	CONSTRAINT() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsTable_constraint_defContext differentiates from other interfaces.
	IsTable_constraint_defContext()
}

type Table_constraint_defContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyTable_constraint_defContext() *Table_constraint_defContext {
	var p = new(Table_constraint_defContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_table_constraint_def
	return p
}

func InitEmptyTable_constraint_defContext(p *Table_constraint_defContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_table_constraint_def
}

func (*Table_constraint_defContext) IsTable_constraint_defContext() {}

func NewTable_constraint_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraint_defContext {
	var p = new(Table_constraint_defContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_table_constraint_def

	return p
}

func (s *Table_constraint_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraint_defContext) GetName() IIdentifierContext { return s.name }

func (s *Table_constraint_defContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Table_constraint_defContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNIQUE, 0)
}

func (s *Table_constraint_defContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Table_constraint_defContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Table_constraint_defContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Table_constraint_defContext) CHECK() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCHECK, 0)
}

func (s *Table_constraint_defContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Table_constraint_defContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFOREIGN, 0)
}

func (s *Table_constraint_defContext) KEY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserKEY, 0)
}

func (s *Table_constraint_defContext) Fk_constraint() IFk_constraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFk_constraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFk_constraintContext)
}

func (s *Table_constraint_defContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPRIMARY, 0)
}

func (s *Table_constraint_defContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONSTRAINT, 0)
}

func (s *Table_constraint_defContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_constraint_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraint_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraint_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitTable_constraint_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Table_constraint_def() (localctx ITable_constraint_defContext) {
	localctx = NewTable_constraint_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, KuneiformParserRULE_table_constraint_def)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(367)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserCONSTRAINT {
		{
			p.SetState(365)
			p.Match(KuneiformParserCONSTRAINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(366)

			var _x = p.Identifier()

			localctx.(*Table_constraint_defContext).name = _x
		}

	}
	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserUNIQUE:
		{
			p.SetState(369)
			p.Match(KuneiformParserUNIQUE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(370)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(371)
			p.Identifier_list()
		}
		{
			p.SetState(372)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserCHECK:
		{
			p.SetState(374)
			p.Match(KuneiformParserCHECK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(375)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(376)
			p.sql_expr(0)
		}
		{
			p.SetState(377)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserFOREIGN:
		{
			p.SetState(379)
			p.Match(KuneiformParserFOREIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(380)
			p.Match(KuneiformParserKEY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(381)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(382)
			p.Identifier_list()
		}
		{
			p.SetState(383)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(384)
			p.Fk_constraint()
		}

	case KuneiformParserPRIMARY:
		{
			p.SetState(386)
			p.Match(KuneiformParserPRIMARY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(387)
			p.Match(KuneiformParserKEY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(388)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(389)
			p.Identifier_list()
		}
		{
			p.SetState(390)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_drop_behaviorContext is an interface to support dynamic dispatch.
type IOpt_drop_behaviorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASCADE() antlr.TerminalNode
	RESTRICT() antlr.TerminalNode

	// IsOpt_drop_behaviorContext differentiates from other interfaces.
	IsOpt_drop_behaviorContext()
}

type Opt_drop_behaviorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_drop_behaviorContext() *Opt_drop_behaviorContext {
	var p = new(Opt_drop_behaviorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_opt_drop_behavior
	return p
}

func InitEmptyOpt_drop_behaviorContext(p *Opt_drop_behaviorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_opt_drop_behavior
}

func (*Opt_drop_behaviorContext) IsOpt_drop_behaviorContext() {}

func NewOpt_drop_behaviorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_drop_behaviorContext {
	var p = new(Opt_drop_behaviorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_opt_drop_behavior

	return p
}

func (s *Opt_drop_behaviorContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_drop_behaviorContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCASCADE, 0)
}

func (s *Opt_drop_behaviorContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRESTRICT, 0)
}

func (s *Opt_drop_behaviorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_drop_behaviorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_drop_behaviorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitOpt_drop_behavior(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Opt_drop_behavior() (localctx IOpt_drop_behaviorContext) {
	localctx = NewOpt_drop_behaviorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, KuneiformParserRULE_opt_drop_behavior)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(394)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KuneiformParserCASCADE || _la == KuneiformParserRESTRICT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_table_statementContext is an interface to support dynamic dispatch.
type IDrop_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTables returns the tables rule contexts.
	GetTables() IIdentifier_listContext

	// SetTables sets the tables rule contexts.
	SetTables(IIdentifier_listContext)

	// Getter signatures
	DROP() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext
	IF() antlr.TerminalNode
	EXISTS() antlr.TerminalNode
	Opt_drop_behavior() IOpt_drop_behaviorContext

	// IsDrop_table_statementContext differentiates from other interfaces.
	IsDrop_table_statementContext()
}

type Drop_table_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	tables IIdentifier_listContext
}

func NewEmptyDrop_table_statementContext() *Drop_table_statementContext {
	var p = new(Drop_table_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_table_statement
	return p
}

func InitEmptyDrop_table_statementContext(p *Drop_table_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_table_statement
}

func (*Drop_table_statementContext) IsDrop_table_statementContext() {}

func NewDrop_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_table_statementContext {
	var p = new(Drop_table_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_drop_table_statement

	return p
}

func (s *Drop_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_table_statementContext) GetTables() IIdentifier_listContext { return s.tables }

func (s *Drop_table_statementContext) SetTables(v IIdentifier_listContext) { s.tables = v }

func (s *Drop_table_statementContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *Drop_table_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTABLE, 0)
}

func (s *Drop_table_statementContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_table_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Drop_table_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Drop_table_statementContext) Opt_drop_behavior() IOpt_drop_behaviorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_drop_behaviorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_drop_behaviorContext)
}

func (s *Drop_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_table_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDrop_table_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Drop_table_statement() (localctx IDrop_table_statementContext) {
	localctx = NewDrop_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, KuneiformParserRULE_drop_table_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(396)
		p.Match(KuneiformParserDROP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(397)
		p.Match(KuneiformParserTABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(400)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(398)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(399)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(402)

		var _x = p.Identifier_list()

		localctx.(*Drop_table_statementContext).tables = _x
	}
	p.SetState(404)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserCASCADE || _la == KuneiformParserRESTRICT {
		{
			p.SetState(403)
			p.Opt_drop_behavior()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_table_statementContext is an interface to support dynamic dispatch.
type IAlter_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable returns the table rule contexts.
	GetTable() IIdentifierContext

	// SetTable sets the table rule contexts.
	SetTable(IIdentifierContext)

	// Getter signatures
	ALTER() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	Alter_table_action() IAlter_table_actionContext
	Identifier() IIdentifierContext

	// IsAlter_table_statementContext differentiates from other interfaces.
	IsAlter_table_statementContext()
}

type Alter_table_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	table  IIdentifierContext
}

func NewEmptyAlter_table_statementContext() *Alter_table_statementContext {
	var p = new(Alter_table_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_alter_table_statement
	return p
}

func InitEmptyAlter_table_statementContext(p *Alter_table_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_alter_table_statement
}

func (*Alter_table_statementContext) IsAlter_table_statementContext() {}

func NewAlter_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_statementContext {
	var p = new(Alter_table_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_alter_table_statement

	return p
}

func (s *Alter_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_statementContext) GetTable() IIdentifierContext { return s.table }

func (s *Alter_table_statementContext) SetTable(v IIdentifierContext) { s.table = v }

func (s *Alter_table_statementContext) ALTER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserALTER, 0)
}

func (s *Alter_table_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTABLE, 0)
}

func (s *Alter_table_statementContext) Alter_table_action() IAlter_table_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_table_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_table_actionContext)
}

func (s *Alter_table_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_table_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAlter_table_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Alter_table_statement() (localctx IAlter_table_statementContext) {
	localctx = NewAlter_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, KuneiformParserRULE_alter_table_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(406)
		p.Match(KuneiformParserALTER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(407)
		p.Match(KuneiformParserTABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(408)

		var _x = p.Identifier()

		localctx.(*Alter_table_statementContext).table = _x
	}
	{
		p.SetState(409)
		p.Alter_table_action()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_table_actionContext is an interface to support dynamic dispatch.
type IAlter_table_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAlter_table_actionContext differentiates from other interfaces.
	IsAlter_table_actionContext()
}

type Alter_table_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_table_actionContext() *Alter_table_actionContext {
	var p = new(Alter_table_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_alter_table_action
	return p
}

func InitEmptyAlter_table_actionContext(p *Alter_table_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_alter_table_action
}

func (*Alter_table_actionContext) IsAlter_table_actionContext() {}

func NewAlter_table_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_actionContext {
	var p = new(Alter_table_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_alter_table_action

	return p
}

func (s *Alter_table_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_actionContext) CopyAll(ctx *Alter_table_actionContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Alter_table_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Drop_column_constraintContext struct {
	Alter_table_actionContext
	column IIdentifierContext
}

func NewDrop_column_constraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Drop_column_constraintContext {
	var p = new(Drop_column_constraintContext)

	InitEmptyAlter_table_actionContext(&p.Alter_table_actionContext)
	p.parser = parser
	p.CopyAll(ctx.(*Alter_table_actionContext))

	return p
}

func (s *Drop_column_constraintContext) GetColumn() IIdentifierContext { return s.column }

func (s *Drop_column_constraintContext) SetColumn(v IIdentifierContext) { s.column = v }

func (s *Drop_column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_column_constraintContext) ALTER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserALTER, 0)
}

func (s *Drop_column_constraintContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOLUMN, 0)
}

func (s *Drop_column_constraintContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *Drop_column_constraintContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_column_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Drop_column_constraintContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Drop_column_constraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDEFAULT, 0)
}

func (s *Drop_column_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDrop_column_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type Add_columnContext struct {
	Alter_table_actionContext
	column IIdentifierContext
}

func NewAdd_columnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Add_columnContext {
	var p = new(Add_columnContext)

	InitEmptyAlter_table_actionContext(&p.Alter_table_actionContext)
	p.parser = parser
	p.CopyAll(ctx.(*Alter_table_actionContext))

	return p
}

func (s *Add_columnContext) GetColumn() IIdentifierContext { return s.column }

func (s *Add_columnContext) SetColumn(v IIdentifierContext) { s.column = v }

func (s *Add_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Add_columnContext) ADD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserADD, 0)
}

func (s *Add_columnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOLUMN, 0)
}

func (s *Add_columnContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Add_columnContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Add_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAdd_column(s)

	default:
		return t.VisitChildren(s)
	}
}

type Rename_columnContext struct {
	Alter_table_actionContext
	old_column IIdentifierContext
	new_column IIdentifierContext
}

func NewRename_columnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Rename_columnContext {
	var p = new(Rename_columnContext)

	InitEmptyAlter_table_actionContext(&p.Alter_table_actionContext)
	p.parser = parser
	p.CopyAll(ctx.(*Alter_table_actionContext))

	return p
}

func (s *Rename_columnContext) GetOld_column() IIdentifierContext { return s.old_column }

func (s *Rename_columnContext) GetNew_column() IIdentifierContext { return s.new_column }

func (s *Rename_columnContext) SetOld_column(v IIdentifierContext) { s.old_column = v }

func (s *Rename_columnContext) SetNew_column(v IIdentifierContext) { s.new_column = v }

func (s *Rename_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rename_columnContext) RENAME() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRENAME, 0)
}

func (s *Rename_columnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOLUMN, 0)
}

func (s *Rename_columnContext) TO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTO, 0)
}

func (s *Rename_columnContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Rename_columnContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Rename_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitRename_column(s)

	default:
		return t.VisitChildren(s)
	}
}

type Add_table_constraintContext struct {
	Alter_table_actionContext
}

func NewAdd_table_constraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Add_table_constraintContext {
	var p = new(Add_table_constraintContext)

	InitEmptyAlter_table_actionContext(&p.Alter_table_actionContext)
	p.parser = parser
	p.CopyAll(ctx.(*Alter_table_actionContext))

	return p
}

func (s *Add_table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Add_table_constraintContext) ADD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserADD, 0)
}

func (s *Add_table_constraintContext) Table_constraint_def() ITable_constraint_defContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_defContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_defContext)
}

func (s *Add_table_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAdd_table_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type Add_column_constraintContext struct {
	Alter_table_actionContext
	column IIdentifierContext
}

func NewAdd_column_constraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Add_column_constraintContext {
	var p = new(Add_column_constraintContext)

	InitEmptyAlter_table_actionContext(&p.Alter_table_actionContext)
	p.parser = parser
	p.CopyAll(ctx.(*Alter_table_actionContext))

	return p
}

func (s *Add_column_constraintContext) GetColumn() IIdentifierContext { return s.column }

func (s *Add_column_constraintContext) SetColumn(v IIdentifierContext) { s.column = v }

func (s *Add_column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Add_column_constraintContext) ALTER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserALTER, 0)
}

func (s *Add_column_constraintContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOLUMN, 0)
}

func (s *Add_column_constraintContext) SET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSET, 0)
}

func (s *Add_column_constraintContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Add_column_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Add_column_constraintContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Add_column_constraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDEFAULT, 0)
}

func (s *Add_column_constraintContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Add_column_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAdd_column_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type Rename_tableContext struct {
	Alter_table_actionContext
	new_table IIdentifierContext
}

func NewRename_tableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Rename_tableContext {
	var p = new(Rename_tableContext)

	InitEmptyAlter_table_actionContext(&p.Alter_table_actionContext)
	p.parser = parser
	p.CopyAll(ctx.(*Alter_table_actionContext))

	return p
}

func (s *Rename_tableContext) GetNew_table() IIdentifierContext { return s.new_table }

func (s *Rename_tableContext) SetNew_table(v IIdentifierContext) { s.new_table = v }

func (s *Rename_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rename_tableContext) RENAME() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRENAME, 0)
}

func (s *Rename_tableContext) TO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTO, 0)
}

func (s *Rename_tableContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Rename_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitRename_table(s)

	default:
		return t.VisitChildren(s)
	}
}

type Drop_table_constraintContext struct {
	Alter_table_actionContext
}

func NewDrop_table_constraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Drop_table_constraintContext {
	var p = new(Drop_table_constraintContext)

	InitEmptyAlter_table_actionContext(&p.Alter_table_actionContext)
	p.parser = parser
	p.CopyAll(ctx.(*Alter_table_actionContext))

	return p
}

func (s *Drop_table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_table_constraintContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *Drop_table_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONSTRAINT, 0)
}

func (s *Drop_table_constraintContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_table_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDrop_table_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type Drop_columnContext struct {
	Alter_table_actionContext
	column IIdentifierContext
}

func NewDrop_columnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Drop_columnContext {
	var p = new(Drop_columnContext)

	InitEmptyAlter_table_actionContext(&p.Alter_table_actionContext)
	p.parser = parser
	p.CopyAll(ctx.(*Alter_table_actionContext))

	return p
}

func (s *Drop_columnContext) GetColumn() IIdentifierContext { return s.column }

func (s *Drop_columnContext) SetColumn(v IIdentifierContext) { s.column = v }

func (s *Drop_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_columnContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *Drop_columnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOLUMN, 0)
}

func (s *Drop_columnContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDrop_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Alter_table_action() (localctx IAlter_table_actionContext) {
	localctx = NewAlter_table_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, KuneiformParserRULE_alter_table_action)
	p.SetState(452)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAdd_column_constraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(411)
			p.Match(KuneiformParserALTER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(412)
			p.Match(KuneiformParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(413)

			var _x = p.Identifier()

			localctx.(*Add_column_constraintContext).column = _x
		}
		{
			p.SetState(414)
			p.Match(KuneiformParserSET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(419)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case KuneiformParserNOT:
			{
				p.SetState(415)
				p.Match(KuneiformParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(416)
				p.Match(KuneiformParserNULL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case KuneiformParserDEFAULT:
			{
				p.SetState(417)
				p.Match(KuneiformParserDEFAULT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(418)
				p.action_expr(0)
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 2:
		localctx = NewDrop_column_constraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(421)
			p.Match(KuneiformParserALTER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(422)
			p.Match(KuneiformParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(423)

			var _x = p.Identifier()

			localctx.(*Drop_column_constraintContext).column = _x
		}
		{
			p.SetState(424)
			p.Match(KuneiformParserDROP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(428)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case KuneiformParserNOT:
			{
				p.SetState(425)
				p.Match(KuneiformParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(426)
				p.Match(KuneiformParserNULL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case KuneiformParserDEFAULT:
			{
				p.SetState(427)
				p.Match(KuneiformParserDEFAULT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 3:
		localctx = NewAdd_columnContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(430)
			p.Match(KuneiformParserADD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(431)
			p.Match(KuneiformParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(432)

			var _x = p.Identifier()

			localctx.(*Add_columnContext).column = _x
		}
		{
			p.SetState(433)
			p.Type_()
		}

	case 4:
		localctx = NewDrop_columnContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(435)
			p.Match(KuneiformParserDROP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(436)
			p.Match(KuneiformParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(437)

			var _x = p.Identifier()

			localctx.(*Drop_columnContext).column = _x
		}

	case 5:
		localctx = NewRename_columnContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(438)
			p.Match(KuneiformParserRENAME)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(439)
			p.Match(KuneiformParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(440)

			var _x = p.Identifier()

			localctx.(*Rename_columnContext).old_column = _x
		}
		{
			p.SetState(441)
			p.Match(KuneiformParserTO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(442)

			var _x = p.Identifier()

			localctx.(*Rename_columnContext).new_column = _x
		}

	case 6:
		localctx = NewRename_tableContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(444)
			p.Match(KuneiformParserRENAME)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(445)
			p.Match(KuneiformParserTO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(446)

			var _x = p.Identifier()

			localctx.(*Rename_tableContext).new_table = _x
		}

	case 7:
		localctx = NewAdd_table_constraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(447)
			p.Match(KuneiformParserADD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(448)
			p.Table_constraint_def()
		}

	case 8:
		localctx = NewDrop_table_constraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(449)
			p.Match(KuneiformParserDROP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(450)
			p.Match(KuneiformParserCONSTRAINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(451)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_index_statementContext is an interface to support dynamic dispatch.
type ICreate_index_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable returns the table rule contexts.
	GetTable() IIdentifierContext

	// GetColumns returns the columns rule contexts.
	GetColumns() IIdentifier_listContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdentifierContext)

	// SetColumns sets the columns rule contexts.
	SetColumns(IIdentifier_listContext)

	// Getter signatures
	CREATE() antlr.TerminalNode
	INDEX() antlr.TerminalNode
	ON() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	Identifier_list() IIdentifier_listContext
	UNIQUE() antlr.TerminalNode
	IF() antlr.TerminalNode
	NOT() antlr.TerminalNode
	EXISTS() antlr.TerminalNode

	// IsCreate_index_statementContext differentiates from other interfaces.
	IsCreate_index_statementContext()
}

type Create_index_statementContext struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	name    IIdentifierContext
	table   IIdentifierContext
	columns IIdentifier_listContext
}

func NewEmptyCreate_index_statementContext() *Create_index_statementContext {
	var p = new(Create_index_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_index_statement
	return p
}

func InitEmptyCreate_index_statementContext(p *Create_index_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_index_statement
}

func (*Create_index_statementContext) IsCreate_index_statementContext() {}

func NewCreate_index_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_index_statementContext {
	var p = new(Create_index_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_create_index_statement

	return p
}

func (s *Create_index_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_index_statementContext) GetName() IIdentifierContext { return s.name }

func (s *Create_index_statementContext) GetTable() IIdentifierContext { return s.table }

func (s *Create_index_statementContext) GetColumns() IIdentifier_listContext { return s.columns }

func (s *Create_index_statementContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_index_statementContext) SetTable(v IIdentifierContext) { s.table = v }

func (s *Create_index_statementContext) SetColumns(v IIdentifier_listContext) { s.columns = v }

func (s *Create_index_statementContext) CREATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCREATE, 0)
}

func (s *Create_index_statementContext) INDEX() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINDEX, 0)
}

func (s *Create_index_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(KuneiformParserON, 0)
}

func (s *Create_index_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Create_index_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Create_index_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Create_index_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_index_statementContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Create_index_statementContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNIQUE, 0)
}

func (s *Create_index_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Create_index_statementContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Create_index_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Create_index_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_index_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_index_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCreate_index_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Create_index_statement() (localctx ICreate_index_statementContext) {
	localctx = NewCreate_index_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, KuneiformParserRULE_create_index_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(454)
		p.Match(KuneiformParserCREATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(456)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserUNIQUE {
		{
			p.SetState(455)
			p.Match(KuneiformParserUNIQUE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(458)
		p.Match(KuneiformParserINDEX)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(462)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 41, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(459)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(460)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(461)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(465)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9127724498152325120) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&1153475387850752001) != 0) {
		{
			p.SetState(464)

			var _x = p.Identifier()

			localctx.(*Create_index_statementContext).name = _x
		}

	}
	{
		p.SetState(467)
		p.Match(KuneiformParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(468)

		var _x = p.Identifier()

		localctx.(*Create_index_statementContext).table = _x
	}
	{
		p.SetState(469)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(470)

		var _x = p.Identifier_list()

		localctx.(*Create_index_statementContext).columns = _x
	}
	{
		p.SetState(471)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_index_statementContext is an interface to support dynamic dispatch.
type IDrop_index_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// Getter signatures
	DROP() antlr.TerminalNode
	INDEX() antlr.TerminalNode
	Identifier() IIdentifierContext
	IF() antlr.TerminalNode
	EXISTS() antlr.TerminalNode

	// IsDrop_index_statementContext differentiates from other interfaces.
	IsDrop_index_statementContext()
}

type Drop_index_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_index_statementContext() *Drop_index_statementContext {
	var p = new(Drop_index_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_index_statement
	return p
}

func InitEmptyDrop_index_statementContext(p *Drop_index_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_index_statement
}

func (*Drop_index_statementContext) IsDrop_index_statementContext() {}

func NewDrop_index_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_index_statementContext {
	var p = new(Drop_index_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_drop_index_statement

	return p
}

func (s *Drop_index_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_index_statementContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_index_statementContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_index_statementContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *Drop_index_statementContext) INDEX() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINDEX, 0)
}

func (s *Drop_index_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_index_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Drop_index_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Drop_index_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_index_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_index_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDrop_index_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Drop_index_statement() (localctx IDrop_index_statementContext) {
	localctx = NewDrop_index_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, KuneiformParserRULE_drop_index_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(473)
		p.Match(KuneiformParserDROP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(474)
		p.Match(KuneiformParserINDEX)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(477)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(475)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(476)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(479)

		var _x = p.Identifier()

		localctx.(*Drop_index_statementContext).name = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_role_statementContext is an interface to support dynamic dispatch.
type ICreate_role_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE() antlr.TerminalNode
	ROLE() antlr.TerminalNode
	Identifier() IIdentifierContext
	IF() antlr.TerminalNode
	NOT() antlr.TerminalNode
	EXISTS() antlr.TerminalNode

	// IsCreate_role_statementContext differentiates from other interfaces.
	IsCreate_role_statementContext()
}

type Create_role_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_role_statementContext() *Create_role_statementContext {
	var p = new(Create_role_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_role_statement
	return p
}

func InitEmptyCreate_role_statementContext(p *Create_role_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_role_statement
}

func (*Create_role_statementContext) IsCreate_role_statementContext() {}

func NewCreate_role_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_role_statementContext {
	var p = new(Create_role_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_create_role_statement

	return p
}

func (s *Create_role_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_role_statementContext) CREATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCREATE, 0)
}

func (s *Create_role_statementContext) ROLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserROLE, 0)
}

func (s *Create_role_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_role_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Create_role_statementContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Create_role_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Create_role_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_role_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_role_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCreate_role_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Create_role_statement() (localctx ICreate_role_statementContext) {
	localctx = NewCreate_role_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, KuneiformParserRULE_create_role_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(481)
		p.Match(KuneiformParserCREATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(482)
		p.Match(KuneiformParserROLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(486)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(483)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(484)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(485)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(488)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_role_statementContext is an interface to support dynamic dispatch.
type IDrop_role_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DROP() antlr.TerminalNode
	ROLE() antlr.TerminalNode
	Identifier() IIdentifierContext
	IF() antlr.TerminalNode
	EXISTS() antlr.TerminalNode

	// IsDrop_role_statementContext differentiates from other interfaces.
	IsDrop_role_statementContext()
}

type Drop_role_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_role_statementContext() *Drop_role_statementContext {
	var p = new(Drop_role_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_role_statement
	return p
}

func InitEmptyDrop_role_statementContext(p *Drop_role_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_role_statement
}

func (*Drop_role_statementContext) IsDrop_role_statementContext() {}

func NewDrop_role_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_role_statementContext {
	var p = new(Drop_role_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_drop_role_statement

	return p
}

func (s *Drop_role_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_role_statementContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *Drop_role_statementContext) ROLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserROLE, 0)
}

func (s *Drop_role_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_role_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Drop_role_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Drop_role_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_role_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_role_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDrop_role_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Drop_role_statement() (localctx IDrop_role_statementContext) {
	localctx = NewDrop_role_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, KuneiformParserRULE_drop_role_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(490)
		p.Match(KuneiformParserDROP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(491)
		p.Match(KuneiformParserROLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(494)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 45, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(492)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(493)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(496)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrant_statementContext is an interface to support dynamic dispatch.
type IGrant_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUser returns the user token.
	GetUser() antlr.Token

	// SetUser sets the user token.
	SetUser(antlr.Token)

	// GetGrant_role returns the grant_role rule contexts.
	GetGrant_role() IIdentifierContext

	// GetNamespace returns the namespace rule contexts.
	GetNamespace() IIdentifierContext

	// GetRole returns the role rule contexts.
	GetRole() IIdentifierContext

	// GetUser_var returns the user_var rule contexts.
	GetUser_var() IAction_exprContext

	// SetGrant_role sets the grant_role rule contexts.
	SetGrant_role(IIdentifierContext)

	// SetNamespace sets the namespace rule contexts.
	SetNamespace(IIdentifierContext)

	// SetRole sets the role rule contexts.
	SetRole(IIdentifierContext)

	// SetUser_var sets the user_var rule contexts.
	SetUser_var(IAction_exprContext)

	// Getter signatures
	GRANT() antlr.TerminalNode
	TO() antlr.TerminalNode
	Privilege_list() IPrivilege_listContext
	IF() antlr.TerminalNode
	NOT() antlr.TerminalNode
	GRANTED() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	ON() antlr.TerminalNode
	STRING_() antlr.TerminalNode
	Action_expr() IAction_exprContext

	// IsGrant_statementContext differentiates from other interfaces.
	IsGrant_statementContext()
}

type Grant_statementContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	grant_role IIdentifierContext
	namespace  IIdentifierContext
	role       IIdentifierContext
	user       antlr.Token
	user_var   IAction_exprContext
}

func NewEmptyGrant_statementContext() *Grant_statementContext {
	var p = new(Grant_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_grant_statement
	return p
}

func InitEmptyGrant_statementContext(p *Grant_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_grant_statement
}

func (*Grant_statementContext) IsGrant_statementContext() {}

func NewGrant_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_statementContext {
	var p = new(Grant_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_grant_statement

	return p
}

func (s *Grant_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_statementContext) GetUser() antlr.Token { return s.user }

func (s *Grant_statementContext) SetUser(v antlr.Token) { s.user = v }

func (s *Grant_statementContext) GetGrant_role() IIdentifierContext { return s.grant_role }

func (s *Grant_statementContext) GetNamespace() IIdentifierContext { return s.namespace }

func (s *Grant_statementContext) GetRole() IIdentifierContext { return s.role }

func (s *Grant_statementContext) GetUser_var() IAction_exprContext { return s.user_var }

func (s *Grant_statementContext) SetGrant_role(v IIdentifierContext) { s.grant_role = v }

func (s *Grant_statementContext) SetNamespace(v IIdentifierContext) { s.namespace = v }

func (s *Grant_statementContext) SetRole(v IIdentifierContext) { s.role = v }

func (s *Grant_statementContext) SetUser_var(v IAction_exprContext) { s.user_var = v }

func (s *Grant_statementContext) GRANT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGRANT, 0)
}

func (s *Grant_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTO, 0)
}

func (s *Grant_statementContext) Privilege_list() IPrivilege_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilege_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilege_listContext)
}

func (s *Grant_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Grant_statementContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Grant_statementContext) GRANTED() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGRANTED, 0)
}

func (s *Grant_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Grant_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Grant_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(KuneiformParserON, 0)
}

func (s *Grant_statementContext) STRING_() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTRING_, 0)
}

func (s *Grant_statementContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Grant_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grant_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitGrant_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Grant_statement() (localctx IGrant_statementContext) {
	localctx = NewGrant_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, KuneiformParserRULE_grant_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(498)
		p.Match(KuneiformParserGRANT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(502)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 46, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(499)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(500)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(501)
			p.Match(KuneiformParserGRANTED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(506)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(504)
			p.Privilege_list()
		}

	case 2:
		{
			p.SetState(505)

			var _x = p.Identifier()

			localctx.(*Grant_statementContext).grant_role = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(510)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserON {
		{
			p.SetState(508)
			p.Match(KuneiformParserON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(509)

			var _x = p.Identifier()

			localctx.(*Grant_statementContext).namespace = _x
		}

	}
	{
		p.SetState(512)
		p.Match(KuneiformParserTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(516)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(513)

			var _x = p.Identifier()

			localctx.(*Grant_statementContext).role = _x
		}

	case 2:
		{
			p.SetState(514)

			var _m = p.Match(KuneiformParserSTRING_)

			localctx.(*Grant_statementContext).user = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(515)

			var _x = p.action_expr(0)

			localctx.(*Grant_statementContext).user_var = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRevoke_statementContext is an interface to support dynamic dispatch.
type IRevoke_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUser returns the user token.
	GetUser() antlr.Token

	// SetUser sets the user token.
	SetUser(antlr.Token)

	// GetGrant_role returns the grant_role rule contexts.
	GetGrant_role() IIdentifierContext

	// GetNamespace returns the namespace rule contexts.
	GetNamespace() IIdentifierContext

	// GetRole returns the role rule contexts.
	GetRole() IIdentifierContext

	// GetUser_var returns the user_var rule contexts.
	GetUser_var() IAction_exprContext

	// SetGrant_role sets the grant_role rule contexts.
	SetGrant_role(IIdentifierContext)

	// SetNamespace sets the namespace rule contexts.
	SetNamespace(IIdentifierContext)

	// SetRole sets the role rule contexts.
	SetRole(IIdentifierContext)

	// SetUser_var sets the user_var rule contexts.
	SetUser_var(IAction_exprContext)

	// Getter signatures
	REVOKE() antlr.TerminalNode
	FROM() antlr.TerminalNode
	Privilege_list() IPrivilege_listContext
	IF() antlr.TerminalNode
	GRANTED() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	ON() antlr.TerminalNode
	STRING_() antlr.TerminalNode
	Action_expr() IAction_exprContext

	// IsRevoke_statementContext differentiates from other interfaces.
	IsRevoke_statementContext()
}

type Revoke_statementContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	grant_role IIdentifierContext
	namespace  IIdentifierContext
	role       IIdentifierContext
	user       antlr.Token
	user_var   IAction_exprContext
}

func NewEmptyRevoke_statementContext() *Revoke_statementContext {
	var p = new(Revoke_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_revoke_statement
	return p
}

func InitEmptyRevoke_statementContext(p *Revoke_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_revoke_statement
}

func (*Revoke_statementContext) IsRevoke_statementContext() {}

func NewRevoke_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Revoke_statementContext {
	var p = new(Revoke_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_revoke_statement

	return p
}

func (s *Revoke_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Revoke_statementContext) GetUser() antlr.Token { return s.user }

func (s *Revoke_statementContext) SetUser(v antlr.Token) { s.user = v }

func (s *Revoke_statementContext) GetGrant_role() IIdentifierContext { return s.grant_role }

func (s *Revoke_statementContext) GetNamespace() IIdentifierContext { return s.namespace }

func (s *Revoke_statementContext) GetRole() IIdentifierContext { return s.role }

func (s *Revoke_statementContext) GetUser_var() IAction_exprContext { return s.user_var }

func (s *Revoke_statementContext) SetGrant_role(v IIdentifierContext) { s.grant_role = v }

func (s *Revoke_statementContext) SetNamespace(v IIdentifierContext) { s.namespace = v }

func (s *Revoke_statementContext) SetRole(v IIdentifierContext) { s.role = v }

func (s *Revoke_statementContext) SetUser_var(v IAction_exprContext) { s.user_var = v }

func (s *Revoke_statementContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserREVOKE, 0)
}

func (s *Revoke_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Revoke_statementContext) Privilege_list() IPrivilege_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilege_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilege_listContext)
}

func (s *Revoke_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Revoke_statementContext) GRANTED() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGRANTED, 0)
}

func (s *Revoke_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Revoke_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Revoke_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(KuneiformParserON, 0)
}

func (s *Revoke_statementContext) STRING_() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTRING_, 0)
}

func (s *Revoke_statementContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Revoke_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Revoke_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Revoke_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitRevoke_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Revoke_statement() (localctx IRevoke_statementContext) {
	localctx = NewRevoke_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, KuneiformParserRULE_revoke_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(518)
		p.Match(KuneiformParserREVOKE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(521)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(519)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(520)
			p.Match(KuneiformParserGRANTED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(525)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(523)
			p.Privilege_list()
		}

	case 2:
		{
			p.SetState(524)

			var _x = p.Identifier()

			localctx.(*Revoke_statementContext).grant_role = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(529)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserON {
		{
			p.SetState(527)
			p.Match(KuneiformParserON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(528)

			var _x = p.Identifier()

			localctx.(*Revoke_statementContext).namespace = _x
		}

	}
	{
		p.SetState(531)
		p.Match(KuneiformParserFROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(535)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 53, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(532)

			var _x = p.Identifier()

			localctx.(*Revoke_statementContext).role = _x
		}

	case 2:
		{
			p.SetState(533)

			var _m = p.Match(KuneiformParserSTRING_)

			localctx.(*Revoke_statementContext).user = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(534)

			var _x = p.action_expr(0)

			localctx.(*Revoke_statementContext).user_var = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITransfer_ownership_statementContext is an interface to support dynamic dispatch.
type ITransfer_ownership_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUser returns the user token.
	GetUser() antlr.Token

	// SetUser sets the user token.
	SetUser(antlr.Token)

	// GetUser_var returns the user_var rule contexts.
	GetUser_var() IAction_exprContext

	// SetUser_var sets the user_var rule contexts.
	SetUser_var(IAction_exprContext)

	// Getter signatures
	TRANSFER() antlr.TerminalNode
	OWNERSHIP() antlr.TerminalNode
	TO() antlr.TerminalNode
	STRING_() antlr.TerminalNode
	Action_expr() IAction_exprContext

	// IsTransfer_ownership_statementContext differentiates from other interfaces.
	IsTransfer_ownership_statementContext()
}

type Transfer_ownership_statementContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	user     antlr.Token
	user_var IAction_exprContext
}

func NewEmptyTransfer_ownership_statementContext() *Transfer_ownership_statementContext {
	var p = new(Transfer_ownership_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_transfer_ownership_statement
	return p
}

func InitEmptyTransfer_ownership_statementContext(p *Transfer_ownership_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_transfer_ownership_statement
}

func (*Transfer_ownership_statementContext) IsTransfer_ownership_statementContext() {}

func NewTransfer_ownership_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transfer_ownership_statementContext {
	var p = new(Transfer_ownership_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_transfer_ownership_statement

	return p
}

func (s *Transfer_ownership_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Transfer_ownership_statementContext) GetUser() antlr.Token { return s.user }

func (s *Transfer_ownership_statementContext) SetUser(v antlr.Token) { s.user = v }

func (s *Transfer_ownership_statementContext) GetUser_var() IAction_exprContext { return s.user_var }

func (s *Transfer_ownership_statementContext) SetUser_var(v IAction_exprContext) { s.user_var = v }

func (s *Transfer_ownership_statementContext) TRANSFER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTRANSFER, 0)
}

func (s *Transfer_ownership_statementContext) OWNERSHIP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOWNERSHIP, 0)
}

func (s *Transfer_ownership_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTO, 0)
}

func (s *Transfer_ownership_statementContext) STRING_() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTRING_, 0)
}

func (s *Transfer_ownership_statementContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Transfer_ownership_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transfer_ownership_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transfer_ownership_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitTransfer_ownership_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Transfer_ownership_statement() (localctx ITransfer_ownership_statementContext) {
	localctx = NewTransfer_ownership_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, KuneiformParserRULE_transfer_ownership_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(537)
		p.Match(KuneiformParserTRANSFER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(538)
		p.Match(KuneiformParserOWNERSHIP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(539)
		p.Match(KuneiformParserTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(540)

			var _m = p.Match(KuneiformParserSTRING_)

			localctx.(*Transfer_ownership_statementContext).user = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(541)

			var _x = p.action_expr(0)

			localctx.(*Transfer_ownership_statementContext).user_var = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrivilege_listContext is an interface to support dynamic dispatch.
type IPrivilege_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPrivilege() []IPrivilegeContext
	Privilege(i int) IPrivilegeContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsPrivilege_listContext differentiates from other interfaces.
	IsPrivilege_listContext()
}

type Privilege_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilege_listContext() *Privilege_listContext {
	var p = new(Privilege_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_privilege_list
	return p
}

func InitEmptyPrivilege_listContext(p *Privilege_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_privilege_list
}

func (*Privilege_listContext) IsPrivilege_listContext() {}

func NewPrivilege_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Privilege_listContext {
	var p = new(Privilege_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_privilege_list

	return p
}

func (s *Privilege_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Privilege_listContext) AllPrivilege() []IPrivilegeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrivilegeContext); ok {
			len++
		}
	}

	tst := make([]IPrivilegeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrivilegeContext); ok {
			tst[i] = t.(IPrivilegeContext)
			i++
		}
	}

	return tst
}

func (s *Privilege_listContext) Privilege(i int) IPrivilegeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilegeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilegeContext)
}

func (s *Privilege_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Privilege_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Privilege_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Privilege_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Privilege_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitPrivilege_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Privilege_list() (localctx IPrivilege_listContext) {
	localctx = NewPrivilege_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, KuneiformParserRULE_privilege_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(544)
		p.Privilege()
	}
	p.SetState(549)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(545)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(546)
			p.Privilege()
		}

		p.SetState(551)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrivilegeContext is an interface to support dynamic dispatch.
type IPrivilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SELECT() antlr.TerminalNode
	INSERT() antlr.TerminalNode
	UPDATE() antlr.TerminalNode
	DELETE() antlr.TerminalNode
	CREATE() antlr.TerminalNode
	DROP() antlr.TerminalNode
	ALTER() antlr.TerminalNode
	ROLES() antlr.TerminalNode
	CALL() antlr.TerminalNode
	USE() antlr.TerminalNode

	// IsPrivilegeContext differentiates from other interfaces.
	IsPrivilegeContext()
}

type PrivilegeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeContext() *PrivilegeContext {
	var p = new(PrivilegeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_privilege
	return p
}

func InitEmptyPrivilegeContext(p *PrivilegeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_privilege
}

func (*PrivilegeContext) IsPrivilegeContext() {}

func NewPrivilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeContext {
	var p = new(PrivilegeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_privilege

	return p
}

func (s *PrivilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeContext) SELECT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSELECT, 0)
}

func (s *PrivilegeContext) INSERT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINSERT, 0)
}

func (s *PrivilegeContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUPDATE, 0)
}

func (s *PrivilegeContext) DELETE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDELETE, 0)
}

func (s *PrivilegeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCREATE, 0)
}

func (s *PrivilegeContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *PrivilegeContext) ALTER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserALTER, 0)
}

func (s *PrivilegeContext) ROLES() antlr.TerminalNode {
	return s.GetToken(KuneiformParserROLES, 0)
}

func (s *PrivilegeContext) CALL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCALL, 0)
}

func (s *PrivilegeContext) USE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUSE, 0)
}

func (s *PrivilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitPrivilege(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Privilege() (localctx IPrivilegeContext) {
	localctx = NewPrivilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, KuneiformParserRULE_privilege)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(552)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&864696368315236352) != 0) || ((int64((_la-98)) & ^0x3f) == 0 && ((int64(1)<<(_la-98))&206158430211) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_action_statementContext is an interface to support dynamic dispatch.
type ICreate_action_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE() antlr.TerminalNode
	ACTION() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	OR() antlr.TerminalNode
	REPLACE() antlr.TerminalNode
	IF() antlr.TerminalNode
	NOT() antlr.TerminalNode
	EXISTS() antlr.TerminalNode
	AllVARIABLE() []antlr.TerminalNode
	VARIABLE(i int) antlr.TerminalNode
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	Action_return() IAction_returnContext
	AllAction_statement() []IAction_statementContext
	Action_statement(i int) IAction_statementContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCreate_action_statementContext differentiates from other interfaces.
	IsCreate_action_statementContext()
}

type Create_action_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_action_statementContext() *Create_action_statementContext {
	var p = new(Create_action_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_action_statement
	return p
}

func InitEmptyCreate_action_statementContext(p *Create_action_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_action_statement
}

func (*Create_action_statementContext) IsCreate_action_statementContext() {}

func NewCreate_action_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_action_statementContext {
	var p = new(Create_action_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_create_action_statement

	return p
}

func (s *Create_action_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_action_statementContext) CREATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCREATE, 0)
}

func (s *Create_action_statementContext) ACTION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserACTION, 0)
}

func (s *Create_action_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Create_action_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_action_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Create_action_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Create_action_statementContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Create_action_statementContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Create_action_statementContext) OR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOR, 0)
}

func (s *Create_action_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserREPLACE, 0)
}

func (s *Create_action_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Create_action_statementContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Create_action_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Create_action_statementContext) AllVARIABLE() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserVARIABLE)
}

func (s *Create_action_statementContext) VARIABLE(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserVARIABLE, i)
}

func (s *Create_action_statementContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Create_action_statementContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Create_action_statementContext) Action_return() IAction_returnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_returnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_returnContext)
}

func (s *Create_action_statementContext) AllAction_statement() []IAction_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_statementContext); ok {
			len++
		}
	}

	tst := make([]IAction_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_statementContext); ok {
			tst[i] = t.(IAction_statementContext)
			i++
		}
	}

	return tst
}

func (s *Create_action_statementContext) Action_statement(i int) IAction_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_statementContext)
}

func (s *Create_action_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Create_action_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Create_action_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_action_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_action_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCreate_action_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Create_action_statement() (localctx ICreate_action_statementContext) {
	localctx = NewCreate_action_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, KuneiformParserRULE_create_action_statement)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(554)
		p.Match(KuneiformParserCREATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(557)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserOR {
		{
			p.SetState(555)
			p.Match(KuneiformParserOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(556)
			p.Match(KuneiformParserREPLACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(559)
		p.Match(KuneiformParserACTION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(563)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(560)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(561)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(562)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(565)
		p.Identifier()
	}
	{
		p.SetState(566)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(577)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserVARIABLE {
		{
			p.SetState(567)
			p.Match(KuneiformParserVARIABLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(568)
			p.Type_()
		}
		p.SetState(574)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(569)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(570)
				p.Match(KuneiformParserVARIABLE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(571)
				p.Type_()
			}

			p.SetState(576)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(579)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(583)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(580)
				p.Identifier()
			}

		}
		p.SetState(585)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(587)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserRETURNS {
		{
			p.SetState(586)
			p.Action_return()
		}

	}
	{
		p.SetState(589)
		p.Match(KuneiformParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(593)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-3507232162117056376) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&8088464660140922885) != 0) {
		{
			p.SetState(590)
			p.Action_statement()
		}

		p.SetState(595)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(596)
		p.Match(KuneiformParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_action_statementContext is an interface to support dynamic dispatch.
type IDrop_action_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DROP() antlr.TerminalNode
	ACTION() antlr.TerminalNode
	Identifier() IIdentifierContext
	IF() antlr.TerminalNode
	EXISTS() antlr.TerminalNode

	// IsDrop_action_statementContext differentiates from other interfaces.
	IsDrop_action_statementContext()
}

type Drop_action_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_action_statementContext() *Drop_action_statementContext {
	var p = new(Drop_action_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_action_statement
	return p
}

func InitEmptyDrop_action_statementContext(p *Drop_action_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_action_statement
}

func (*Drop_action_statementContext) IsDrop_action_statementContext() {}

func NewDrop_action_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_action_statementContext {
	var p = new(Drop_action_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_drop_action_statement

	return p
}

func (s *Drop_action_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_action_statementContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *Drop_action_statementContext) ACTION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserACTION, 0)
}

func (s *Drop_action_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_action_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Drop_action_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Drop_action_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_action_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_action_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDrop_action_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Drop_action_statement() (localctx IDrop_action_statementContext) {
	localctx = NewDrop_action_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, KuneiformParserRULE_drop_action_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(598)
		p.Match(KuneiformParserDROP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(599)
		p.Match(KuneiformParserACTION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(602)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(600)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(601)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(604)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUse_extension_statementContext is an interface to support dynamic dispatch.
type IUse_extension_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExtension_name returns the extension_name rule contexts.
	GetExtension_name() IIdentifierContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// SetExtension_name sets the extension_name rule contexts.
	SetExtension_name(IIdentifierContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// Getter signatures
	USE() antlr.TerminalNode
	AS() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	IF() antlr.TerminalNode
	NOT() antlr.TerminalNode
	EXISTS() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllCOL() []antlr.TerminalNode
	COL(i int) antlr.TerminalNode
	AllAction_expr() []IAction_exprContext
	Action_expr(i int) IAction_exprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsUse_extension_statementContext differentiates from other interfaces.
	IsUse_extension_statementContext()
}

type Use_extension_statementContext struct {
	antlr.BaseParserRuleContext
	parser         antlr.Parser
	extension_name IIdentifierContext
	alias          IIdentifierContext
}

func NewEmptyUse_extension_statementContext() *Use_extension_statementContext {
	var p = new(Use_extension_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_use_extension_statement
	return p
}

func InitEmptyUse_extension_statementContext(p *Use_extension_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_use_extension_statement
}

func (*Use_extension_statementContext) IsUse_extension_statementContext() {}

func NewUse_extension_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_extension_statementContext {
	var p = new(Use_extension_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_use_extension_statement

	return p
}

func (s *Use_extension_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_extension_statementContext) GetExtension_name() IIdentifierContext {
	return s.extension_name
}

func (s *Use_extension_statementContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Use_extension_statementContext) SetExtension_name(v IIdentifierContext) {
	s.extension_name = v
}

func (s *Use_extension_statementContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Use_extension_statementContext) USE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUSE, 0)
}

func (s *Use_extension_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Use_extension_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Use_extension_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Use_extension_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Use_extension_statementContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Use_extension_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Use_extension_statementContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Use_extension_statementContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Use_extension_statementContext) AllCOL() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOL)
}

func (s *Use_extension_statementContext) COL(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOL, i)
}

func (s *Use_extension_statementContext) AllAction_expr() []IAction_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_exprContext); ok {
			len++
		}
	}

	tst := make([]IAction_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_exprContext); ok {
			tst[i] = t.(IAction_exprContext)
			i++
		}
	}

	return tst
}

func (s *Use_extension_statementContext) Action_expr(i int) IAction_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Use_extension_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Use_extension_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Use_extension_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_extension_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Use_extension_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUse_extension_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Use_extension_statement() (localctx IUse_extension_statementContext) {
	localctx = NewUse_extension_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, KuneiformParserRULE_use_extension_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(606)
		p.Match(KuneiformParserUSE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(610)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(607)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(608)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(609)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(612)

		var _x = p.Identifier()

		localctx.(*Use_extension_statementContext).extension_name = _x
	}
	p.SetState(630)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLBRACE {
		{
			p.SetState(613)
			p.Match(KuneiformParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(627)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9127724498152325120) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&1153475387850752001) != 0) {
			{
				p.SetState(614)
				p.Identifier()
			}
			{
				p.SetState(615)
				p.Match(KuneiformParserCOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(616)
				p.action_expr(0)
			}
			p.SetState(624)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == KuneiformParserCOMMA {
				{
					p.SetState(617)
					p.Match(KuneiformParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(618)
					p.Identifier()
				}
				{
					p.SetState(619)
					p.Match(KuneiformParserCOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(620)
					p.action_expr(0)
				}

				p.SetState(626)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(629)
			p.Match(KuneiformParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(632)
		p.Match(KuneiformParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(633)

		var _x = p.Identifier()

		localctx.(*Use_extension_statementContext).alias = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnuse_extension_statementContext is an interface to support dynamic dispatch.
type IUnuse_extension_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// Getter signatures
	UNUSE() antlr.TerminalNode
	Identifier() IIdentifierContext
	IF() antlr.TerminalNode
	EXISTS() antlr.TerminalNode

	// IsUnuse_extension_statementContext differentiates from other interfaces.
	IsUnuse_extension_statementContext()
}

type Unuse_extension_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	alias  IIdentifierContext
}

func NewEmptyUnuse_extension_statementContext() *Unuse_extension_statementContext {
	var p = new(Unuse_extension_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_unuse_extension_statement
	return p
}

func InitEmptyUnuse_extension_statementContext(p *Unuse_extension_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_unuse_extension_statement
}

func (*Unuse_extension_statementContext) IsUnuse_extension_statementContext() {}

func NewUnuse_extension_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unuse_extension_statementContext {
	var p = new(Unuse_extension_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_unuse_extension_statement

	return p
}

func (s *Unuse_extension_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Unuse_extension_statementContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Unuse_extension_statementContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Unuse_extension_statementContext) UNUSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNUSE, 0)
}

func (s *Unuse_extension_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Unuse_extension_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Unuse_extension_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Unuse_extension_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unuse_extension_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unuse_extension_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUnuse_extension_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Unuse_extension_statement() (localctx IUnuse_extension_statementContext) {
	localctx = NewUnuse_extension_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, KuneiformParserRULE_unuse_extension_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(635)
		p.Match(KuneiformParserUNUSE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(636)

		var _x = p.Identifier()

		localctx.(*Unuse_extension_statementContext).alias = _x
	}
	p.SetState(639)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserIF {
		{
			p.SetState(637)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(638)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_namespace_statementContext is an interface to support dynamic dispatch.
type ICreate_namespace_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE() antlr.TerminalNode
	NAMESPACE() antlr.TerminalNode
	Identifier() IIdentifierContext
	IF() antlr.TerminalNode
	NOT() antlr.TerminalNode
	EXISTS() antlr.TerminalNode

	// IsCreate_namespace_statementContext differentiates from other interfaces.
	IsCreate_namespace_statementContext()
}

type Create_namespace_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_namespace_statementContext() *Create_namespace_statementContext {
	var p = new(Create_namespace_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_namespace_statement
	return p
}

func InitEmptyCreate_namespace_statementContext(p *Create_namespace_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_create_namespace_statement
}

func (*Create_namespace_statementContext) IsCreate_namespace_statementContext() {}

func NewCreate_namespace_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_namespace_statementContext {
	var p = new(Create_namespace_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_create_namespace_statement

	return p
}

func (s *Create_namespace_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_namespace_statementContext) CREATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCREATE, 0)
}

func (s *Create_namespace_statementContext) NAMESPACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNAMESPACE, 0)
}

func (s *Create_namespace_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_namespace_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Create_namespace_statementContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Create_namespace_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Create_namespace_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_namespace_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_namespace_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCreate_namespace_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Create_namespace_statement() (localctx ICreate_namespace_statementContext) {
	localctx = NewCreate_namespace_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, KuneiformParserRULE_create_namespace_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(641)
		p.Match(KuneiformParserCREATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(642)
		p.Match(KuneiformParserNAMESPACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(646)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(643)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(644)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(645)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(648)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_namespace_statementContext is an interface to support dynamic dispatch.
type IDrop_namespace_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DROP() antlr.TerminalNode
	NAMESPACE() antlr.TerminalNode
	Identifier() IIdentifierContext
	IF() antlr.TerminalNode
	EXISTS() antlr.TerminalNode

	// IsDrop_namespace_statementContext differentiates from other interfaces.
	IsDrop_namespace_statementContext()
}

type Drop_namespace_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_namespace_statementContext() *Drop_namespace_statementContext {
	var p = new(Drop_namespace_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_namespace_statement
	return p
}

func InitEmptyDrop_namespace_statementContext(p *Drop_namespace_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_drop_namespace_statement
}

func (*Drop_namespace_statementContext) IsDrop_namespace_statementContext() {}

func NewDrop_namespace_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_namespace_statementContext {
	var p = new(Drop_namespace_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_drop_namespace_statement

	return p
}

func (s *Drop_namespace_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_namespace_statementContext) DROP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDROP, 0)
}

func (s *Drop_namespace_statementContext) NAMESPACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNAMESPACE, 0)
}

func (s *Drop_namespace_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_namespace_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Drop_namespace_statementContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Drop_namespace_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_namespace_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_namespace_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDrop_namespace_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Drop_namespace_statement() (localctx IDrop_namespace_statementContext) {
	localctx = NewDrop_namespace_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, KuneiformParserRULE_drop_namespace_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(650)
		p.Match(KuneiformParserDROP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(651)
		p.Match(KuneiformParserNAMESPACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(654)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(652)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(653)
			p.Match(KuneiformParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(656)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_statementContext is an interface to support dynamic dispatch.
type ISelect_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLimit returns the limit rule contexts.
	GetLimit() ISql_exprContext

	// GetOffset returns the offset rule contexts.
	GetOffset() ISql_exprContext

	// SetLimit sets the limit rule contexts.
	SetLimit(ISql_exprContext)

	// SetOffset sets the offset rule contexts.
	SetOffset(ISql_exprContext)

	// Getter signatures
	AllSelect_core() []ISelect_coreContext
	Select_core(i int) ISelect_coreContext
	AllCompound_operator() []ICompound_operatorContext
	Compound_operator(i int) ICompound_operatorContext
	ORDER() antlr.TerminalNode
	BY() antlr.TerminalNode
	AllOrdering_term() []IOrdering_termContext
	Ordering_term(i int) IOrdering_termContext
	LIMIT() antlr.TerminalNode
	OFFSET() antlr.TerminalNode
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSelect_statementContext differentiates from other interfaces.
	IsSelect_statementContext()
}

type Select_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	limit  ISql_exprContext
	offset ISql_exprContext
}

func NewEmptySelect_statementContext() *Select_statementContext {
	var p = new(Select_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_select_statement
	return p
}

func InitEmptySelect_statementContext(p *Select_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_select_statement
}

func (*Select_statementContext) IsSelect_statementContext() {}

func NewSelect_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_statementContext {
	var p = new(Select_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_select_statement

	return p
}

func (s *Select_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_statementContext) GetLimit() ISql_exprContext { return s.limit }

func (s *Select_statementContext) GetOffset() ISql_exprContext { return s.offset }

func (s *Select_statementContext) SetLimit(v ISql_exprContext) { s.limit = v }

func (s *Select_statementContext) SetOffset(v ISql_exprContext) { s.offset = v }

func (s *Select_statementContext) AllSelect_core() []ISelect_coreContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_coreContext); ok {
			len++
		}
	}

	tst := make([]ISelect_coreContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_coreContext); ok {
			tst[i] = t.(ISelect_coreContext)
			i++
		}
	}

	return tst
}

func (s *Select_statementContext) Select_core(i int) ISelect_coreContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Select_statementContext) AllCompound_operator() []ICompound_operatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			len++
		}
	}

	tst := make([]ICompound_operatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompound_operatorContext); ok {
			tst[i] = t.(ICompound_operatorContext)
			i++
		}
	}

	return tst
}

func (s *Select_statementContext) Compound_operator(i int) ICompound_operatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Select_statementContext) ORDER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserORDER, 0)
}

func (s *Select_statementContext) BY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBY, 0)
}

func (s *Select_statementContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Select_statementContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Select_statementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLIMIT, 0)
}

func (s *Select_statementContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOFFSET, 0)
}

func (s *Select_statementContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Select_statementContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Select_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Select_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Select_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSelect_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Select_statement() (localctx ISelect_statementContext) {
	localctx = NewSelect_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, KuneiformParserRULE_select_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(658)
		p.Select_core()
	}
	p.SetState(664)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-102)) & ^0x3f) == 0 && ((int64(1)<<(_la-102))&7) != 0 {
		{
			p.SetState(659)
			p.Compound_operator()
		}
		{
			p.SetState(660)
			p.Select_core()
		}

		p.SetState(666)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(677)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserORDER {
		{
			p.SetState(667)
			p.Match(KuneiformParserORDER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(668)
			p.Match(KuneiformParserBY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(669)
			p.Ordering_term()
		}
		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(670)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(671)
				p.Ordering_term()
			}

			p.SetState(676)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLIMIT {
		{
			p.SetState(679)
			p.Match(KuneiformParserLIMIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(680)

			var _x = p.sql_expr(0)

			localctx.(*Select_statementContext).limit = _x
		}

	}
	p.SetState(685)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserOFFSET {
		{
			p.SetState(683)
			p.Match(KuneiformParserOFFSET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(684)

			var _x = p.sql_expr(0)

			localctx.(*Select_statementContext).offset = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompound_operatorContext is an interface to support dynamic dispatch.
type ICompound_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNION() antlr.TerminalNode
	ALL() antlr.TerminalNode
	INTERSECT() antlr.TerminalNode
	EXCEPT() antlr.TerminalNode

	// IsCompound_operatorContext differentiates from other interfaces.
	IsCompound_operatorContext()
}

type Compound_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_operatorContext() *Compound_operatorContext {
	var p = new(Compound_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_compound_operator
	return p
}

func InitEmptyCompound_operatorContext(p *Compound_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_compound_operator
}

func (*Compound_operatorContext) IsCompound_operatorContext() {}

func NewCompound_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_operatorContext {
	var p = new(Compound_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_compound_operator

	return p
}

func (s *Compound_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_operatorContext) UNION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNION, 0)
}

func (s *Compound_operatorContext) ALL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserALL, 0)
}

func (s *Compound_operatorContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINTERSECT, 0)
}

func (s *Compound_operatorContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXCEPT, 0)
}

func (s *Compound_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCompound_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Compound_operator() (localctx ICompound_operatorContext) {
	localctx = NewCompound_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, KuneiformParserRULE_compound_operator)
	var _la int

	p.SetState(693)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserUNION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(687)
			p.Match(KuneiformParserUNION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(689)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserALL {
			{
				p.SetState(688)
				p.Match(KuneiformParserALL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case KuneiformParserINTERSECT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(691)
			p.Match(KuneiformParserINTERSECT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserEXCEPT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(692)
			p.Match(KuneiformParserEXCEPT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrdering_termContext is an interface to support dynamic dispatch.
type IOrdering_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sql_expr() ISql_exprContext
	NULLS() antlr.TerminalNode
	ASC() antlr.TerminalNode
	DESC() antlr.TerminalNode
	FIRST() antlr.TerminalNode
	LAST() antlr.TerminalNode

	// IsOrdering_termContext differentiates from other interfaces.
	IsOrdering_termContext()
}

type Ordering_termContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdering_termContext() *Ordering_termContext {
	var p = new(Ordering_termContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_ordering_term
	return p
}

func InitEmptyOrdering_termContext(p *Ordering_termContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_ordering_term
}

func (*Ordering_termContext) IsOrdering_termContext() {}

func NewOrdering_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordering_termContext {
	var p = new(Ordering_termContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_ordering_term

	return p
}

func (s *Ordering_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordering_termContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Ordering_termContext) NULLS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULLS, 0)
}

func (s *Ordering_termContext) ASC() antlr.TerminalNode {
	return s.GetToken(KuneiformParserASC, 0)
}

func (s *Ordering_termContext) DESC() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDESC, 0)
}

func (s *Ordering_termContext) FIRST() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFIRST, 0)
}

func (s *Ordering_termContext) LAST() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLAST, 0)
}

func (s *Ordering_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordering_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordering_termContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitOrdering_term(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Ordering_term() (localctx IOrdering_termContext) {
	localctx = NewOrdering_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, KuneiformParserRULE_ordering_term)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(695)
		p.sql_expr(0)
	}
	p.SetState(697)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserASC || _la == KuneiformParserDESC {
		{
			p.SetState(696)
			_la = p.GetTokenStream().LA(1)

			if !(_la == KuneiformParserASC || _la == KuneiformParserDESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(701)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserNULLS {
		{
			p.SetState(699)
			p.Match(KuneiformParserNULLS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(700)
			_la = p.GetTokenStream().LA(1)

			if !(_la == KuneiformParserFIRST || _la == KuneiformParserLAST) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_coreContext is an interface to support dynamic dispatch.
type ISelect_coreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhere returns the where rule contexts.
	GetWhere() ISql_exprContext

	// GetGroup_by returns the group_by rule contexts.
	GetGroup_by() ISql_expr_listContext

	// GetHaving returns the having rule contexts.
	GetHaving() ISql_exprContext

	// SetWhere sets the where rule contexts.
	SetWhere(ISql_exprContext)

	// SetGroup_by sets the group_by rule contexts.
	SetGroup_by(ISql_expr_listContext)

	// SetHaving sets the having rule contexts.
	SetHaving(ISql_exprContext)

	// Getter signatures
	SELECT() antlr.TerminalNode
	AllResult_column() []IResult_columnContext
	Result_column(i int) IResult_columnContext
	DISTINCT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FROM() antlr.TerminalNode
	Relation() IRelationContext
	WHERE() antlr.TerminalNode
	GROUP() antlr.TerminalNode
	BY() antlr.TerminalNode
	WINDOW() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllAS() []antlr.TerminalNode
	AS(i int) antlr.TerminalNode
	AllWindow() []IWindowContext
	Window(i int) IWindowContext
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext
	Sql_expr_list() ISql_expr_listContext
	AllJoin() []IJoinContext
	Join(i int) IJoinContext
	HAVING() antlr.TerminalNode

	// IsSelect_coreContext differentiates from other interfaces.
	IsSelect_coreContext()
}

type Select_coreContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	where    ISql_exprContext
	group_by ISql_expr_listContext
	having   ISql_exprContext
}

func NewEmptySelect_coreContext() *Select_coreContext {
	var p = new(Select_coreContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_select_core
	return p
}

func InitEmptySelect_coreContext(p *Select_coreContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_select_core
}

func (*Select_coreContext) IsSelect_coreContext() {}

func NewSelect_coreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_coreContext {
	var p = new(Select_coreContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_select_core

	return p
}

func (s *Select_coreContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_coreContext) GetWhere() ISql_exprContext { return s.where }

func (s *Select_coreContext) GetGroup_by() ISql_expr_listContext { return s.group_by }

func (s *Select_coreContext) GetHaving() ISql_exprContext { return s.having }

func (s *Select_coreContext) SetWhere(v ISql_exprContext) { s.where = v }

func (s *Select_coreContext) SetGroup_by(v ISql_expr_listContext) { s.group_by = v }

func (s *Select_coreContext) SetHaving(v ISql_exprContext) { s.having = v }

func (s *Select_coreContext) SELECT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSELECT, 0)
}

func (s *Select_coreContext) AllResult_column() []IResult_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResult_columnContext); ok {
			len++
		}
	}

	tst := make([]IResult_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResult_columnContext); ok {
			tst[i] = t.(IResult_columnContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Result_column(i int) IResult_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResult_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_coreContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDISTINCT, 0)
}

func (s *Select_coreContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Select_coreContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Select_coreContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Select_coreContext) Relation() IRelationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *Select_coreContext) WHERE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHERE, 0)
}

func (s *Select_coreContext) GROUP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGROUP, 0)
}

func (s *Select_coreContext) BY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBY, 0)
}

func (s *Select_coreContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWINDOW, 0)
}

func (s *Select_coreContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Select_coreContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserAS)
}

func (s *Select_coreContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, i)
}

func (s *Select_coreContext) AllWindow() []IWindowContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWindowContext); ok {
			len++
		}
	}

	tst := make([]IWindowContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWindowContext); ok {
			tst[i] = t.(IWindowContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Window(i int) IWindowContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowContext)
}

func (s *Select_coreContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Select_coreContext) Sql_expr_list() ISql_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *Select_coreContext) AllJoin() []IJoinContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoinContext); ok {
			len++
		}
	}

	tst := make([]IJoinContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoinContext); ok {
			tst[i] = t.(IJoinContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Join(i int) IJoinContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinContext)
}

func (s *Select_coreContext) HAVING() antlr.TerminalNode {
	return s.GetToken(KuneiformParserHAVING, 0)
}

func (s *Select_coreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_coreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_coreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSelect_core(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Select_core() (localctx ISelect_coreContext) {
	localctx = NewSelect_coreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, KuneiformParserRULE_select_core)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(703)
		p.Match(KuneiformParserSELECT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(705)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserDISTINCT {
		{
			p.SetState(704)
			p.Match(KuneiformParserDISTINCT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(707)
		p.Result_column()
	}
	p.SetState(712)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(708)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(709)
			p.Result_column()
		}

		p.SetState(714)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(723)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserFROM {
		{
			p.SetState(715)
			p.Match(KuneiformParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(716)
			p.Relation()
		}
		p.SetState(720)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&134217743) != 0 {
			{
				p.SetState(717)
				p.Join()
			}

			p.SetState(722)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(727)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserWHERE {
		{
			p.SetState(725)
			p.Match(KuneiformParserWHERE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(726)

			var _x = p.sql_expr(0)

			localctx.(*Select_coreContext).where = _x
		}

	}
	p.SetState(736)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserGROUP {
		{
			p.SetState(729)
			p.Match(KuneiformParserGROUP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(730)
			p.Match(KuneiformParserBY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(731)

			var _x = p.Sql_expr_list()

			localctx.(*Select_coreContext).group_by = _x
		}
		p.SetState(734)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserHAVING {
			{
				p.SetState(732)
				p.Match(KuneiformParserHAVING)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(733)

				var _x = p.sql_expr(0)

				localctx.(*Select_coreContext).having = _x
			}

		}

	}
	p.SetState(752)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserWINDOW {
		{
			p.SetState(738)
			p.Match(KuneiformParserWINDOW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(739)
			p.Identifier()
		}
		{
			p.SetState(740)
			p.Match(KuneiformParserAS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(741)
			p.Window()
		}
		p.SetState(749)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(742)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(743)
				p.Identifier()
			}
			{
				p.SetState(744)
				p.Match(KuneiformParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(745)
				p.Window()
			}

			p.SetState(751)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRelationContext is an interface to support dynamic dispatch.
type IRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsRelationContext differentiates from other interfaces.
	IsRelationContext()
}

type RelationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationContext() *RelationContext {
	var p = new(RelationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_relation
	return p
}

func InitEmptyRelationContext(p *RelationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_relation
}

func (*RelationContext) IsRelationContext() {}

func NewRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationContext {
	var p = new(RelationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_relation

	return p
}

func (s *RelationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationContext) CopyAll(ctx *RelationContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *RelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Table_relationContext struct {
	RelationContext
	namespace  IIdentifierContext
	table_name IIdentifierContext
	alias      IIdentifierContext
}

func NewTable_relationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Table_relationContext {
	var p = new(Table_relationContext)

	InitEmptyRelationContext(&p.RelationContext)
	p.parser = parser
	p.CopyAll(ctx.(*RelationContext))

	return p
}

func (s *Table_relationContext) GetNamespace() IIdentifierContext { return s.namespace }

func (s *Table_relationContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Table_relationContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Table_relationContext) SetNamespace(v IIdentifierContext) { s.namespace = v }

func (s *Table_relationContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Table_relationContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Table_relationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_relationContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Table_relationContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_relationContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Table_relationContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Table_relationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitTable_relation(s)

	default:
		return t.VisitChildren(s)
	}
}

type Subquery_relationContext struct {
	RelationContext
	alias IIdentifierContext
}

func NewSubquery_relationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Subquery_relationContext {
	var p = new(Subquery_relationContext)

	InitEmptyRelationContext(&p.RelationContext)
	p.parser = parser
	p.CopyAll(ctx.(*RelationContext))

	return p
}

func (s *Subquery_relationContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Subquery_relationContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Subquery_relationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subquery_relationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Subquery_relationContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Subquery_relationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Subquery_relationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Subquery_relationContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Subquery_relationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSubquery_relation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Relation() (localctx IRelationContext) {
	localctx = NewRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, KuneiformParserRULE_relation)
	var _la int

	p.SetState(775)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserDOUBLE_QUOTE, KuneiformParserUSE, KuneiformParserUNUSE, KuneiformParserACTION, KuneiformParserCREATE, KuneiformParserALTER, KuneiformParserADD, KuneiformParserDROP, KuneiformParserRENAME, KuneiformParserCHECK, KuneiformParserFOREIGN, KuneiformParserPRIMARY, KuneiformParserKEY, KuneiformParserUNIQUE, KuneiformParserRESTRICT, KuneiformParserDEFAULT, KuneiformParserINDEX, KuneiformParserRETURNS, KuneiformParserFOR, KuneiformParserIF, KuneiformParserELSEIF, KuneiformParserELSE, KuneiformParserBREAK, KuneiformParserCONTINUE, KuneiformParserRETURN, KuneiformParserGRANT, KuneiformParserGRANTED, KuneiformParserREVOKE, KuneiformParserROLE, KuneiformParserREPLACE, KuneiformParserNAMESPACE, KuneiformParserTRANSFER, KuneiformParserOWNERSHIP, KuneiformParserROLES, KuneiformParserCALL, KuneiformParserIDENTIFIER:
		localctx = NewTable_relationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(757)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(754)

				var _x = p.Identifier()

				localctx.(*Table_relationContext).namespace = _x
			}
			{
				p.SetState(755)
				p.Match(KuneiformParserPERIOD)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(759)

			var _x = p.Identifier()

			localctx.(*Table_relationContext).table_name = _x
		}
		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-33)) & ^0x3f) == 0 && ((int64(1)<<(_la-33))&18049583966447479) != 0) || ((int64((_la-112)) & ^0x3f) == 0 && ((int64(1)<<(_la-112))&34376245375) != 0) {
			p.SetState(761)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == KuneiformParserAS {
				{
					p.SetState(760)
					p.Match(KuneiformParserAS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(763)

				var _x = p.Identifier()

				localctx.(*Table_relationContext).alias = _x
			}

		}

	case KuneiformParserLPAREN:
		localctx = NewSubquery_relationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(766)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(767)
			p.Select_statement()
		}
		{
			p.SetState(768)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(773)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-33)) & ^0x3f) == 0 && ((int64(1)<<(_la-33))&18049583966447479) != 0) || ((int64((_la-112)) & ^0x3f) == 0 && ((int64(1)<<(_la-112))&34376245375) != 0) {
			p.SetState(770)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == KuneiformParserAS {
				{
					p.SetState(769)
					p.Match(KuneiformParserAS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(772)

				var _x = p.Identifier()

				localctx.(*Subquery_relationContext).alias = _x
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinContext is an interface to support dynamic dispatch.
type IJoinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	JOIN() antlr.TerminalNode
	Relation() IRelationContext
	ON() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	INNER() antlr.TerminalNode
	LEFT() antlr.TerminalNode
	RIGHT() antlr.TerminalNode
	FULL() antlr.TerminalNode

	// IsJoinContext differentiates from other interfaces.
	IsJoinContext()
}

type JoinContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinContext() *JoinContext {
	var p = new(JoinContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_join
	return p
}

func InitEmptyJoinContext(p *JoinContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_join
}

func (*JoinContext) IsJoinContext() {}

func NewJoinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinContext {
	var p = new(JoinContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_join

	return p
}

func (s *JoinContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserJOIN, 0)
}

func (s *JoinContext) Relation() IRelationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *JoinContext) ON() antlr.TerminalNode {
	return s.GetToken(KuneiformParserON, 0)
}

func (s *JoinContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *JoinContext) INNER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINNER, 0)
}

func (s *JoinContext) LEFT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLEFT, 0)
}

func (s *JoinContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRIGHT, 0)
}

func (s *JoinContext) FULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFULL, 0)
}

func (s *JoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Join() (localctx IJoinContext) {
	localctx = NewJoinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, KuneiformParserRULE_join)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(778)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&67108871) != 0 {
		{
			p.SetState(777)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&67108871) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(780)
		p.Match(KuneiformParserJOIN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(781)
		p.Relation()
	}
	{
		p.SetState(782)
		p.Match(KuneiformParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(783)
		p.sql_expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResult_columnContext is an interface to support dynamic dispatch.
type IResult_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsResult_columnContext differentiates from other interfaces.
	IsResult_columnContext()
}

type Result_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResult_columnContext() *Result_columnContext {
	var p = new(Result_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_result_column
	return p
}

func InitEmptyResult_columnContext(p *Result_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_result_column
}

func (*Result_columnContext) IsResult_columnContext() {}

func NewResult_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Result_columnContext {
	var p = new(Result_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_result_column

	return p
}

func (s *Result_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Result_columnContext) CopyAll(ctx *Result_columnContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Result_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Expression_result_columnContext struct {
	Result_columnContext
}

func NewExpression_result_columnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expression_result_columnContext {
	var p = new(Expression_result_columnContext)

	InitEmptyResult_columnContext(&p.Result_columnContext)
	p.parser = parser
	p.CopyAll(ctx.(*Result_columnContext))

	return p
}

func (s *Expression_result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_result_columnContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Expression_result_columnContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Expression_result_columnContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Expression_result_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitExpression_result_column(s)

	default:
		return t.VisitChildren(s)
	}
}

type Wildcard_result_columnContext struct {
	Result_columnContext
	table_name IIdentifierContext
}

func NewWildcard_result_columnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Wildcard_result_columnContext {
	var p = new(Wildcard_result_columnContext)

	InitEmptyResult_columnContext(&p.Result_columnContext)
	p.parser = parser
	p.CopyAll(ctx.(*Result_columnContext))

	return p
}

func (s *Wildcard_result_columnContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Wildcard_result_columnContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Wildcard_result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Wildcard_result_columnContext) STAR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTAR, 0)
}

func (s *Wildcard_result_columnContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Wildcard_result_columnContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Wildcard_result_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitWildcard_result_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Result_column() (localctx IResult_columnContext) {
	localctx = NewResult_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, KuneiformParserRULE_result_column)
	var _la int

	p.SetState(798)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExpression_result_columnContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(785)
			p.sql_expr(0)
		}
		p.SetState(790)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-33)) & ^0x3f) == 0 && ((int64(1)<<(_la-33))&18049583966447479) != 0) || ((int64((_la-112)) & ^0x3f) == 0 && ((int64(1)<<(_la-112))&34376245375) != 0) {
			p.SetState(787)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == KuneiformParserAS {
				{
					p.SetState(786)
					p.Match(KuneiformParserAS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(789)
				p.Identifier()
			}

		}

	case 2:
		localctx = NewWildcard_result_columnContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(795)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9127724498152325120) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&1153475387850752001) != 0) {
			{
				p.SetState(792)

				var _x = p.Identifier()

				localctx.(*Wildcard_result_columnContext).table_name = _x
			}
			{
				p.SetState(793)
				p.Match(KuneiformParserPERIOD)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(797)
			p.Match(KuneiformParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_statementContext is an interface to support dynamic dispatch.
type IUpdate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// GetWhere returns the where rule contexts.
	GetWhere() ISql_exprContext

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// SetWhere sets the where rule contexts.
	SetWhere(ISql_exprContext)

	// Getter signatures
	UPDATE() antlr.TerminalNode
	SET() antlr.TerminalNode
	AllUpdate_set_clause() []IUpdate_set_clauseContext
	Update_set_clause(i int) IUpdate_set_clauseContext
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FROM() antlr.TerminalNode
	Relation() IRelationContext
	WHERE() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	AS() antlr.TerminalNode
	AllJoin() []IJoinContext
	Join(i int) IJoinContext

	// IsUpdate_statementContext differentiates from other interfaces.
	IsUpdate_statementContext()
}

type Update_statementContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	table_name IIdentifierContext
	alias      IIdentifierContext
	where      ISql_exprContext
}

func NewEmptyUpdate_statementContext() *Update_statementContext {
	var p = new(Update_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_update_statement
	return p
}

func InitEmptyUpdate_statementContext(p *Update_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_update_statement
}

func (*Update_statementContext) IsUpdate_statementContext() {}

func NewUpdate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_statementContext {
	var p = new(Update_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_update_statement

	return p
}

func (s *Update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_statementContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Update_statementContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Update_statementContext) GetWhere() ISql_exprContext { return s.where }

func (s *Update_statementContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Update_statementContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Update_statementContext) SetWhere(v ISql_exprContext) { s.where = v }

func (s *Update_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUPDATE, 0)
}

func (s *Update_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSET, 0)
}

func (s *Update_statementContext) AllUpdate_set_clause() []IUpdate_set_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdate_set_clauseContext); ok {
			len++
		}
	}

	tst := make([]IUpdate_set_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdate_set_clauseContext); ok {
			tst[i] = t.(IUpdate_set_clauseContext)
			i++
		}
	}

	return tst
}

func (s *Update_statementContext) Update_set_clause(i int) IUpdate_set_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_set_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_set_clauseContext)
}

func (s *Update_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Update_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Update_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Update_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Update_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Update_statementContext) Relation() IRelationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *Update_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHERE, 0)
}

func (s *Update_statementContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Update_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Update_statementContext) AllJoin() []IJoinContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoinContext); ok {
			len++
		}
	}

	tst := make([]IJoinContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoinContext); ok {
			tst[i] = t.(IJoinContext)
			i++
		}
	}

	return tst
}

func (s *Update_statementContext) Join(i int) IJoinContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinContext)
}

func (s *Update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUpdate_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Update_statement() (localctx IUpdate_statementContext) {
	localctx = NewUpdate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, KuneiformParserRULE_update_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(800)
		p.Match(KuneiformParserUPDATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(801)

		var _x = p.Identifier()

		localctx.(*Update_statementContext).table_name = _x
	}
	p.SetState(806)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-33)) & ^0x3f) == 0 && ((int64(1)<<(_la-33))&18049583966447479) != 0) || ((int64((_la-112)) & ^0x3f) == 0 && ((int64(1)<<(_la-112))&34376245375) != 0) {
		p.SetState(803)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserAS {
			{
				p.SetState(802)
				p.Match(KuneiformParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(805)

			var _x = p.Identifier()

			localctx.(*Update_statementContext).alias = _x
		}

	}
	{
		p.SetState(808)
		p.Match(KuneiformParserSET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(809)
		p.Update_set_clause()
	}
	p.SetState(814)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(810)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(811)
			p.Update_set_clause()
		}

		p.SetState(816)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(825)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserFROM {
		{
			p.SetState(817)
			p.Match(KuneiformParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(818)
			p.Relation()
		}
		p.SetState(822)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&134217743) != 0 {
			{
				p.SetState(819)
				p.Join()
			}

			p.SetState(824)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(829)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserWHERE {
		{
			p.SetState(827)
			p.Match(KuneiformParserWHERE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(828)

			var _x = p.sql_expr(0)

			localctx.(*Update_statementContext).where = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_set_clauseContext is an interface to support dynamic dispatch.
type IUpdate_set_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn returns the column rule contexts.
	GetColumn() IIdentifierContext

	// SetColumn sets the column rule contexts.
	SetColumn(IIdentifierContext)

	// Getter signatures
	EQUALS() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	Identifier() IIdentifierContext

	// IsUpdate_set_clauseContext differentiates from other interfaces.
	IsUpdate_set_clauseContext()
}

type Update_set_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	column IIdentifierContext
}

func NewEmptyUpdate_set_clauseContext() *Update_set_clauseContext {
	var p = new(Update_set_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_update_set_clause
	return p
}

func InitEmptyUpdate_set_clauseContext(p *Update_set_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_update_set_clause
}

func (*Update_set_clauseContext) IsUpdate_set_clauseContext() {}

func NewUpdate_set_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_set_clauseContext {
	var p = new(Update_set_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_update_set_clause

	return p
}

func (s *Update_set_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_set_clauseContext) GetColumn() IIdentifierContext { return s.column }

func (s *Update_set_clauseContext) SetColumn(v IIdentifierContext) { s.column = v }

func (s *Update_set_clauseContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, 0)
}

func (s *Update_set_clauseContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Update_set_clauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Update_set_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_set_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_set_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUpdate_set_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Update_set_clause() (localctx IUpdate_set_clauseContext) {
	localctx = NewUpdate_set_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, KuneiformParserRULE_update_set_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(831)

		var _x = p.Identifier()

		localctx.(*Update_set_clauseContext).column = _x
	}
	{
		p.SetState(832)
		p.Match(KuneiformParserEQUALS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(833)
		p.sql_expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_statementContext is an interface to support dynamic dispatch.
type IInsert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// GetTarget_columns returns the target_columns rule contexts.
	GetTarget_columns() IIdentifier_listContext

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// SetTarget_columns sets the target_columns rule contexts.
	SetTarget_columns(IIdentifier_listContext)

	// Getter signatures
	INSERT() antlr.TerminalNode
	INTO() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllLPAREN() []antlr.TerminalNode
	LPAREN(i int) antlr.TerminalNode
	AllRPAREN() []antlr.TerminalNode
	RPAREN(i int) antlr.TerminalNode
	Upsert_clause() IUpsert_clauseContext
	Identifier_list() IIdentifier_listContext
	VALUES() antlr.TerminalNode
	AllSql_expr_list() []ISql_expr_listContext
	Sql_expr_list(i int) ISql_expr_listContext
	Select_statement() ISelect_statementContext
	AS() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsInsert_statementContext differentiates from other interfaces.
	IsInsert_statementContext()
}

type Insert_statementContext struct {
	antlr.BaseParserRuleContext
	parser         antlr.Parser
	table_name     IIdentifierContext
	alias          IIdentifierContext
	target_columns IIdentifier_listContext
}

func NewEmptyInsert_statementContext() *Insert_statementContext {
	var p = new(Insert_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_insert_statement
	return p
}

func InitEmptyInsert_statementContext(p *Insert_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_insert_statement
}

func (*Insert_statementContext) IsInsert_statementContext() {}

func NewInsert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statementContext {
	var p = new(Insert_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_insert_statement

	return p
}

func (s *Insert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statementContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Insert_statementContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Insert_statementContext) GetTarget_columns() IIdentifier_listContext {
	return s.target_columns
}

func (s *Insert_statementContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Insert_statementContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Insert_statementContext) SetTarget_columns(v IIdentifier_listContext) { s.target_columns = v }

func (s *Insert_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINSERT, 0)
}

func (s *Insert_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINTO, 0)
}

func (s *Insert_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Insert_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Insert_statementContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserLPAREN)
}

func (s *Insert_statementContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, i)
}

func (s *Insert_statementContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserRPAREN)
}

func (s *Insert_statementContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, i)
}

func (s *Insert_statementContext) Upsert_clause() IUpsert_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpsert_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpsert_clauseContext)
}

func (s *Insert_statementContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Insert_statementContext) VALUES() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVALUES, 0)
}

func (s *Insert_statementContext) AllSql_expr_list() []ISql_expr_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			len++
		}
	}

	tst := make([]ISql_expr_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_expr_listContext); ok {
			tst[i] = t.(ISql_expr_listContext)
			i++
		}
	}

	return tst
}

func (s *Insert_statementContext) Sql_expr_list(i int) ISql_expr_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *Insert_statementContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Insert_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Insert_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Insert_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Insert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitInsert_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Insert_statement() (localctx IInsert_statementContext) {
	localctx = NewInsert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, KuneiformParserRULE_insert_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(835)
		p.Match(KuneiformParserINSERT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(836)
		p.Match(KuneiformParserINTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(837)

		var _x = p.Identifier()

		localctx.(*Insert_statementContext).table_name = _x
	}
	p.SetState(842)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-33)) & ^0x3f) == 0 && ((int64(1)<<(_la-33))&18049583966447479) != 0) || ((int64((_la-112)) & ^0x3f) == 0 && ((int64(1)<<(_la-112))&34376245375) != 0) {
		p.SetState(839)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserAS {
			{
				p.SetState(838)
				p.Match(KuneiformParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(841)

			var _x = p.Identifier()

			localctx.(*Insert_statementContext).alias = _x
		}

	}
	p.SetState(848)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLPAREN {
		{
			p.SetState(844)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(845)

			var _x = p.Identifier_list()

			localctx.(*Insert_statementContext).target_columns = _x
		}
		{
			p.SetState(846)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(865)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserVALUES:
		{
			p.SetState(850)
			p.Match(KuneiformParserVALUES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(851)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(852)
			p.Sql_expr_list()
		}
		{
			p.SetState(853)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(861)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(854)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(855)
				p.Match(KuneiformParserLPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(856)
				p.Sql_expr_list()
			}
			{
				p.SetState(857)
				p.Match(KuneiformParserRPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(863)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case KuneiformParserSELECT:
		{
			p.SetState(864)
			p.Select_statement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(868)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserON {
		{
			p.SetState(867)
			p.Upsert_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpsert_clauseContext is an interface to support dynamic dispatch.
type IUpsert_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConflict_columns returns the conflict_columns rule contexts.
	GetConflict_columns() IIdentifier_listContext

	// GetConflict_where returns the conflict_where rule contexts.
	GetConflict_where() ISql_exprContext

	// GetUpdate_where returns the update_where rule contexts.
	GetUpdate_where() ISql_exprContext

	// SetConflict_columns sets the conflict_columns rule contexts.
	SetConflict_columns(IIdentifier_listContext)

	// SetConflict_where sets the conflict_where rule contexts.
	SetConflict_where(ISql_exprContext)

	// SetUpdate_where sets the update_where rule contexts.
	SetUpdate_where(ISql_exprContext)

	// Getter signatures
	ON() antlr.TerminalNode
	CONFLICT() antlr.TerminalNode
	DO() antlr.TerminalNode
	NOTHING() antlr.TerminalNode
	UPDATE() antlr.TerminalNode
	SET() antlr.TerminalNode
	AllUpdate_set_clause() []IUpdate_set_clauseContext
	Update_set_clause(i int) IUpdate_set_clauseContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllWHERE() []antlr.TerminalNode
	WHERE(i int) antlr.TerminalNode
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext

	// IsUpsert_clauseContext differentiates from other interfaces.
	IsUpsert_clauseContext()
}

type Upsert_clauseContext struct {
	antlr.BaseParserRuleContext
	parser           antlr.Parser
	conflict_columns IIdentifier_listContext
	conflict_where   ISql_exprContext
	update_where     ISql_exprContext
}

func NewEmptyUpsert_clauseContext() *Upsert_clauseContext {
	var p = new(Upsert_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_upsert_clause
	return p
}

func InitEmptyUpsert_clauseContext(p *Upsert_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_upsert_clause
}

func (*Upsert_clauseContext) IsUpsert_clauseContext() {}

func NewUpsert_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Upsert_clauseContext {
	var p = new(Upsert_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_upsert_clause

	return p
}

func (s *Upsert_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Upsert_clauseContext) GetConflict_columns() IIdentifier_listContext {
	return s.conflict_columns
}

func (s *Upsert_clauseContext) GetConflict_where() ISql_exprContext { return s.conflict_where }

func (s *Upsert_clauseContext) GetUpdate_where() ISql_exprContext { return s.update_where }

func (s *Upsert_clauseContext) SetConflict_columns(v IIdentifier_listContext) { s.conflict_columns = v }

func (s *Upsert_clauseContext) SetConflict_where(v ISql_exprContext) { s.conflict_where = v }

func (s *Upsert_clauseContext) SetUpdate_where(v ISql_exprContext) { s.update_where = v }

func (s *Upsert_clauseContext) ON() antlr.TerminalNode {
	return s.GetToken(KuneiformParserON, 0)
}

func (s *Upsert_clauseContext) CONFLICT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONFLICT, 0)
}

func (s *Upsert_clauseContext) DO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDO, 0)
}

func (s *Upsert_clauseContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOTHING, 0)
}

func (s *Upsert_clauseContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUPDATE, 0)
}

func (s *Upsert_clauseContext) SET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSET, 0)
}

func (s *Upsert_clauseContext) AllUpdate_set_clause() []IUpdate_set_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdate_set_clauseContext); ok {
			len++
		}
	}

	tst := make([]IUpdate_set_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdate_set_clauseContext); ok {
			tst[i] = t.(IUpdate_set_clauseContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Update_set_clause(i int) IUpdate_set_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_set_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_set_clauseContext)
}

func (s *Upsert_clauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Upsert_clauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Upsert_clauseContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Upsert_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Upsert_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Upsert_clauseContext) AllWHERE() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserWHERE)
}

func (s *Upsert_clauseContext) WHERE(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHERE, i)
}

func (s *Upsert_clauseContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Upsert_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Upsert_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Upsert_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUpsert_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Upsert_clause() (localctx IUpsert_clauseContext) {
	localctx = NewUpsert_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, KuneiformParserRULE_upsert_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(870)
		p.Match(KuneiformParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(871)
		p.Match(KuneiformParserCONFLICT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(879)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLPAREN {
		{
			p.SetState(872)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(873)

			var _x = p.Identifier_list()

			localctx.(*Upsert_clauseContext).conflict_columns = _x
		}
		{
			p.SetState(874)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(877)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserWHERE {
			{
				p.SetState(875)
				p.Match(KuneiformParserWHERE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(876)

				var _x = p.sql_expr(0)

				localctx.(*Upsert_clauseContext).conflict_where = _x
			}

		}

	}
	{
		p.SetState(881)
		p.Match(KuneiformParserDO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(897)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserNOTHING:
		{
			p.SetState(882)
			p.Match(KuneiformParserNOTHING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserUPDATE:
		{
			p.SetState(883)
			p.Match(KuneiformParserUPDATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(884)
			p.Match(KuneiformParserSET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(885)
			p.Update_set_clause()
		}
		p.SetState(890)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(886)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(887)
				p.Update_set_clause()
			}

			p.SetState(892)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(895)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserWHERE {
			{
				p.SetState(893)
				p.Match(KuneiformParserWHERE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(894)

				var _x = p.sql_expr(0)

				localctx.(*Upsert_clauseContext).update_where = _x
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDelete_statementContext is an interface to support dynamic dispatch.
type IDelete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// GetWhere returns the where rule contexts.
	GetWhere() ISql_exprContext

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// SetWhere sets the where rule contexts.
	SetWhere(ISql_exprContext)

	// Getter signatures
	DELETE() antlr.TerminalNode
	FROM() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	WHERE() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	AS() antlr.TerminalNode

	// IsDelete_statementContext differentiates from other interfaces.
	IsDelete_statementContext()
}

type Delete_statementContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	table_name IIdentifierContext
	alias      IIdentifierContext
	where      ISql_exprContext
}

func NewEmptyDelete_statementContext() *Delete_statementContext {
	var p = new(Delete_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_delete_statement
	return p
}

func InitEmptyDelete_statementContext(p *Delete_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_delete_statement
}

func (*Delete_statementContext) IsDelete_statementContext() {}

func NewDelete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statementContext {
	var p = new(Delete_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_delete_statement

	return p
}

func (s *Delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statementContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Delete_statementContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Delete_statementContext) GetWhere() ISql_exprContext { return s.where }

func (s *Delete_statementContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Delete_statementContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Delete_statementContext) SetWhere(v ISql_exprContext) { s.where = v }

func (s *Delete_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDELETE, 0)
}

func (s *Delete_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Delete_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Delete_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Delete_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHERE, 0)
}

func (s *Delete_statementContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Delete_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDelete_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Delete_statement() (localctx IDelete_statementContext) {
	localctx = NewDelete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, KuneiformParserRULE_delete_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(899)
		p.Match(KuneiformParserDELETE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(900)
		p.Match(KuneiformParserFROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(901)

		var _x = p.Identifier()

		localctx.(*Delete_statementContext).table_name = _x
	}
	p.SetState(906)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-33)) & ^0x3f) == 0 && ((int64(1)<<(_la-33))&18049583966447479) != 0) || ((int64((_la-112)) & ^0x3f) == 0 && ((int64(1)<<(_la-112))&34376245375) != 0) {
		p.SetState(903)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserAS {
			{
				p.SetState(902)
				p.Match(KuneiformParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(905)

			var _x = p.Identifier()

			localctx.(*Delete_statementContext).alias = _x
		}

	}
	p.SetState(910)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserWHERE {
		{
			p.SetState(908)
			p.Match(KuneiformParserWHERE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(909)

			var _x = p.sql_expr(0)

			localctx.(*Delete_statementContext).where = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_exprContext is an interface to support dynamic dispatch.
type ISql_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSql_exprContext differentiates from other interfaces.
	IsSql_exprContext()
}

type Sql_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_exprContext() *Sql_exprContext {
	var p = new(Sql_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_expr
	return p
}

func InitEmptySql_exprContext(p *Sql_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_expr
}

func (*Sql_exprContext) IsSql_exprContext() {}

func NewSql_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_exprContext {
	var p = new(Sql_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql_expr

	return p
}

func (s *Sql_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_exprContext) CopyAll(ctx *Sql_exprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Column_sql_exprContext struct {
	Sql_exprContext
	table  IIdentifierContext
	column IIdentifierContext
}

func NewColumn_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Column_sql_exprContext {
	var p = new(Column_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Column_sql_exprContext) GetTable() IIdentifierContext { return s.table }

func (s *Column_sql_exprContext) GetColumn() IIdentifierContext { return s.column }

func (s *Column_sql_exprContext) SetTable(v IIdentifierContext) { s.table = v }

func (s *Column_sql_exprContext) SetColumn(v IIdentifierContext) { s.column = v }

func (s *Column_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_sql_exprContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Column_sql_exprContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_sql_exprContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Column_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Column_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitColumn_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Logical_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewLogical_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Logical_sql_exprContext {
	var p = new(Logical_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Logical_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Logical_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Logical_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Logical_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Logical_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Logical_sql_exprContext) AND() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAND, 0)
}

func (s *Logical_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Logical_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Logical_sql_exprContext) OR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOR, 0)
}

func (s *Logical_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLogical_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Field_access_sql_exprContext struct {
	Sql_exprContext
}

func NewField_access_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Field_access_sql_exprContext {
	var p = new(Field_access_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Field_access_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Field_access_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Field_access_sql_exprContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Field_access_sql_exprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Field_access_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Field_access_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitField_access_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Array_access_sql_exprContext struct {
	Sql_exprContext
	array_element ISql_exprContext
	single        ISql_exprContext
	left          ISql_exprContext
	right         ISql_exprContext
}

func NewArray_access_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Array_access_sql_exprContext {
	var p = new(Array_access_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Array_access_sql_exprContext) GetArray_element() ISql_exprContext { return s.array_element }

func (s *Array_access_sql_exprContext) GetSingle() ISql_exprContext { return s.single }

func (s *Array_access_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Array_access_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Array_access_sql_exprContext) SetArray_element(v ISql_exprContext) { s.array_element = v }

func (s *Array_access_sql_exprContext) SetSingle(v ISql_exprContext) { s.single = v }

func (s *Array_access_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Array_access_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Array_access_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_access_sql_exprContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *Array_access_sql_exprContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *Array_access_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Array_access_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Array_access_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Array_access_sql_exprContext) COL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOL, 0)
}

func (s *Array_access_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitArray_access_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Comparison_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewComparison_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Comparison_sql_exprContext {
	var p = new(Comparison_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Comparison_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Comparison_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Comparison_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Comparison_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Comparison_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Comparison_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Comparison_sql_exprContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, 0)
}

func (s *Comparison_sql_exprContext) EQUATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUATE, 0)
}

func (s *Comparison_sql_exprContext) NEQ() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNEQ, 0)
}

func (s *Comparison_sql_exprContext) LT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLT, 0)
}

func (s *Comparison_sql_exprContext) LTE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLTE, 0)
}

func (s *Comparison_sql_exprContext) GT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGT, 0)
}

func (s *Comparison_sql_exprContext) GTE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGTE, 0)
}

func (s *Comparison_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitComparison_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Literal_sql_exprContext struct {
	Sql_exprContext
}

func NewLiteral_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Literal_sql_exprContext {
	var p = new(Literal_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Literal_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Literal_sql_exprContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *Literal_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Literal_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLiteral_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Between_sql_exprContext struct {
	Sql_exprContext
	element ISql_exprContext
	lower   ISql_exprContext
	upper   ISql_exprContext
}

func NewBetween_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Between_sql_exprContext {
	var p = new(Between_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Between_sql_exprContext) GetElement() ISql_exprContext { return s.element }

func (s *Between_sql_exprContext) GetLower() ISql_exprContext { return s.lower }

func (s *Between_sql_exprContext) GetUpper() ISql_exprContext { return s.upper }

func (s *Between_sql_exprContext) SetElement(v ISql_exprContext) { s.element = v }

func (s *Between_sql_exprContext) SetLower(v ISql_exprContext) { s.lower = v }

func (s *Between_sql_exprContext) SetUpper(v ISql_exprContext) { s.upper = v }

func (s *Between_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Between_sql_exprContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBETWEEN, 0)
}

func (s *Between_sql_exprContext) AND() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAND, 0)
}

func (s *Between_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Between_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Between_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Between_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitBetween_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Function_call_sql_exprContext struct {
	Sql_exprContext
}

func NewFunction_call_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Function_call_sql_exprContext {
	var p = new(Function_call_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Function_call_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_sql_exprContext) Sql_function_call() ISql_function_callContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_function_callContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_function_callContext)
}

func (s *Function_call_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Function_call_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitFunction_call_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Paren_sql_exprContext struct {
	Sql_exprContext
}

func NewParen_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Paren_sql_exprContext {
	var p = new(Paren_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Paren_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Paren_sql_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Paren_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Paren_sql_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Paren_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Paren_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitParen_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Collate_sql_exprContext struct {
	Sql_exprContext
}

func NewCollate_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Collate_sql_exprContext {
	var p = new(Collate_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Collate_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collate_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Collate_sql_exprContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOLLATE, 0)
}

func (s *Collate_sql_exprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Collate_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCollate_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Make_array_sql_exprContext struct {
	Sql_exprContext
}

func NewMake_array_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Make_array_sql_exprContext {
	var p = new(Make_array_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Make_array_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Make_array_sql_exprContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserARRAY, 0)
}

func (s *Make_array_sql_exprContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *Make_array_sql_exprContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *Make_array_sql_exprContext) Sql_expr_list() ISql_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *Make_array_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Make_array_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitMake_array_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Variable_sql_exprContext struct {
	Sql_exprContext
}

func NewVariable_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Variable_sql_exprContext {
	var p = new(Variable_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Variable_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_sql_exprContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Variable_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Variable_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitVariable_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Window_function_call_sql_exprContext struct {
	Sql_exprContext
}

func NewWindow_function_call_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Window_function_call_sql_exprContext {
	var p = new(Window_function_call_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Window_function_call_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_function_call_sql_exprContext) Sql_function_call() ISql_function_callContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_function_callContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_function_callContext)
}

func (s *Window_function_call_sql_exprContext) OVER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOVER, 0)
}

func (s *Window_function_call_sql_exprContext) Window() IWindowContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowContext)
}

func (s *Window_function_call_sql_exprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_function_call_sql_exprContext) FILTER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFILTER, 0)
}

func (s *Window_function_call_sql_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Window_function_call_sql_exprContext) WHERE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHERE, 0)
}

func (s *Window_function_call_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Window_function_call_sql_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Window_function_call_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitWindow_function_call_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Is_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewIs_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Is_sql_exprContext {
	var p = new(Is_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Is_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Is_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Is_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Is_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Is_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Is_sql_exprContext) IS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIS, 0)
}

func (s *Is_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Is_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Is_sql_exprContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Is_sql_exprContext) TRUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTRUE, 0)
}

func (s *Is_sql_exprContext) FALSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFALSE, 0)
}

func (s *Is_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Is_sql_exprContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDISTINCT, 0)
}

func (s *Is_sql_exprContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Is_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIs_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Arithmetic_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewArithmetic_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Arithmetic_sql_exprContext {
	var p = new(Arithmetic_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Arithmetic_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Arithmetic_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Arithmetic_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Arithmetic_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Arithmetic_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arithmetic_sql_exprContext) EXP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXP, 0)
}

func (s *Arithmetic_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Arithmetic_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Arithmetic_sql_exprContext) STAR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTAR, 0)
}

func (s *Arithmetic_sql_exprContext) DIV() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIV, 0)
}

func (s *Arithmetic_sql_exprContext) MOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMOD, 0)
}

func (s *Arithmetic_sql_exprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Arithmetic_sql_exprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Arithmetic_sql_exprContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONCAT, 0)
}

func (s *Arithmetic_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitArithmetic_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Like_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewLike_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Like_sql_exprContext {
	var p = new(Like_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Like_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Like_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Like_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Like_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Like_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Like_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Like_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Like_sql_exprContext) LIKE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLIKE, 0)
}

func (s *Like_sql_exprContext) ILIKE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserILIKE, 0)
}

func (s *Like_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Like_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLike_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Subquery_sql_exprContext struct {
	Sql_exprContext
}

func NewSubquery_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Subquery_sql_exprContext {
	var p = new(Subquery_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Subquery_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subquery_sql_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Subquery_sql_exprContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Subquery_sql_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Subquery_sql_exprContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Subquery_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Subquery_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Subquery_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSubquery_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Unary_sql_exprContext struct {
	Sql_exprContext
}

func NewUnary_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Unary_sql_exprContext {
	var p = new(Unary_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Unary_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Unary_sql_exprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Unary_sql_exprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Unary_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Unary_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUnary_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Case_exprContext struct {
	Sql_exprContext
	case_clause ISql_exprContext
	else_clause ISql_exprContext
}

func NewCase_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Case_exprContext {
	var p = new(Case_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Case_exprContext) GetCase_clause() ISql_exprContext { return s.case_clause }

func (s *Case_exprContext) GetElse_clause() ISql_exprContext { return s.else_clause }

func (s *Case_exprContext) SetCase_clause(v ISql_exprContext) { s.case_clause = v }

func (s *Case_exprContext) SetElse_clause(v ISql_exprContext) { s.else_clause = v }

func (s *Case_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_exprContext) CASE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCASE, 0)
}

func (s *Case_exprContext) END() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEND, 0)
}

func (s *Case_exprContext) AllWhen_then_clause() []IWhen_then_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWhen_then_clauseContext); ok {
			len++
		}
	}

	tst := make([]IWhen_then_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWhen_then_clauseContext); ok {
			tst[i] = t.(IWhen_then_clauseContext)
			i++
		}
	}

	return tst
}

func (s *Case_exprContext) When_then_clause(i int) IWhen_then_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhen_then_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhen_then_clauseContext)
}

func (s *Case_exprContext) ELSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserELSE, 0)
}

func (s *Case_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Case_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Case_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCase_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type In_sql_exprContext struct {
	Sql_exprContext
}

func NewIn_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *In_sql_exprContext {
	var p = new(In_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *In_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *In_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *In_sql_exprContext) IN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIN, 0)
}

func (s *In_sql_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *In_sql_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *In_sql_exprContext) Sql_expr_list() ISql_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *In_sql_exprContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *In_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *In_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIn_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql_expr() (localctx ISql_exprContext) {
	return p.sql_expr(0)
}

func (p *KuneiformParser) sql_expr(_p int) (localctx ISql_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewSql_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISql_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 102
	p.EnterRecursionRule(localctx, 102, KuneiformParserRULE_sql_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(994)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 136, p.GetParserRuleContext()) {
	case 1:
		localctx = NewParen_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(913)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(914)
			p.sql_expr(0)
		}
		{
			p.SetState(915)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(917)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(916)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		localctx = NewUnary_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(919)
			_la = p.GetTokenStream().LA(1)

			if !(_la == KuneiformParserPLUS || _la == KuneiformParserMINUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(920)
			p.sql_expr(22)
		}

	case 3:
		localctx = NewLiteral_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(921)
			p.Literal()
		}
		p.SetState(923)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(922)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		localctx = NewWindow_function_call_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(925)
			p.Sql_function_call()
		}
		p.SetState(932)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserFILTER {
			{
				p.SetState(926)
				p.Match(KuneiformParserFILTER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(927)
				p.Match(KuneiformParserLPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(928)
				p.Match(KuneiformParserWHERE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(929)
				p.sql_expr(0)
			}
			{
				p.SetState(930)
				p.Match(KuneiformParserRPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(934)
			p.Match(KuneiformParserOVER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(937)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case KuneiformParserLPAREN:
			{
				p.SetState(935)
				p.Window()
			}

		case KuneiformParserDOUBLE_QUOTE, KuneiformParserUSE, KuneiformParserUNUSE, KuneiformParserACTION, KuneiformParserCREATE, KuneiformParserALTER, KuneiformParserADD, KuneiformParserDROP, KuneiformParserRENAME, KuneiformParserCHECK, KuneiformParserFOREIGN, KuneiformParserPRIMARY, KuneiformParserKEY, KuneiformParserUNIQUE, KuneiformParserRESTRICT, KuneiformParserDEFAULT, KuneiformParserINDEX, KuneiformParserRETURNS, KuneiformParserFOR, KuneiformParserIF, KuneiformParserELSEIF, KuneiformParserELSE, KuneiformParserBREAK, KuneiformParserCONTINUE, KuneiformParserRETURN, KuneiformParserGRANT, KuneiformParserGRANTED, KuneiformParserREVOKE, KuneiformParserROLE, KuneiformParserREPLACE, KuneiformParserNAMESPACE, KuneiformParserTRANSFER, KuneiformParserOWNERSHIP, KuneiformParserROLES, KuneiformParserCALL, KuneiformParserIDENTIFIER:
			{
				p.SetState(936)
				p.Identifier()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 5:
		localctx = NewFunction_call_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(939)
			p.Sql_function_call()
		}
		p.SetState(941)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(940)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 6:
		localctx = NewVariable_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(943)
			p.Variable()
		}
		p.SetState(945)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(944)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 7:
		localctx = NewMake_array_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(947)
			p.Match(KuneiformParserARRAY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(948)
			p.Match(KuneiformParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(950)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4371923291645935488) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&-17735122555437055) != 0) || ((int64((_la-135)) & ^0x3f) == 0 && ((int64(1)<<(_la-135))&28735) != 0) {
			{
				p.SetState(949)
				p.Sql_expr_list()
			}

		}
		{
			p.SetState(952)
			p.Match(KuneiformParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(954)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(953)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 8:
		localctx = NewColumn_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(959)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(956)

				var _x = p.Identifier()

				localctx.(*Column_sql_exprContext).table = _x
			}
			{
				p.SetState(957)
				p.Match(KuneiformParserPERIOD)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(961)

			var _x = p.Identifier()

			localctx.(*Column_sql_exprContext).column = _x
		}
		p.SetState(963)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(962)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 9:
		localctx = NewCase_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(965)
			p.Match(KuneiformParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(967)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4371923291645935488) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&-17735122555437055) != 0) || ((int64((_la-135)) & ^0x3f) == 0 && ((int64(1)<<(_la-135))&28735) != 0) {
			{
				p.SetState(966)

				var _x = p.sql_expr(0)

				localctx.(*Case_exprContext).case_clause = _x
			}

		}
		p.SetState(970)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == KuneiformParserWHEN {
			{
				p.SetState(969)
				p.When_then_clause()
			}

			p.SetState(972)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(976)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserELSE {
			{
				p.SetState(974)
				p.Match(KuneiformParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(975)

				var _x = p.sql_expr(0)

				localctx.(*Case_exprContext).else_clause = _x
			}

		}
		{
			p.SetState(978)
			p.Match(KuneiformParserEND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 10:
		localctx = NewSubquery_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(984)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserNOT || _la == KuneiformParserEXISTS {
			p.SetState(981)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == KuneiformParserNOT {
				{
					p.SetState(980)
					p.Match(KuneiformParserNOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(983)
				p.Match(KuneiformParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(986)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(987)
			p.Select_statement()
		}
		{
			p.SetState(988)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(990)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 135, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(989)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 11:
		localctx = NewUnary_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(992)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(993)
			p.sql_expr(3)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1084)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1082)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 148, p.GetParserRuleContext()) {
			case 1:
				localctx = NewArithmetic_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Arithmetic_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(996)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(997)
					p.Match(KuneiformParserEXP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(998)

					var _x = p.sql_expr(21)

					localctx.(*Arithmetic_sql_exprContext).right = _x
				}

			case 2:
				localctx = NewArithmetic_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Arithmetic_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(999)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
					goto errorExit
				}
				{
					p.SetState(1000)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4734976) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1001)

					var _x = p.sql_expr(20)

					localctx.(*Arithmetic_sql_exprContext).right = _x
				}

			case 3:
				localctx = NewArithmetic_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Arithmetic_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1002)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
					goto errorExit
				}
				{
					p.SetState(1003)
					_la = p.GetTokenStream().LA(1)

					if !(_la == KuneiformParserPLUS || _la == KuneiformParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1004)

					var _x = p.sql_expr(19)

					localctx.(*Arithmetic_sql_exprContext).right = _x
				}

			case 4:
				localctx = NewArithmetic_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Arithmetic_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1005)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				{
					p.SetState(1006)
					p.Match(KuneiformParserCONCAT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1007)

					var _x = p.sql_expr(10)

					localctx.(*Arithmetic_sql_exprContext).right = _x
				}

			case 5:
				localctx = NewLike_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Like_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1008)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				p.SetState(1010)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(1009)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1012)
					_la = p.GetTokenStream().LA(1)

					if !(_la == KuneiformParserLIKE || _la == KuneiformParserILIKE) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1013)

					var _x = p.sql_expr(8)

					localctx.(*Like_sql_exprContext).right = _x
				}

			case 6:
				localctx = NewBetween_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Between_sql_exprContext).element = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1014)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				p.SetState(1016)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(1015)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1018)
					p.Match(KuneiformParserBETWEEN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1019)

					var _x = p.sql_expr(0)

					localctx.(*Between_sql_exprContext).lower = _x
				}
				{
					p.SetState(1020)
					p.Match(KuneiformParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1021)

					var _x = p.sql_expr(7)

					localctx.(*Between_sql_exprContext).upper = _x
				}

			case 7:
				localctx = NewComparison_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Comparison_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1023)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(1024)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&520192000) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1025)

					var _x = p.sql_expr(6)

					localctx.(*Comparison_sql_exprContext).right = _x
				}

			case 8:
				localctx = NewLogical_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Logical_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1026)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(1027)
					p.Match(KuneiformParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1028)

					var _x = p.sql_expr(3)

					localctx.(*Logical_sql_exprContext).right = _x
				}

			case 9:
				localctx = NewLogical_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Logical_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1029)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(1030)
					p.Match(KuneiformParserOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1031)

					var _x = p.sql_expr(2)

					localctx.(*Logical_sql_exprContext).right = _x
				}

			case 10:
				localctx = NewField_access_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1032)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
					goto errorExit
				}
				{
					p.SetState(1033)
					p.Match(KuneiformParserPERIOD)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1034)
					p.Identifier()
				}
				p.SetState(1036)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1035)
						p.Type_cast()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 11:
				localctx = NewArray_access_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Array_access_sql_exprContext).array_element = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1038)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
					goto errorExit
				}
				{
					p.SetState(1039)
					p.Match(KuneiformParserLBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1048)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 142, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1040)

						var _x = p.sql_expr(0)

						localctx.(*Array_access_sql_exprContext).single = _x
					}

				case 2:
					p.SetState(1042)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4371923291645935488) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&-17735122555437055) != 0) || ((int64((_la-135)) & ^0x3f) == 0 && ((int64(1)<<(_la-135))&28735) != 0) {
						{
							p.SetState(1041)

							var _x = p.sql_expr(0)

							localctx.(*Array_access_sql_exprContext).left = _x
						}

					}
					{
						p.SetState(1044)
						p.Match(KuneiformParserCOL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					p.SetState(1046)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4371923291645935488) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&-17735122555437055) != 0) || ((int64((_la-135)) & ^0x3f) == 0 && ((int64(1)<<(_la-135))&28735) != 0) {
						{
							p.SetState(1045)

							var _x = p.sql_expr(0)

							localctx.(*Array_access_sql_exprContext).right = _x
						}

					}

				case antlr.ATNInvalidAltNumber:
					goto errorExit
				}
				{
					p.SetState(1050)
					p.Match(KuneiformParserRBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1052)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 143, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1051)
						p.Type_cast()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 12:
				localctx = NewCollate_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1054)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
					goto errorExit
				}
				{
					p.SetState(1055)
					p.Match(KuneiformParserCOLLATE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1056)
					p.Identifier()
				}

			case 13:
				localctx = NewIn_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1057)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				p.SetState(1059)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(1058)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1061)
					p.Match(KuneiformParserIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1062)
					p.Match(KuneiformParserLPAREN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1065)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case KuneiformParserLPAREN, KuneiformParserPLUS, KuneiformParserMINUS, KuneiformParserDOUBLE_QUOTE, KuneiformParserUSE, KuneiformParserUNUSE, KuneiformParserACTION, KuneiformParserCREATE, KuneiformParserALTER, KuneiformParserADD, KuneiformParserDROP, KuneiformParserRENAME, KuneiformParserCHECK, KuneiformParserFOREIGN, KuneiformParserPRIMARY, KuneiformParserKEY, KuneiformParserUNIQUE, KuneiformParserRESTRICT, KuneiformParserDEFAULT, KuneiformParserNULL, KuneiformParserNOT, KuneiformParserINDEX, KuneiformParserEXISTS, KuneiformParserRETURNS, KuneiformParserCASE, KuneiformParserFOR, KuneiformParserIF, KuneiformParserELSEIF, KuneiformParserELSE, KuneiformParserBREAK, KuneiformParserCONTINUE, KuneiformParserRETURN, KuneiformParserGRANT, KuneiformParserGRANTED, KuneiformParserREVOKE, KuneiformParserROLE, KuneiformParserREPLACE, KuneiformParserARRAY, KuneiformParserNAMESPACE, KuneiformParserTRANSFER, KuneiformParserOWNERSHIP, KuneiformParserROLES, KuneiformParserCALL, KuneiformParserSTRING_, KuneiformParserTRUE, KuneiformParserFALSE, KuneiformParserDIGITS_, KuneiformParserBINARY_, KuneiformParserIDENTIFIER, KuneiformParserVARIABLE, KuneiformParserCONTEXTUAL_VARIABLE:
					{
						p.SetState(1063)
						p.Sql_expr_list()
					}

				case KuneiformParserSELECT:
					{
						p.SetState(1064)
						p.Select_statement()
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}
				{
					p.SetState(1067)
					p.Match(KuneiformParserRPAREN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 14:
				localctx = NewIs_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Is_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(1069)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(1070)
					p.Match(KuneiformParserIS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1072)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(1071)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(1080)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case KuneiformParserDISTINCT:
					{
						p.SetState(1074)
						p.Match(KuneiformParserDISTINCT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1075)
						p.Match(KuneiformParserFROM)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1076)

						var _x = p.sql_expr(0)

						localctx.(*Is_sql_exprContext).right = _x
					}

				case KuneiformParserNULL:
					{
						p.SetState(1077)
						p.Match(KuneiformParserNULL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case KuneiformParserTRUE:
					{
						p.SetState(1078)
						p.Match(KuneiformParserTRUE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case KuneiformParserFALSE:
					{
						p.SetState(1079)
						p.Match(KuneiformParserFALSE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1086)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindowContext is an interface to support dynamic dispatch.
type IWindowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPartition returns the partition rule contexts.
	GetPartition() ISql_expr_listContext

	// SetPartition sets the partition rule contexts.
	SetPartition(ISql_expr_listContext)

	// Getter signatures
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	PARTITION() antlr.TerminalNode
	AllBY() []antlr.TerminalNode
	BY(i int) antlr.TerminalNode
	ORDER() antlr.TerminalNode
	AllOrdering_term() []IOrdering_termContext
	Ordering_term(i int) IOrdering_termContext
	Sql_expr_list() ISql_expr_listContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWindowContext differentiates from other interfaces.
	IsWindowContext()
}

type WindowContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	partition ISql_expr_listContext
}

func NewEmptyWindowContext() *WindowContext {
	var p = new(WindowContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_window
	return p
}

func InitEmptyWindowContext(p *WindowContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_window
}

func (*WindowContext) IsWindowContext() {}

func NewWindowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowContext {
	var p = new(WindowContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_window

	return p
}

func (s *WindowContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowContext) GetPartition() ISql_expr_listContext { return s.partition }

func (s *WindowContext) SetPartition(v ISql_expr_listContext) { s.partition = v }

func (s *WindowContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *WindowContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *WindowContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPARTITION, 0)
}

func (s *WindowContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserBY)
}

func (s *WindowContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserBY, i)
}

func (s *WindowContext) ORDER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserORDER, 0)
}

func (s *WindowContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *WindowContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *WindowContext) Sql_expr_list() ISql_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *WindowContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *WindowContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *WindowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitWindow(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Window() (localctx IWindowContext) {
	localctx = NewWindowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, KuneiformParserRULE_window)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1087)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1091)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserPARTITION {
		{
			p.SetState(1088)
			p.Match(KuneiformParserPARTITION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1089)
			p.Match(KuneiformParserBY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1090)

			var _x = p.Sql_expr_list()

			localctx.(*WindowContext).partition = _x
		}

	}
	p.SetState(1103)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserORDER {
		{
			p.SetState(1093)
			p.Match(KuneiformParserORDER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1094)
			p.Match(KuneiformParserBY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1095)
			p.Ordering_term()
		}
		p.SetState(1100)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(1096)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1097)
				p.Ordering_term()
			}

			p.SetState(1102)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1105)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhen_then_clauseContext is an interface to support dynamic dispatch.
type IWhen_then_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhen_condition returns the when_condition rule contexts.
	GetWhen_condition() ISql_exprContext

	// GetThen returns the then rule contexts.
	GetThen() ISql_exprContext

	// SetWhen_condition sets the when_condition rule contexts.
	SetWhen_condition(ISql_exprContext)

	// SetThen sets the then rule contexts.
	SetThen(ISql_exprContext)

	// Getter signatures
	WHEN() antlr.TerminalNode
	THEN() antlr.TerminalNode
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext

	// IsWhen_then_clauseContext differentiates from other interfaces.
	IsWhen_then_clauseContext()
}

type When_then_clauseContext struct {
	antlr.BaseParserRuleContext
	parser         antlr.Parser
	when_condition ISql_exprContext
	then           ISql_exprContext
}

func NewEmptyWhen_then_clauseContext() *When_then_clauseContext {
	var p = new(When_then_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_when_then_clause
	return p
}

func InitEmptyWhen_then_clauseContext(p *When_then_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_when_then_clause
}

func (*When_then_clauseContext) IsWhen_then_clauseContext() {}

func NewWhen_then_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *When_then_clauseContext {
	var p = new(When_then_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_when_then_clause

	return p
}

func (s *When_then_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *When_then_clauseContext) GetWhen_condition() ISql_exprContext { return s.when_condition }

func (s *When_then_clauseContext) GetThen() ISql_exprContext { return s.then }

func (s *When_then_clauseContext) SetWhen_condition(v ISql_exprContext) { s.when_condition = v }

func (s *When_then_clauseContext) SetThen(v ISql_exprContext) { s.then = v }

func (s *When_then_clauseContext) WHEN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHEN, 0)
}

func (s *When_then_clauseContext) THEN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTHEN, 0)
}

func (s *When_then_clauseContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *When_then_clauseContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *When_then_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *When_then_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *When_then_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitWhen_then_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) When_then_clause() (localctx IWhen_then_clauseContext) {
	localctx = NewWhen_then_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, KuneiformParserRULE_when_then_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1107)
		p.Match(KuneiformParserWHEN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1108)

		var _x = p.sql_expr(0)

		localctx.(*When_then_clauseContext).when_condition = _x
	}
	{
		p.SetState(1109)
		p.Match(KuneiformParserTHEN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1110)

		var _x = p.sql_expr(0)

		localctx.(*When_then_clauseContext).then = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_expr_listContext is an interface to support dynamic dispatch.
type ISql_expr_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSql_expr_listContext differentiates from other interfaces.
	IsSql_expr_listContext()
}

type Sql_expr_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_expr_listContext() *Sql_expr_listContext {
	var p = new(Sql_expr_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_expr_list
	return p
}

func InitEmptySql_expr_listContext(p *Sql_expr_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_expr_list
}

func (*Sql_expr_listContext) IsSql_expr_listContext() {}

func NewSql_expr_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_expr_listContext {
	var p = new(Sql_expr_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql_expr_list

	return p
}

func (s *Sql_expr_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_expr_listContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Sql_expr_listContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Sql_expr_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Sql_expr_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Sql_expr_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_expr_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_expr_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSql_expr_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql_expr_list() (localctx ISql_expr_listContext) {
	localctx = NewSql_expr_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, KuneiformParserRULE_sql_expr_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1112)
		p.sql_expr(0)
	}
	p.SetState(1117)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(1113)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1114)
			p.sql_expr(0)
		}

		p.SetState(1119)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_function_callContext is an interface to support dynamic dispatch.
type ISql_function_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSql_function_callContext differentiates from other interfaces.
	IsSql_function_callContext()
}

type Sql_function_callContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_function_callContext() *Sql_function_callContext {
	var p = new(Sql_function_callContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_function_call
	return p
}

func InitEmptySql_function_callContext(p *Sql_function_callContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_function_call
}

func (*Sql_function_callContext) IsSql_function_callContext() {}

func NewSql_function_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_function_callContext {
	var p = new(Sql_function_callContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql_function_call

	return p
}

func (s *Sql_function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_function_callContext) CopyAll(ctx *Sql_function_callContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Sql_function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Normal_call_sqlContext struct {
	Sql_function_callContext
}

func NewNormal_call_sqlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Normal_call_sqlContext {
	var p = new(Normal_call_sqlContext)

	InitEmptySql_function_callContext(&p.Sql_function_callContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_function_callContext))

	return p
}

func (s *Normal_call_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Normal_call_sqlContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Normal_call_sqlContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Normal_call_sqlContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Normal_call_sqlContext) Sql_expr_list() ISql_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *Normal_call_sqlContext) STAR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTAR, 0)
}

func (s *Normal_call_sqlContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDISTINCT, 0)
}

func (s *Normal_call_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitNormal_call_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql_function_call() (localctx ISql_function_callContext) {
	localctx = NewSql_function_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, KuneiformParserRULE_sql_function_call)
	var _la int

	localctx = NewNormal_call_sqlContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1120)
		p.Identifier()
	}
	{
		p.SetState(1121)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1127)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case KuneiformParserLPAREN, KuneiformParserPLUS, KuneiformParserMINUS, KuneiformParserDOUBLE_QUOTE, KuneiformParserUSE, KuneiformParserUNUSE, KuneiformParserACTION, KuneiformParserCREATE, KuneiformParserALTER, KuneiformParserADD, KuneiformParserDROP, KuneiformParserRENAME, KuneiformParserCHECK, KuneiformParserFOREIGN, KuneiformParserPRIMARY, KuneiformParserKEY, KuneiformParserUNIQUE, KuneiformParserRESTRICT, KuneiformParserDEFAULT, KuneiformParserNULL, KuneiformParserNOT, KuneiformParserINDEX, KuneiformParserEXISTS, KuneiformParserRETURNS, KuneiformParserCASE, KuneiformParserDISTINCT, KuneiformParserFOR, KuneiformParserIF, KuneiformParserELSEIF, KuneiformParserELSE, KuneiformParserBREAK, KuneiformParserCONTINUE, KuneiformParserRETURN, KuneiformParserGRANT, KuneiformParserGRANTED, KuneiformParserREVOKE, KuneiformParserROLE, KuneiformParserREPLACE, KuneiformParserARRAY, KuneiformParserNAMESPACE, KuneiformParserTRANSFER, KuneiformParserOWNERSHIP, KuneiformParserROLES, KuneiformParserCALL, KuneiformParserSTRING_, KuneiformParserTRUE, KuneiformParserFALSE, KuneiformParserDIGITS_, KuneiformParserBINARY_, KuneiformParserIDENTIFIER, KuneiformParserVARIABLE, KuneiformParserCONTEXTUAL_VARIABLE:
		p.SetState(1123)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserDISTINCT {
			{
				p.SetState(1122)
				p.Match(KuneiformParserDISTINCT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1125)
			p.Sql_expr_list()
		}

	case KuneiformParserSTAR:
		{
			p.SetState(1126)
			p.Match(KuneiformParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserRPAREN:

	default:
	}
	{
		p.SetState(1129)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_exprContext is an interface to support dynamic dispatch.
type IAction_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAction_exprContext differentiates from other interfaces.
	IsAction_exprContext()
}

type Action_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAction_exprContext() *Action_exprContext {
	var p = new(Action_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_expr
	return p
}

func InitEmptyAction_exprContext(p *Action_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_expr
}

func (*Action_exprContext) IsAction_exprContext() {}

func NewAction_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_exprContext {
	var p = new(Action_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_action_expr

	return p
}

func (s *Action_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_exprContext) CopyAll(ctx *Action_exprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Function_call_action_exprContext struct {
	Action_exprContext
}

func NewFunction_call_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Function_call_action_exprContext {
	var p = new(Function_call_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Function_call_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_action_exprContext) Action_function_call() IAction_function_callContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_function_callContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_function_callContext)
}

func (s *Function_call_action_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Function_call_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitFunction_call_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Literal_action_exprContext struct {
	Action_exprContext
}

func NewLiteral_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Literal_action_exprContext {
	var p = new(Literal_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Literal_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Literal_action_exprContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *Literal_action_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Literal_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLiteral_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Field_access_action_exprContext struct {
	Action_exprContext
}

func NewField_access_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Field_access_action_exprContext {
	var p = new(Field_access_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Field_access_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Field_access_action_exprContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Field_access_action_exprContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Field_access_action_exprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Field_access_action_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Field_access_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitField_access_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Is_action_exprContext struct {
	Action_exprContext
	left  IAction_exprContext
	right IAction_exprContext
}

func NewIs_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Is_action_exprContext {
	var p = new(Is_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Is_action_exprContext) GetLeft() IAction_exprContext { return s.left }

func (s *Is_action_exprContext) GetRight() IAction_exprContext { return s.right }

func (s *Is_action_exprContext) SetLeft(v IAction_exprContext) { s.left = v }

func (s *Is_action_exprContext) SetRight(v IAction_exprContext) { s.right = v }

func (s *Is_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Is_action_exprContext) IS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIS, 0)
}

func (s *Is_action_exprContext) AllAction_expr() []IAction_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_exprContext); ok {
			len++
		}
	}

	tst := make([]IAction_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_exprContext); ok {
			tst[i] = t.(IAction_exprContext)
			i++
		}
	}

	return tst
}

func (s *Is_action_exprContext) Action_expr(i int) IAction_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Is_action_exprContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Is_action_exprContext) TRUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTRUE, 0)
}

func (s *Is_action_exprContext) FALSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFALSE, 0)
}

func (s *Is_action_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Is_action_exprContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDISTINCT, 0)
}

func (s *Is_action_exprContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Is_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIs_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Variable_action_exprContext struct {
	Action_exprContext
}

func NewVariable_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Variable_action_exprContext {
	var p = new(Variable_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Variable_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_action_exprContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Variable_action_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Variable_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitVariable_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Make_array_action_exprContext struct {
	Action_exprContext
}

func NewMake_array_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Make_array_action_exprContext {
	var p = new(Make_array_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Make_array_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Make_array_action_exprContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *Make_array_action_exprContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *Make_array_action_exprContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserARRAY, 0)
}

func (s *Make_array_action_exprContext) Action_expr_list() IAction_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_expr_listContext)
}

func (s *Make_array_action_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Make_array_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitMake_array_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Comparison_action_exprContext struct {
	Action_exprContext
}

func NewComparison_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Comparison_action_exprContext {
	var p = new(Comparison_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Comparison_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_action_exprContext) AllAction_expr() []IAction_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_exprContext); ok {
			len++
		}
	}

	tst := make([]IAction_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_exprContext); ok {
			tst[i] = t.(IAction_exprContext)
			i++
		}
	}

	return tst
}

func (s *Comparison_action_exprContext) Action_expr(i int) IAction_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Comparison_action_exprContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, 0)
}

func (s *Comparison_action_exprContext) EQUATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUATE, 0)
}

func (s *Comparison_action_exprContext) NEQ() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNEQ, 0)
}

func (s *Comparison_action_exprContext) LT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLT, 0)
}

func (s *Comparison_action_exprContext) LTE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLTE, 0)
}

func (s *Comparison_action_exprContext) GT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGT, 0)
}

func (s *Comparison_action_exprContext) GTE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGTE, 0)
}

func (s *Comparison_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitComparison_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Action_expr_arithmeticContext struct {
	Action_exprContext
}

func NewAction_expr_arithmeticContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Action_expr_arithmeticContext {
	var p = new(Action_expr_arithmeticContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Action_expr_arithmeticContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_expr_arithmeticContext) AllAction_expr() []IAction_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_exprContext); ok {
			len++
		}
	}

	tst := make([]IAction_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_exprContext); ok {
			tst[i] = t.(IAction_exprContext)
			i++
		}
	}

	return tst
}

func (s *Action_expr_arithmeticContext) Action_expr(i int) IAction_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Action_expr_arithmeticContext) EXP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXP, 0)
}

func (s *Action_expr_arithmeticContext) STAR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTAR, 0)
}

func (s *Action_expr_arithmeticContext) DIV() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIV, 0)
}

func (s *Action_expr_arithmeticContext) MOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMOD, 0)
}

func (s *Action_expr_arithmeticContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Action_expr_arithmeticContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Action_expr_arithmeticContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONCAT, 0)
}

func (s *Action_expr_arithmeticContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAction_expr_arithmetic(s)

	default:
		return t.VisitChildren(s)
	}
}

type Array_access_action_exprContext struct {
	Action_exprContext
	array_element IAction_exprContext
	single        IAction_exprContext
	left          IAction_exprContext
	right         IAction_exprContext
}

func NewArray_access_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Array_access_action_exprContext {
	var p = new(Array_access_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Array_access_action_exprContext) GetArray_element() IAction_exprContext {
	return s.array_element
}

func (s *Array_access_action_exprContext) GetSingle() IAction_exprContext { return s.single }

func (s *Array_access_action_exprContext) GetLeft() IAction_exprContext { return s.left }

func (s *Array_access_action_exprContext) GetRight() IAction_exprContext { return s.right }

func (s *Array_access_action_exprContext) SetArray_element(v IAction_exprContext) {
	s.array_element = v
}

func (s *Array_access_action_exprContext) SetSingle(v IAction_exprContext) { s.single = v }

func (s *Array_access_action_exprContext) SetLeft(v IAction_exprContext) { s.left = v }

func (s *Array_access_action_exprContext) SetRight(v IAction_exprContext) { s.right = v }

func (s *Array_access_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_access_action_exprContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *Array_access_action_exprContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *Array_access_action_exprContext) AllAction_expr() []IAction_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_exprContext); ok {
			len++
		}
	}

	tst := make([]IAction_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_exprContext); ok {
			tst[i] = t.(IAction_exprContext)
			i++
		}
	}

	return tst
}

func (s *Array_access_action_exprContext) Action_expr(i int) IAction_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Array_access_action_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Array_access_action_exprContext) COL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOL, 0)
}

func (s *Array_access_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitArray_access_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Logical_action_exprContext struct {
	Action_exprContext
}

func NewLogical_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Logical_action_exprContext {
	var p = new(Logical_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Logical_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Logical_action_exprContext) AllAction_expr() []IAction_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_exprContext); ok {
			len++
		}
	}

	tst := make([]IAction_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_exprContext); ok {
			tst[i] = t.(IAction_exprContext)
			i++
		}
	}

	return tst
}

func (s *Logical_action_exprContext) Action_expr(i int) IAction_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Logical_action_exprContext) AND() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAND, 0)
}

func (s *Logical_action_exprContext) OR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOR, 0)
}

func (s *Logical_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLogical_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Paren_action_exprContext struct {
	Action_exprContext
}

func NewParen_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Paren_action_exprContext {
	var p = new(Paren_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Paren_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Paren_action_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Paren_action_exprContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Paren_action_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Paren_action_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Paren_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitParen_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Unary_action_exprContext struct {
	Action_exprContext
}

func NewUnary_action_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Unary_action_exprContext {
	var p = new(Unary_action_exprContext)

	InitEmptyAction_exprContext(&p.Action_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_exprContext))

	return p
}

func (s *Unary_action_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_action_exprContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Unary_action_exprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Unary_action_exprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Unary_action_exprContext) EXCL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXCL, 0)
}

func (s *Unary_action_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Unary_action_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUnary_action_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Action_expr() (localctx IAction_exprContext) {
	return p.action_expr(0)
}

func (p *KuneiformParser) action_expr(_p int) (localctx IAction_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewAction_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAction_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 112
	p.EnterRecursionRule(localctx, 112, KuneiformParserRULE_action_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1165)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 163, p.GetParserRuleContext()) {
	case 1:
		localctx = NewParen_action_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1132)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1133)
			p.action_expr(0)
		}
		{
			p.SetState(1134)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1136)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1135)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		localctx = NewUnary_action_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1138)
			_la = p.GetTokenStream().LA(1)

			if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&3147776) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1139)
			p.action_expr(14)
		}

	case 3:
		localctx = NewLiteral_action_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1140)
			p.Literal()
		}
		p.SetState(1142)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1141)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		localctx = NewFunction_call_action_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1144)
			p.Action_function_call()
		}
		p.SetState(1146)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1145)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 5:
		localctx = NewVariable_action_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1148)
			p.Variable()
		}
		p.SetState(1150)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 159, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1149)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 6:
		localctx = NewMake_array_action_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(1153)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserARRAY {
			{
				p.SetState(1152)
				p.Match(KuneiformParserARRAY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1155)
			p.Match(KuneiformParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1157)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4371923291645933432) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&8088464660140916737) != 0) {
			{
				p.SetState(1156)
				p.Action_expr_list()
			}

		}
		{
			p.SetState(1159)
			p.Match(KuneiformParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1161)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1160)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 7:
		localctx = NewUnary_action_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1163)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(1164)
			p.action_expr(3)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1225)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 172, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1223)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 171, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAction_expr_arithmeticContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1167)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(1168)
					p.Match(KuneiformParserEXP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1169)
					p.action_expr(14)
				}

			case 2:
				localctx = NewAction_expr_arithmeticContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1170)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				{
					p.SetState(1171)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4734976) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1172)
					p.action_expr(13)
				}

			case 3:
				localctx = NewAction_expr_arithmeticContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1173)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				{
					p.SetState(1174)
					_la = p.GetTokenStream().LA(1)

					if !(_la == KuneiformParserPLUS || _la == KuneiformParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1175)
					p.action_expr(12)
				}

			case 4:
				localctx = NewAction_expr_arithmeticContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1176)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(1177)
					p.Match(KuneiformParserCONCAT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1178)
					p.action_expr(7)
				}

			case 5:
				localctx = NewComparison_action_exprContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1179)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(1180)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&520192000) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1181)
					p.action_expr(6)
				}

			case 6:
				localctx = NewLogical_action_exprContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1182)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(1183)
					p.Match(KuneiformParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1184)
					p.action_expr(3)
				}

			case 7:
				localctx = NewLogical_action_exprContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1185)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(1186)
					p.Match(KuneiformParserOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1187)
					p.action_expr(2)
				}

			case 8:
				localctx = NewField_access_action_exprContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1188)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(1189)
					p.Match(KuneiformParserPERIOD)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1190)
					p.Identifier()
				}
				p.SetState(1192)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1191)
						p.Type_cast()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 9:
				localctx = NewArray_access_action_exprContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				localctx.(*Array_access_action_exprContext).array_element = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1194)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				{
					p.SetState(1195)
					p.Match(KuneiformParserLBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1204)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 167, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1196)

						var _x = p.action_expr(0)

						localctx.(*Array_access_action_exprContext).single = _x
					}

				case 2:
					p.SetState(1198)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4371923291645933432) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&8088464660140916737) != 0) {
						{
							p.SetState(1197)

							var _x = p.action_expr(0)

							localctx.(*Array_access_action_exprContext).left = _x
						}

					}
					{
						p.SetState(1200)
						p.Match(KuneiformParserCOL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					p.SetState(1202)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4371923291645933432) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&8088464660140916737) != 0) {
						{
							p.SetState(1201)

							var _x = p.action_expr(0)

							localctx.(*Array_access_action_exprContext).right = _x
						}

					}

				case antlr.ATNInvalidAltNumber:
					goto errorExit
				}
				{
					p.SetState(1206)
					p.Match(KuneiformParserRBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1208)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 168, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1207)
						p.Type_cast()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 10:
				localctx = NewIs_action_exprContext(p, NewAction_exprContext(p, _parentctx, _parentState))
				localctx.(*Is_action_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_action_expr)
				p.SetState(1210)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(1211)
					p.Match(KuneiformParserIS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1213)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(1212)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(1221)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case KuneiformParserDISTINCT:
					{
						p.SetState(1215)
						p.Match(KuneiformParserDISTINCT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1216)
						p.Match(KuneiformParserFROM)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1217)

						var _x = p.action_expr(0)

						localctx.(*Is_action_exprContext).right = _x
					}

				case KuneiformParserNULL:
					{
						p.SetState(1218)
						p.Match(KuneiformParserNULL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case KuneiformParserTRUE:
					{
						p.SetState(1219)
						p.Match(KuneiformParserTRUE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case KuneiformParserFALSE:
					{
						p.SetState(1220)
						p.Match(KuneiformParserFALSE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1227)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 172, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_expr_listContext is an interface to support dynamic dispatch.
type IAction_expr_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAction_expr() []IAction_exprContext
	Action_expr(i int) IAction_exprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsAction_expr_listContext differentiates from other interfaces.
	IsAction_expr_listContext()
}

type Action_expr_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAction_expr_listContext() *Action_expr_listContext {
	var p = new(Action_expr_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_expr_list
	return p
}

func InitEmptyAction_expr_listContext(p *Action_expr_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_expr_list
}

func (*Action_expr_listContext) IsAction_expr_listContext() {}

func NewAction_expr_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_expr_listContext {
	var p = new(Action_expr_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_action_expr_list

	return p
}

func (s *Action_expr_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_expr_listContext) AllAction_expr() []IAction_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_exprContext); ok {
			len++
		}
	}

	tst := make([]IAction_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_exprContext); ok {
			tst[i] = t.(IAction_exprContext)
			i++
		}
	}

	return tst
}

func (s *Action_expr_listContext) Action_expr(i int) IAction_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Action_expr_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Action_expr_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Action_expr_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_expr_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Action_expr_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAction_expr_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Action_expr_list() (localctx IAction_expr_listContext) {
	localctx = NewAction_expr_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, KuneiformParserRULE_action_expr_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1228)
		p.action_expr(0)
	}
	p.SetState(1233)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(1229)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1230)
			p.action_expr(0)
		}

		p.SetState(1235)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_statementContext is an interface to support dynamic dispatch.
type IAction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAction_statementContext differentiates from other interfaces.
	IsAction_statementContext()
}

type Action_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAction_statementContext() *Action_statementContext {
	var p = new(Action_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_statement
	return p
}

func InitEmptyAction_statementContext(p *Action_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_statement
}

func (*Action_statementContext) IsAction_statementContext() {}

func NewAction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_statementContext {
	var p = new(Action_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_action_statement

	return p
}

func (s *Action_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_statementContext) CopyAll(ctx *Action_statementContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Action_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Stmt_ifContext struct {
	Action_statementContext
}

func NewStmt_ifContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_ifContext {
	var p = new(Stmt_ifContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Stmt_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_ifContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserIF)
}

func (s *Stmt_ifContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, i)
}

func (s *Stmt_ifContext) AllIf_then_block() []IIf_then_blockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIf_then_blockContext); ok {
			len++
		}
	}

	tst := make([]IIf_then_blockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIf_then_blockContext); ok {
			tst[i] = t.(IIf_then_blockContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_ifContext) If_then_block(i int) IIf_then_blockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_then_blockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_then_blockContext)
}

func (s *Stmt_ifContext) AllELSE() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserELSE)
}

func (s *Stmt_ifContext) ELSE(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserELSE, i)
}

func (s *Stmt_ifContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Stmt_ifContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Stmt_ifContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_ifContext) AllELSEIF() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserELSEIF)
}

func (s *Stmt_ifContext) ELSEIF(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserELSEIF, i)
}

func (s *Stmt_ifContext) AllAction_statement() []IAction_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_statementContext); ok {
			len++
		}
	}

	tst := make([]IAction_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_statementContext); ok {
			tst[i] = t.(IAction_statementContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_ifContext) Action_statement(i int) IAction_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_statementContext)
}

func (s *Stmt_ifContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_if(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_loop_controlContext struct {
	Action_statementContext
}

func NewStmt_loop_controlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_loop_controlContext {
	var p = new(Stmt_loop_controlContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Stmt_loop_controlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_loop_controlContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_loop_controlContext) BREAK() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBREAK, 0)
}

func (s *Stmt_loop_controlContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONTINUE, 0)
}

func (s *Stmt_loop_controlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_loop_control(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_variable_declarationContext struct {
	Action_statementContext
}

func NewStmt_variable_declarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_variable_declarationContext {
	var p = new(Stmt_variable_declarationContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Stmt_variable_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_variable_declarationContext) VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVARIABLE, 0)
}

func (s *Stmt_variable_declarationContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Stmt_variable_declarationContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_variable_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_variable_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_return_nextContext struct {
	Action_statementContext
}

func NewStmt_return_nextContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_return_nextContext {
	var p = new(Stmt_return_nextContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Stmt_return_nextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_return_nextContext) RETURN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRETURN, 0)
}

func (s *Stmt_return_nextContext) NEXT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNEXT, 0)
}

func (s *Stmt_return_nextContext) Action_expr_list() IAction_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_expr_listContext)
}

func (s *Stmt_return_nextContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_return_nextContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_return_next(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_for_loopContext struct {
	Action_statementContext
	receiver antlr.Token
}

func NewStmt_for_loopContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_for_loopContext {
	var p = new(Stmt_for_loopContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Stmt_for_loopContext) GetReceiver() antlr.Token { return s.receiver }

func (s *Stmt_for_loopContext) SetReceiver(v antlr.Token) { s.receiver = v }

func (s *Stmt_for_loopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_for_loopContext) FOR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFOR, 0)
}

func (s *Stmt_for_loopContext) IN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIN, 0)
}

func (s *Stmt_for_loopContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Stmt_for_loopContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Stmt_for_loopContext) VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVARIABLE, 0)
}

func (s *Stmt_for_loopContext) Range_() IRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRangeContext)
}

func (s *Stmt_for_loopContext) Sql_statement() ISql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Stmt_for_loopContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Stmt_for_loopContext) AllAction_statement() []IAction_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_statementContext); ok {
			len++
		}
	}

	tst := make([]IAction_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_statementContext); ok {
			tst[i] = t.(IAction_statementContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_for_loopContext) Action_statement(i int) IAction_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_statementContext)
}

func (s *Stmt_for_loopContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_for_loopContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserARRAY, 0)
}

func (s *Stmt_for_loopContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_for_loop(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_returnContext struct {
	Action_statementContext
}

func NewStmt_returnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_returnContext {
	var p = new(Stmt_returnContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Stmt_returnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_returnContext) RETURN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRETURN, 0)
}

func (s *Stmt_returnContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_returnContext) Action_expr_list() IAction_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_expr_listContext)
}

func (s *Stmt_returnContext) Sql_statement() ISql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Stmt_returnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_return(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_action_callContext struct {
	Action_statementContext
}

func NewStmt_action_callContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_action_callContext {
	var p = new(Stmt_action_callContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Stmt_action_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_action_callContext) Action_function_call() IAction_function_callContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_function_callContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_function_callContext)
}

func (s *Stmt_action_callContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_action_callContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserASSIGN, 0)
}

func (s *Stmt_action_callContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, 0)
}

func (s *Stmt_action_callContext) AllVariable_or_underscore() []IVariable_or_underscoreContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariable_or_underscoreContext); ok {
			len++
		}
	}

	tst := make([]IVariable_or_underscoreContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariable_or_underscoreContext); ok {
			tst[i] = t.(IVariable_or_underscoreContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_action_callContext) Variable_or_underscore(i int) IVariable_or_underscoreContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariable_or_underscoreContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariable_or_underscoreContext)
}

func (s *Stmt_action_callContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Stmt_action_callContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Stmt_action_callContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_action_call(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_variable_assignmentContext struct {
	Action_statementContext
}

func NewStmt_variable_assignmentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_variable_assignmentContext {
	var p = new(Stmt_variable_assignmentContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Stmt_variable_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_variable_assignmentContext) AllAction_expr() []IAction_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_exprContext); ok {
			len++
		}
	}

	tst := make([]IAction_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_exprContext); ok {
			tst[i] = t.(IAction_exprContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_variable_assignmentContext) Action_expr(i int) IAction_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *Stmt_variable_assignmentContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_variable_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserASSIGN, 0)
}

func (s *Stmt_variable_assignmentContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, 0)
}

func (s *Stmt_variable_assignmentContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Stmt_variable_assignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_variable_assignment(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_sqlContext struct {
	Action_statementContext
}

func NewStmt_sqlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_sqlContext {
	var p = new(Stmt_sqlContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Stmt_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_sqlContext) Sql_statement() ISql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Stmt_sqlContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Action_statement() (localctx IAction_statementContext) {
	localctx = NewAction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, KuneiformParserRULE_action_statement)
	var _la int

	var _alt int

	p.SetState(1328)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext()) {
	case 1:
		localctx = NewStmt_variable_declarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1236)
			p.Match(KuneiformParserVARIABLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1237)
			p.Type_()
		}
		{
			p.SetState(1238)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewStmt_action_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1250)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserUNDERSCORE || _la == KuneiformParserVARIABLE {
			{
				p.SetState(1240)
				p.Variable_or_underscore()
			}

			p.SetState(1245)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == KuneiformParserCOMMA {
				{
					p.SetState(1241)
					p.Match(KuneiformParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				{
					p.SetState(1242)
					p.Variable_or_underscore()
				}

				p.SetState(1247)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1248)
				_la = p.GetTokenStream().LA(1)

				if !(_la == KuneiformParserEQUALS || _la == KuneiformParserASSIGN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1252)
			p.Action_function_call()
		}
		{
			p.SetState(1253)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewStmt_variable_assignmentContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1255)
			p.action_expr(0)
		}
		p.SetState(1257)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9127724498152325120) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&1153475387850752001) != 0) {
			{
				p.SetState(1256)
				p.Type_()
			}

		}
		{
			p.SetState(1259)
			_la = p.GetTokenStream().LA(1)

			if !(_la == KuneiformParserEQUALS || _la == KuneiformParserASSIGN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1260)
			p.action_expr(0)
		}
		{
			p.SetState(1261)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewStmt_for_loopContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1263)
			p.Match(KuneiformParserFOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1264)

			var _m = p.Match(KuneiformParserVARIABLE)

			localctx.(*Stmt_for_loopContext).receiver = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1265)
			p.Match(KuneiformParserIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1272)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 178, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1266)
				p.Range_()
			}

		case 2:
			{
				p.SetState(1267)
				p.Sql_statement()
			}

		case 3:
			p.SetState(1269)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 177, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1268)
					p.Match(KuneiformParserARRAY)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			{
				p.SetState(1271)
				p.action_expr(0)
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(1274)
			p.Match(KuneiformParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1278)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-3507232162117056376) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&8088464660140922885) != 0) {
			{
				p.SetState(1275)
				p.Action_statement()
			}

			p.SetState(1280)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1281)
			p.Match(KuneiformParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1283)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserSCOL {
			{
				p.SetState(1282)
				p.Match(KuneiformParserSCOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 5:
		localctx = NewStmt_ifContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1285)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1286)
			p.If_then_block()
		}
		p.SetState(1295)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 182, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(1290)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case KuneiformParserELSEIF:
					{
						p.SetState(1287)
						p.Match(KuneiformParserELSEIF)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case KuneiformParserELSE:
					{
						p.SetState(1288)
						p.Match(KuneiformParserELSE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1289)
						p.Match(KuneiformParserIF)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}
				{
					p.SetState(1292)
					p.If_then_block()
				}

			}
			p.SetState(1297)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 182, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1307)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1298)
				p.Match(KuneiformParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1299)
				p.Match(KuneiformParserLBRACE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1303)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-3507232162117056376) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&8088464660140922885) != 0) {
				{
					p.SetState(1300)
					p.Action_statement()
				}

				p.SetState(1305)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1306)
				p.Match(KuneiformParserRBRACE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1310)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserSCOL {
			{
				p.SetState(1309)
				p.Match(KuneiformParserSCOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 6:
		localctx = NewStmt_sqlContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1312)
			p.Sql_statement()
		}
		{
			p.SetState(1313)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		localctx = NewStmt_loop_controlContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1315)
			_la = p.GetTokenStream().LA(1)

			if !(_la == KuneiformParserBREAK || _la == KuneiformParserCONTINUE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1316)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		localctx = NewStmt_returnContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1317)
			p.Match(KuneiformParserRETURN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1320)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case KuneiformParserLBRACKET, KuneiformParserLPAREN, KuneiformParserEXCL, KuneiformParserPLUS, KuneiformParserMINUS, KuneiformParserDOUBLE_QUOTE, KuneiformParserUSE, KuneiformParserUNUSE, KuneiformParserACTION, KuneiformParserCREATE, KuneiformParserALTER, KuneiformParserADD, KuneiformParserDROP, KuneiformParserRENAME, KuneiformParserCHECK, KuneiformParserFOREIGN, KuneiformParserPRIMARY, KuneiformParserKEY, KuneiformParserUNIQUE, KuneiformParserRESTRICT, KuneiformParserDEFAULT, KuneiformParserNULL, KuneiformParserNOT, KuneiformParserINDEX, KuneiformParserRETURNS, KuneiformParserFOR, KuneiformParserIF, KuneiformParserELSEIF, KuneiformParserELSE, KuneiformParserBREAK, KuneiformParserCONTINUE, KuneiformParserRETURN, KuneiformParserGRANT, KuneiformParserGRANTED, KuneiformParserREVOKE, KuneiformParserROLE, KuneiformParserREPLACE, KuneiformParserARRAY, KuneiformParserNAMESPACE, KuneiformParserTRANSFER, KuneiformParserOWNERSHIP, KuneiformParserROLES, KuneiformParserCALL, KuneiformParserSTRING_, KuneiformParserTRUE, KuneiformParserFALSE, KuneiformParserDIGITS_, KuneiformParserBINARY_, KuneiformParserIDENTIFIER, KuneiformParserVARIABLE, KuneiformParserCONTEXTUAL_VARIABLE:
			{
				p.SetState(1318)
				p.Action_expr_list()
			}

		case KuneiformParserDELETE, KuneiformParserUPDATE, KuneiformParserWITH, KuneiformParserSELECT, KuneiformParserINSERT:
			{
				p.SetState(1319)
				p.Sql_statement()
			}

		case KuneiformParserSCOL:

		default:
		}
		{
			p.SetState(1322)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		localctx = NewStmt_return_nextContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1323)
			p.Match(KuneiformParserRETURN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1324)
			p.Match(KuneiformParserNEXT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1325)
			p.Action_expr_list()
		}
		{
			p.SetState(1326)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariable_or_underscoreContext is an interface to support dynamic dispatch.
type IVariable_or_underscoreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VARIABLE() antlr.TerminalNode
	UNDERSCORE() antlr.TerminalNode

	// IsVariable_or_underscoreContext differentiates from other interfaces.
	IsVariable_or_underscoreContext()
}

type Variable_or_underscoreContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_or_underscoreContext() *Variable_or_underscoreContext {
	var p = new(Variable_or_underscoreContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable_or_underscore
	return p
}

func InitEmptyVariable_or_underscoreContext(p *Variable_or_underscoreContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable_or_underscore
}

func (*Variable_or_underscoreContext) IsVariable_or_underscoreContext() {}

func NewVariable_or_underscoreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_or_underscoreContext {
	var p = new(Variable_or_underscoreContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_variable_or_underscore

	return p
}

func (s *Variable_or_underscoreContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_or_underscoreContext) VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVARIABLE, 0)
}

func (s *Variable_or_underscoreContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNDERSCORE, 0)
}

func (s *Variable_or_underscoreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_or_underscoreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_or_underscoreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitVariable_or_underscore(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Variable_or_underscore() (localctx IVariable_or_underscoreContext) {
	localctx = NewVariable_or_underscoreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, KuneiformParserRULE_variable_or_underscore)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1330)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KuneiformParserUNDERSCORE || _la == KuneiformParserVARIABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_function_callContext is an interface to support dynamic dispatch.
type IAction_function_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAction_function_callContext differentiates from other interfaces.
	IsAction_function_callContext()
}

type Action_function_callContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAction_function_callContext() *Action_function_callContext {
	var p = new(Action_function_callContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_function_call
	return p
}

func InitEmptyAction_function_callContext(p *Action_function_callContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_function_call
}

func (*Action_function_callContext) IsAction_function_callContext() {}

func NewAction_function_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_function_callContext {
	var p = new(Action_function_callContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_action_function_call

	return p
}

func (s *Action_function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_function_callContext) CopyAll(ctx *Action_function_callContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Action_function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Normal_call_actionContext struct {
	Action_function_callContext
	namespace IIdentifierContext
	function  IIdentifierContext
}

func NewNormal_call_actionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Normal_call_actionContext {
	var p = new(Normal_call_actionContext)

	InitEmptyAction_function_callContext(&p.Action_function_callContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_function_callContext))

	return p
}

func (s *Normal_call_actionContext) GetNamespace() IIdentifierContext { return s.namespace }

func (s *Normal_call_actionContext) GetFunction() IIdentifierContext { return s.function }

func (s *Normal_call_actionContext) SetNamespace(v IIdentifierContext) { s.namespace = v }

func (s *Normal_call_actionContext) SetFunction(v IIdentifierContext) { s.function = v }

func (s *Normal_call_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Normal_call_actionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Normal_call_actionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Normal_call_actionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Normal_call_actionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Normal_call_actionContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Normal_call_actionContext) Action_expr_list() IAction_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_expr_listContext)
}

func (s *Normal_call_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitNormal_call_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Action_function_call() (localctx IAction_function_callContext) {
	localctx = NewAction_function_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, KuneiformParserRULE_action_function_call)
	var _la int

	localctx = NewNormal_call_actionContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1335)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 188, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1332)

			var _x = p.Identifier()

			localctx.(*Normal_call_actionContext).namespace = _x
		}
		{
			p.SetState(1333)
			p.Match(KuneiformParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1337)

		var _x = p.Identifier()

		localctx.(*Normal_call_actionContext).function = _x
	}
	{
		p.SetState(1338)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1340)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4371923291645933432) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&8088464660140916737) != 0) {
		{
			p.SetState(1339)
			p.Action_expr_list()
		}

	}
	{
		p.SetState(1342)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIf_then_blockContext is an interface to support dynamic dispatch.
type IIf_then_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Action_expr() IAction_exprContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllAction_statement() []IAction_statementContext
	Action_statement(i int) IAction_statementContext

	// IsIf_then_blockContext differentiates from other interfaces.
	IsIf_then_blockContext()
}

type If_then_blockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_then_blockContext() *If_then_blockContext {
	var p = new(If_then_blockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_if_then_block
	return p
}

func InitEmptyIf_then_blockContext(p *If_then_blockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_if_then_block
}

func (*If_then_blockContext) IsIf_then_blockContext() {}

func NewIf_then_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_then_blockContext {
	var p = new(If_then_blockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_if_then_block

	return p
}

func (s *If_then_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *If_then_blockContext) Action_expr() IAction_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *If_then_blockContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *If_then_blockContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *If_then_blockContext) AllAction_statement() []IAction_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_statementContext); ok {
			len++
		}
	}

	tst := make([]IAction_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_statementContext); ok {
			tst[i] = t.(IAction_statementContext)
			i++
		}
	}

	return tst
}

func (s *If_then_blockContext) Action_statement(i int) IAction_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_statementContext)
}

func (s *If_then_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_then_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_then_blockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIf_then_block(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) If_then_block() (localctx IIf_then_blockContext) {
	localctx = NewIf_then_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, KuneiformParserRULE_if_then_block)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1344)
		p.action_expr(0)
	}
	{
		p.SetState(1345)
		p.Match(KuneiformParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1349)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-3507232162117056376) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&8088464660140922885) != 0) {
		{
			p.SetState(1346)
			p.Action_statement()
		}

		p.SetState(1351)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1352)
		p.Match(KuneiformParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRangeContext is an interface to support dynamic dispatch.
type IRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAction_expr() []IAction_exprContext
	Action_expr(i int) IAction_exprContext
	RANGE() antlr.TerminalNode

	// IsRangeContext differentiates from other interfaces.
	IsRangeContext()
}

type RangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeContext() *RangeContext {
	var p = new(RangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_range
	return p
}

func InitEmptyRangeContext(p *RangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_range
}

func (*RangeContext) IsRangeContext() {}

func NewRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeContext {
	var p = new(RangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_range

	return p
}

func (s *RangeContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeContext) AllAction_expr() []IAction_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_exprContext); ok {
			len++
		}
	}

	tst := make([]IAction_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_exprContext); ok {
			tst[i] = t.(IAction_exprContext)
			i++
		}
	}

	return tst
}

func (s *RangeContext) Action_expr(i int) IAction_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_exprContext)
}

func (s *RangeContext) RANGE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRANGE, 0)
}

func (s *RangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitRange(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Range_() (localctx IRangeContext) {
	localctx = NewRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, KuneiformParserRULE_range)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1354)
		p.action_expr(0)
	}
	{
		p.SetState(1355)
		p.Match(KuneiformParserRANGE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1356)
		p.action_expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *KuneiformParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 51:
		var t *Sql_exprContext = nil
		if localctx != nil {
			t = localctx.(*Sql_exprContext)
		}
		return p.Sql_expr_Sempred(t, predIndex)

	case 56:
		var t *Action_exprContext = nil
		if localctx != nil {
			t = localctx.(*Action_exprContext)
		}
		return p.Action_expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *KuneiformParser) Sql_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 24)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *KuneiformParser) Action_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 14:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
