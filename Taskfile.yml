version: "3"

includes:
  #note: actual execute directory is the root of the project
  pb: ./api/

tasks:
  default:
    cmds:
      - task -l

  install:antlr:
    desc: Download antlr4 jar file
    cmds:
      - if [ ! -f ./pkg/sql_parser/sqlite/antlr-4.12.0-complete.jar ]; then curl -o ./pkg/sql_parser/sqlite/antlr-4.12.0-complete.jar https://www.antlr.org/download/antlr-4.12.0-complete.jar; fi

  install:deps:
    desc: Install tools required to build this app
    deps:
      - task: install:antlr
    cmds:
      - cat tools.go | grep _ | awk -F'"' '{print $2}' | xargs -tI % go install %

  build:
    desc: Build cli & kwild
    cmds:
      - task: build:cli
      - task: build:kwild

  build:cli:
    desc: Build kwil-cli
    deps: [pb:compile:v1, build:antlr]
    cmds:
      - ./scripts/build/binary kwil-cli
    generates:
      - .build/kwil-cli

  build:kwild:
    desc: Builds kwild server
    deps: [pb:compile:v1, build:antlr]
    cmds:
      - ./scripts/build/binary kwild
    generates:
      - .build/kwild

  build:antlr:
    desc: Generate antlr parser code
    deps: [install:antlr]
    cmds:
      - go generate ./pkg/sql_parser/sqlite
    sources:
      - pkg/sql_parser/sqlite/*.g4
    generates:
      - pkg/sql_parser/sqlite/*.go

  build:abi:
    desc: Builds Golang bindings for EVM contract ABIs
    internal: true
    cmds:
      - abigen --abi ./pkg/chain/contracts/escrow/evm/abi/escrow.json --bin ./pkg/chain/contracts/escrow/evm/abi/escrow.bin --pkg abi --type Escrow --out ./pkg/chain/contracts/escrow/evm/abi/escrow.go
      - abigen --abi ./pkg/chain/contracts/token/evm/abi/erc20.json --bin ./pkg/chain/contracts/token/evm/abi/erc20.bin --pkg abi --type Erc20 --out ./pkg/chain/contracts/token/evm/abi/erc20.go
    sources:
      - pkg/chain/contracts/*/evm/abi/*.json
      - pkg/chain/contracts/*/evm/abi/*.bin
    generates:
      - pkg/chain/contracts/*/evm/abi/*.go

  # ************ docker ************
  docker:kwild:
    desc: Build the docker image for the kwild
    deps: [ pb:compile:v1 ]
    cmds:
      # pass any args to build debug image, e.g. task docker:kwild -- debug
      - ./scripts/build/docker kwild  {{.VARIANT}}

  # ************ dev ************
  dev:up:
    desc: Start the dev environment
    deps:
      - task: docker:kwild
        vars: {VARIANT: "shell"}
    cmds:
      - go test ./test/acceptance/ -timeout 12h -dev -v

  # ************ test ************
  test:act:
    desc: Run acceptance tests
    deps: [ docker:kwild ]
    cmds:
      - go test ./test/acceptance/ -v

  test:unit:
    desc: Run unit tests
    cmds:
      - go test `go list ./... | grep -v /kwil-db\/test/` -count=1
