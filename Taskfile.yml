version: "3"

includes:
  #note: actual execute directory is the root of the project
  pb: ./api/

tasks:
  default:
    cmds:
      - task -l

  install:deps:
    aliases: [tools]
    desc: Install tools required to build this app
    cmds:
      - grep _ tools.txt | awk -F'"' '{print $2}' | xargs -tI % go install %

  vendor:
    desc: Generate vendor
    deps:
      - task: vendor:clean
    cmds:
      - go mod vendor

  vendor:clean:
    desc: Clean vendor
    cmds:
      - rm -rf ./vendor

  git:init:
    desc: Initialize git submodules
    cmds:
      - git submodule update --init

  git:sync:
    desc: Sync git submodules to required revisions
    cmds:
      - git submodule update

  git:advance:
    desc: Advance git submodules to latest main revision
    cmds:
      - git submodule update --remote

  init:
    desc: Initialize the project
    deps: [install:deps, git:init]
    cmds:
      - go mod download

  fmt:
    desc: Format the code
    cmds:
      - goimports -format-only -w ./cmd ./internal ./pkg ./test

  lint:
    desc: Lint with golangci-lint
    cmds:
        - golangci-lint run -c .golangci.yml --skip-dirs ./api/protobuf

  build:
    desc: Build cli, admin & kwild
    cmds:
      - task: build:cli
      - task: build:kwild
      - task: build:admin

  build:cli:
    desc: Build kwil-cli
    cmds:
      - ./scripts/build/binary kwil-cli #-mod=mod
    generates:
      - .build/kwil-cli

  build:admin:
    desc: Build kwil-admin
    cmds:
      - ./scripts/build/binary kwil-admin
    generates:
      - .build/kwil-admin

  build:kwild:
    desc: Builds kwild server
    cmds:
      - ./scripts/build/binary kwild #-mod=mod
    generates:
      - .build/kwild

  # ************ docker ************
  build:docker:
    desc: Build the docker image for the kwild, support extra args to specify image flavor
    cmds:
      - task: vendor
      # pass any args to build flavored image, e.g. task build:docker -- debug
      # NOTE: this is kind hack/messy, since `./scripts/build/docker` only care first 2 args
      # {{.CLI_ARGS}} is a special variable that will be replaced with the CLI args
      # {{.VARIANT}} is a variable other tasks can set, it will have effect if {{.CLI_ARGS}} is empty
      # !! if parent task(which has deps on this task) has {{.CLI_ARGS}}, only this child task get the {{.CLI_ARGS}}
      - ./scripts/build/docker kwild {{.CLI_ARGS}} {{.VARIANT}}
      - task: vendor:clean

  publish:dockerhub:
    desc: Publish docker image to dockerhub
    cmds:
      - task: vendor
      - TAG={{.TAG}} ./scripts/publish/dockerhub
      - task: vendor:clean
    requires:
      vars: [TAG]

  # ************ dev ************
  dev:up:
    desc: Start the dev environment
    deps:
      - task: build:docker
        vars: {VARIANT: 'shell'}
    cmds:
      - task dev:up:nb

  dev:up:debug:
    desc: Start the dev environment
    deps:
      - task: build:docker
        vars: { VARIANT: 'debug' }
    cmds:
      - task dev:up:nb

  dev:up:nb:
    desc: Start the dev environment without rebuilding docker image
    env:
      # NOTE: this timeout should be long enough to attach to debugger
      KACT_WAIT_TIMEOUT: 20s
    cmds:
      - go test ./test/acceptance/ -timeout 12h -dev -v

  dev:testnet:up:
    desc: Start the dev environment(with testnet)
    deps:
      - task: build:docker
        vars: { VARIANT: 'shell' }
    cmds:
      - task dev:testnet:up:nb

  dev:testnet:up:nb:
    desc: Start the dev environment(with testnet) without rebuilding docker image
    cmds:
      - go test ./test/integration/ -timeout 12h -dev -v

  # ************ test ************
  # test with build:docker task support passing CLI_ARGS to go test, e.g. task test:act -- -debug
  # but this CLI_ARGS will only be used by `build:docker`
  test:act:
    desc: Run acceptance tests
    deps:
      - task: build:cli
      - task: build:admin
      - task: build:docker
    cmds:
      - task test:act:nb

  # *:nb task support passing CLI_ARGS to go test, e.g. task test:act:nb -- -remote
  # this CLI_ARGS will be used by `go test`
  test:act:nb:
    desc: Run acceptance tests without building docker image
    cmds:
      - go test ./test/acceptance/ -count=1 -v {{.CLI_ARGS}}

  test:unit:
    desc: Run unit tests
    cmds:
      - go test $(go list ./... | grep -v /kwil-db\/test/) -count=1

  test:unit:race:
      desc: Run unit tests with race
      cmds:
        - task vendor
        - go test `go list ./... | grep -v /kwil-db\/test/` -count=1 -race
        - task vendor:clean

  test:it:
    desc: Run integration tests
    deps:
      - task: build:cli
      - task: build:admin
      - task: build:docker
    cmds:
      - task test:it:nb

  test:it:nb:
    desc: Run integration tests
    cmds:
      - go test -count=1 -timeout 0 ./test/integration/ -v {{.CLI_ARGS}}
