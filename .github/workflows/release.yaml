name: Release

on:
  release:
    types: [published]

jobs:
  build-push-docker-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.KWIL_MACH_SECRET }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'
          repo-token: ${{ secrets.KWIL_MACH_SECRET }}

      - name: Install Taskfile
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.KWIL_MACH_SECRET }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.0'
          cache: true

      - name: Install dependencies
        run: |
          go version
          go mod download
          task deps

      - name: Compile Protobuf
        run: |
          task pb:compile:all

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: manual git tag
        run: echo "GIT_TAG=`echo $(git describe --match 'v[0-9]*' --dirty --always --tags | sed 's/^v//')`" >> $GITHUB_ENV

      - name: manual build time
        run: echo "BUILD_TIME=`TZ=UTC date -u --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +"%Y-%m-%dT%H:%M:%SZ"`" >> $GITHUB_ENV

      - name: Cache Docker layers for kwild
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-kwild
          key: ${{ runner.os }}-buildx-kwild-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-kwild

      - name: Build kwild image
        id: docker_build_kwild
        env:

        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            git_commit=${{ github.sha }}
            version=${{ env.GIT_TAG }}
            build_time=${{ env.BUILD_TIME }}
          file: ./build/package/docker/kwild.dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_KWILD_ECR }}:${{ env.GIT_TAG }},${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_KWILD_ECR }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache-kwild
          cache-to: type=local,dest=/tmp/.buildx-cache-kwild-new

      - name: Cache Docker layers for kwil-gateway
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-kgw
          key: ${{ runner.os }}-buildx-kgw-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-kgw

      - name: Build kwil-gateway image
        id: docker_build_kgw
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            git_commit=${{ github.sha }}
            version=${{ env.GIT_TAG }}
            build_time=${{ env.BUILD_TIME }}
          file: ./build/package/docker/kwil-gateway.dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_KWIL_GATEWAY_ECR }}:${{ env.GIT_TAG }},${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_KWIL_GATEWAY_ECR }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache-kgw
          cache-to: type=local,dest=/tmp/.buildx-cache-kgw-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-kwild
          mv /tmp/.buildx-cache-kwild-new /tmp/.buildx-cache-kwild
          rm -rf /tmp/.buildx-cache-kgw
          mv /tmp/.buildx-cache-kgw-new /tmp/.buildx-cache-kgw

  deploy-to-eks:
    name: Deploy new version to EKS
    runs-on: ubuntu-latest
    needs: build-push-docker-image

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.KWIL_MACH_SECRET }}

      - name: manual git tag
        run: echo "GIT_TAG=`echo $(git describe --match 'v[0-9]*' --dirty --always --tags | sed 's/^v//')`" >> $GITHUB_ENV

      - name: deploy by release type to different eks cluster
        run: |
          cluster="staging"
          echo ${{ github.event.release }}
          echo ${{ github.event.release.prerelease }}
          echo ${{ github.event.release.tag_name }}
          echo "will deploy ${{ env.GIT_TAG }} to eks cluster ${cluster}"


#
#          if [[ -n '${{ github.event.release }}' ]]; then  # release
#          echo '::set-output name=release::${{ github.event.release.tag_name }}'
#          if [[ '${{ github.event.release.prerelease }}' == 'true' ]]; then
#          echo '::set-output name=beta::1'
#          else
#          echo '::set-output name=beta::'
#          fi
#          echo "deploy to eks cluster"
