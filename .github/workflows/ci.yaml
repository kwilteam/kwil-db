name: CI

on:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
  push:
    branches:
      - dev
      - main

jobs:
  test:
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    if: ${{ !github.event.pull_request.draft }} # only run on non-draft PRs

    services:
      postgres:
        image: jchappelow/kwil-postgres:latest
        env:
          POSTGRES_USER: kwild
          POSTGRES_PASSWORD: kwild
          POSTGRES_PORT: 5432
          POSTGRES_DB: kwil_test_db
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # shared setup for all tests
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.KWIL_MACH_SECRET }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '23.4'
          repo-token: ${{ secrets.KWIL_MACH_SECRET }}

      - name: Install Taskfile
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.KWIL_MACH_SECRET }}

      #ubuntu-latest has go 1.21 installed https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#go
      #self-hosted also has go 1.21 installed
      #the default behavior here will load pre-installed go version
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          check-latest: true
          cache: false

      - name: Install dependencies
        env:
          GH_ACCESS_TOKEN: ${{ secrets.KWIL_MACH_SECRET }}
        run: |
          go version
          git config --global url."https://${GH_ACCESS_TOKEN}:x-oauth-basic@github.com/kwilteam/".insteadOf "https://github.com/kwilteam/"
          task install:deps

      # checks
      - name: Check tidiness of go.mod and go.sum
        run: |
          ./scripts/mods/check_tidy

      - name: Ensure generated protobuf Go source is up-to-date
        run: |
          ./scripts/proto/check_up

      - name: Ensure generated swagger Go code is up-to-date
        run: |
          ./scripts/swagger/check_up

      - name: Compile packages, apps, and specs
        run: | # enter workspace mode to do this on one line
          go work init && go work use . ./parse ./test ./core
          go build -mod=readonly ./... ./parse/... ./core/... ./test/specifications/

      - name: Lint
        uses: golangci/golangci-lint-action@3cfe3a4abbb849e10058ce4af15d205b6da42804
        with:
          install-mode: "binary"
          version: "latest"
          skip-cache: true
          args: ./... ./core/... ./test/... ./parse/... --timeout=10m --config=.golangci.yml --skip-dirs ./core/rpc/protobuf

      # unit test
      - name: Run unit test
        run: |
          task test:unit

      # integration test
      - name: Generate go vendor
        #for faster builds and private repos, need to run this after pb:compile:v1
        run: |
          task vendor

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers for kwild
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-kwild
          #key: ${{ runner.os }}-buildx-kwild-${{ github.sha }}
          key: ${{ runner.os }}-buildx-kwild
          restore-keys: |
            ${{ runner.os }}-buildx-kwild

      - name: manual git tag
        run: |
          version=`echo ${{ github.sha }} | cut -c 1-7`
          echo "GIT_TAG=$version" >> $GITHUB_ENV
        #run: echo "GIT_TAG=`git describe --match 'v[0-9]*' --dirty --always --tags | sed 's/^v//'`" >> $GITHUB_ENV

      - name: manual build time
        run: |
          build_time=`TZ=UTC date -u --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +"%Y-%m-%dT%H:%M:%SZ"`
          echo "BUILD_TIME=$build_time" >> $GITHUB_ENV

      - name: Build cli binaries
        run: |
          task build:cli
          task build:admin

      - name: Pull math extension docker image
        run: |
          docker pull kwilbrennan/extensions-math:multi-arch --platform linux/amd64

      - name: Pull kgw repo & create vendor
        # we only pull the repo, not build the image, because we want to use the cache
        # provided by the docker/build-push-action
        # vendor is used to bypass private repo issues
        # TODO: in go 1.22, there is a "go work vendor" that we can try instead of GOWORK=off
        run: |
          rm -rf /tmp/kgw
          git clone https://github.com/kwilteam/kgw.git /tmp/kgw
          cd /tmp/kgw
          GOWORK=off go mod vendor
          cd -

      - name: Build kgw image
        id: docker_build_kgw
        uses: docker/build-push-action@v5
        with:
          context: /tmp/kgw
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          file: /tmp/kgw/Dockerfile
          push: false
          tags: kgw:latest
          cache-from: type=local,src=/tmp/.buildx-cache-kgw
          cache-to: type=local,dest=/tmp/.buildx-cache-kgw-new

      - name: Build kwild image
        id: docker_build_kwild
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            git_commit=${{ github.sha }}
            version=${{ env.GIT_TAG }}
            build_time=${{ env.BUILD_TIME }}
          file: ./build/package/docker/kwild.dockerfile
          push: false
          tags: kwild:latest
          cache-from: type=local,src=/tmp/.buildx-cache-kwild
          cache-to: type=local,dest=/tmp/.buildx-cache-kwild-new

      # maybe no need
      - name: Run acceptance test
        run: |
          echo "UID=$(id -u)" >> test/acceptance/.env
          echo "GID=$(id -g)" >> test/acceptance/.env
          cp test/acceptance/docker-compose.override.yml.example test/acceptance/docker-compose.override.yml
          echo "KACT_DOCKER_COMPOSE_OVERRIDE_FILE=docker-compose.override.yml" >> test/acceptance/.env
          task test:act:nb

      - name: Run integration test
        run: |
          echo "UID=$(id -u)" >> test/integration/.env
          echo "GID=$(id -g)" >> test/integration/.env
          cp test/integration/docker-compose.override.yml.example test/integration/docker-compose.override.yml
          echo "KIT_DOCKER_COMPOSE_OVERRIDE_FILE=docker-compose.override.yml" >> test/integration/.env
          task test:it:nb:all

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-kwild
          mv /tmp/.buildx-cache-kwild-new /tmp/.buildx-cache-kwild
          rm -rf /tmp/.buildx-cache-kgw
            mv /tmp/.buildx-cache-kgw-new /tmp/.buildx-cache-kgw
