// Code generated from KuneiformParser.g4 by ANTLR 4.13.1. DO NOT EDIT.

package gen // KuneiformParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type KuneiformParser struct {
	*antlr.BaseParser
}

var KuneiformParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func kuneiformparserParserInit() {
	staticData := &KuneiformParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'{'", "'}'", "'['", "']'", "':'", "';'", "'('", "')'", "','", "'@'",
		"'!'", "'.'", "'||'", "'*'", "'='", "'=='", "'#'", "'$'", "'%'", "'+'",
		"'-'", "'/'", "", "'<'", "'<='", "'>'", "'>='", "'::'", "'_'", "':='",
		"'..'", "'\"'", "'database'", "'use'", "'table'", "'action'", "'procedure'",
		"'public'", "'private'", "'view'", "'owner'", "'foreign'", "'primary'",
		"'key'", "'on'", "'do'", "'unique'", "'cascade'", "'restrict'", "'set'",
		"'default'", "'null'", "'delete'", "'update'", "'references'", "'ref'",
		"'not'", "'index'", "'and'", "'or'", "'like'", "'ilike'", "'in'", "'between'",
		"'is'", "'exists'", "'all'", "'any'", "'join'", "'left'", "'right'",
		"'inner'", "'as'", "'asc'", "'desc'", "'limit'", "'offset'", "'order'",
		"'by'", "'group'", "'having'", "'returns'", "'no'", "'with'", "'case'",
		"'when'", "'then'", "'end'", "'distinct'", "'from'", "'where'", "'collate'",
		"'select'", "'insert'", "'values'", "'full'", "'union'", "'intersect'",
		"'except'", "'nulls'", "'first'", "'last'", "'returning'", "'into'",
		"'conflict'", "'nothing'", "'for'", "'if'", "'elseif'", "'else'", "'break'",
		"'return'", "'next'", "", "'true'", "'false'", "", "", "", "'on_update'",
		"'on_delete'", "'set_default'", "'set_null'", "'no_action'",
	}
	staticData.SymbolicNames = []string{
		"", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COL", "SCOL", "LPAREN",
		"RPAREN", "COMMA", "AT", "EXCL", "PERIOD", "CONCAT", "STAR", "EQUALS",
		"EQUATE", "HASH", "DOLLAR", "MOD", "PLUS", "MINUS", "DIV", "NEQ", "LT",
		"LTE", "GT", "GTE", "TYPE_CAST", "UNDERSCORE", "ASSIGN", "RANGE", "DOUBLE_QUOTE",
		"DATABASE", "USE", "TABLE", "ACTION", "PROCEDURE", "PUBLIC", "PRIVATE",
		"VIEW", "OWNER", "FOREIGN", "PRIMARY", "KEY", "ON", "DO", "UNIQUE",
		"CASCADE", "RESTRICT", "SET", "DEFAULT", "NULL", "DELETE", "UPDATE",
		"REFERENCES", "REF", "NOT", "INDEX", "AND", "OR", "LIKE", "ILIKE", "IN",
		"BETWEEN", "IS", "EXISTS", "ALL", "ANY", "JOIN", "LEFT", "RIGHT", "INNER",
		"AS", "ASC", "DESC", "LIMIT", "OFFSET", "ORDER", "BY", "GROUP", "HAVING",
		"RETURNS", "NO", "WITH", "CASE", "WHEN", "THEN", "END", "DISTINCT",
		"FROM", "WHERE", "COLLATE", "SELECT", "INSERT", "VALUES", "FULL", "UNION",
		"INTERSECT", "EXCEPT", "NULLS", "FIRST", "LAST", "RETURNING", "INTO",
		"CONFLICT", "NOTHING", "FOR", "IF", "ELSEIF", "ELSE", "BREAK", "RETURN",
		"NEXT", "STRING_", "TRUE", "FALSE", "DIGITS_", "BINARY_", "LEGACY_FOREIGN_KEY",
		"LEGACY_ON_UPDATE", "LEGACY_ON_DELETE", "LEGACY_SET_DEFAULT", "LEGACY_SET_NULL",
		"LEGACY_NO_ACTION", "IDENTIFIER", "VARIABLE", "CONTEXTUAL_VARIABLE",
		"HASH_IDENTIFIER", "WS", "BLOCK_COMMENT", "LINE_COMMENT",
	}
	staticData.RuleNames = []string{
		"schema_entry", "sql_entry", "action_entry", "procedure_entry", "literal",
		"identifier", "identifier_list", "type", "type_cast", "variable", "variable_list",
		"schema", "annotation", "database_declaration", "use_declaration", "table_declaration",
		"column_def", "index_def", "foreign_key_def", "foreign_key_action",
		"type_list", "named_type_list", "typed_variable_list", "constraint",
		"access_modifier", "action_declaration", "procedure_declaration", "foreign_procedure_declaration",
		"procedure_return", "sql", "sql_statement", "common_table_expression",
		"select_statement", "compound_operator", "ordering_term", "select_core",
		"relation", "join", "result_column", "update_statement", "update_set_clause",
		"insert_statement", "upsert_clause", "delete_statement", "sql_expr",
		"when_then_clause", "sql_expr_list", "sql_function_call", "action_block",
		"action_statement", "procedure_block", "procedure_expr", "procedure_expr_list",
		"proc_statement", "variable_or_underscore", "procedure_function_call",
		"if_then_block", "range",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 131, 1133, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1,
		3, 1, 4, 1, 4, 3, 4, 131, 8, 4, 1, 4, 1, 4, 3, 4, 135, 8, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 143, 8, 4, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5,
		149, 8, 5, 1, 6, 1, 6, 1, 6, 5, 6, 154, 8, 6, 10, 6, 12, 6, 157, 9, 6,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 165, 8, 7, 1, 7, 1, 7, 3, 7,
		169, 8, 7, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 5, 10, 179,
		8, 10, 10, 10, 12, 10, 182, 9, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 5, 11, 190, 8, 11, 10, 11, 12, 11, 193, 9, 11, 1, 12, 1, 12, 1, 12,
		1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 5, 12, 204, 8, 12, 10, 12, 12,
		12, 207, 9, 12, 3, 12, 209, 8, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14,
		5, 14, 227, 8, 14, 10, 14, 12, 14, 230, 9, 14, 1, 14, 1, 14, 3, 14, 234,
		8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 15, 1, 15, 3, 15, 248, 8, 15, 5, 15, 250, 8, 15, 10, 15, 12, 15,
		253, 9, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 5, 16, 260, 8, 16, 10, 16,
		12, 16, 263, 9, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1,
		18, 1, 18, 3, 18, 274, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18,
		1, 18, 1, 18, 1, 18, 5, 18, 285, 8, 18, 10, 18, 12, 18, 288, 9, 18, 1,
		19, 1, 19, 1, 19, 3, 19, 293, 8, 19, 1, 19, 1, 19, 1, 19, 3, 19, 298, 8,
		19, 3, 19, 300, 8, 19, 1, 19, 3, 19, 303, 8, 19, 1, 19, 1, 19, 1, 19, 3,
		19, 308, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 314, 8, 19, 1, 19, 1,
		19, 1, 19, 3, 19, 319, 8, 19, 1, 19, 3, 19, 322, 8, 19, 1, 20, 1, 20, 1,
		20, 5, 20, 327, 8, 20, 10, 20, 12, 20, 330, 9, 20, 1, 21, 1, 21, 1, 21,
		1, 21, 1, 21, 5, 21, 337, 8, 21, 10, 21, 12, 21, 340, 9, 21, 1, 22, 1,
		22, 1, 22, 1, 22, 1, 22, 1, 22, 5, 22, 348, 8, 22, 10, 22, 12, 22, 351,
		9, 22, 1, 23, 1, 23, 1, 23, 3, 23, 356, 8, 23, 1, 23, 1, 23, 1, 23, 1,
		23, 3, 23, 362, 8, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 368, 8, 23, 1,
		24, 1, 24, 1, 25, 5, 25, 373, 8, 25, 10, 25, 12, 25, 376, 9, 25, 1, 25,
		1, 25, 1, 25, 1, 25, 3, 25, 382, 8, 25, 1, 25, 1, 25, 4, 25, 386, 8, 25,
		11, 25, 12, 25, 387, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 5, 26, 395, 8,
		26, 10, 26, 12, 26, 398, 9, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 404,
		8, 26, 1, 26, 1, 26, 4, 26, 408, 8, 26, 11, 26, 12, 26, 409, 1, 26, 3,
		26, 413, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 3, 27, 425, 8, 27, 1, 27, 1, 27, 3, 27, 429, 8, 27, 1, 28,
		1, 28, 3, 28, 433, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1,
		28, 1, 28, 3, 28, 443, 8, 28, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30,
		1, 30, 5, 30, 452, 8, 30, 10, 30, 12, 30, 455, 9, 30, 3, 30, 457, 8, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 463, 8, 30, 1, 31, 1, 31, 1, 31, 1,
		31, 1, 31, 5, 31, 470, 8, 31, 10, 31, 12, 31, 473, 9, 31, 3, 31, 475, 8,
		31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32,
		5, 32, 487, 8, 32, 10, 32, 12, 32, 490, 9, 32, 1, 32, 1, 32, 1, 32, 1,
		32, 1, 32, 5, 32, 497, 8, 32, 10, 32, 12, 32, 500, 9, 32, 3, 32, 502, 8,
		32, 1, 32, 1, 32, 3, 32, 506, 8, 32, 1, 32, 1, 32, 3, 32, 510, 8, 32, 1,
		33, 1, 33, 3, 33, 514, 8, 33, 1, 33, 1, 33, 3, 33, 518, 8, 33, 1, 34, 1,
		34, 3, 34, 522, 8, 34, 1, 34, 1, 34, 3, 34, 526, 8, 34, 1, 35, 1, 35, 3,
		35, 530, 8, 35, 1, 35, 1, 35, 1, 35, 5, 35, 535, 8, 35, 10, 35, 12, 35,
		538, 9, 35, 1, 35, 1, 35, 1, 35, 5, 35, 543, 8, 35, 10, 35, 12, 35, 546,
		9, 35, 3, 35, 548, 8, 35, 1, 35, 1, 35, 3, 35, 552, 8, 35, 1, 35, 1, 35,
		1, 35, 1, 35, 1, 35, 3, 35, 559, 8, 35, 3, 35, 561, 8, 35, 1, 36, 1, 36,
		3, 36, 565, 8, 36, 1, 36, 3, 36, 568, 8, 36, 1, 36, 1, 36, 1, 36, 1, 36,
		3, 36, 574, 8, 36, 1, 36, 3, 36, 577, 8, 36, 1, 36, 1, 36, 3, 36, 581,
		8, 36, 1, 36, 3, 36, 584, 8, 36, 3, 36, 586, 8, 36, 1, 37, 1, 37, 1, 37,
		1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 3, 38, 596, 8, 38, 1, 38, 3, 38, 599,
		8, 38, 1, 38, 1, 38, 1, 38, 3, 38, 604, 8, 38, 1, 38, 3, 38, 607, 8, 38,
		1, 39, 1, 39, 1, 39, 3, 39, 612, 8, 39, 1, 39, 3, 39, 615, 8, 39, 1, 39,
		1, 39, 1, 39, 1, 39, 5, 39, 621, 8, 39, 10, 39, 12, 39, 624, 9, 39, 1,
		39, 1, 39, 1, 39, 5, 39, 629, 8, 39, 10, 39, 12, 39, 632, 9, 39, 3, 39,
		634, 8, 39, 1, 39, 1, 39, 3, 39, 638, 8, 39, 1, 40, 1, 40, 1, 40, 1, 40,
		1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 648, 8, 41, 1, 41, 3, 41, 651, 8, 41,
		1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 657, 8, 41, 1, 41, 1, 41, 1, 41, 1,
		41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 5, 41, 668, 8, 41, 10, 41, 12, 41,
		671, 9, 41, 1, 41, 3, 41, 674, 8, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42,
		1, 42, 1, 42, 3, 42, 683, 8, 42, 3, 42, 685, 8, 42, 1, 42, 1, 42, 1, 42,
		1, 42, 1, 42, 1, 42, 1, 42, 5, 42, 694, 8, 42, 10, 42, 12, 42, 697, 9,
		42, 1, 42, 1, 42, 3, 42, 701, 8, 42, 3, 42, 703, 8, 42, 1, 43, 1, 43, 1,
		43, 1, 43, 3, 43, 709, 8, 43, 1, 43, 3, 43, 712, 8, 43, 1, 43, 1, 43, 3,
		43, 716, 8, 43, 1, 44, 1, 44, 1, 44, 3, 44, 721, 8, 44, 1, 44, 1, 44, 3,
		44, 725, 8, 44, 1, 44, 1, 44, 3, 44, 729, 8, 44, 1, 44, 1, 44, 1, 44, 3,
		44, 734, 8, 44, 1, 44, 1, 44, 3, 44, 738, 8, 44, 1, 44, 1, 44, 1, 44, 1,
		44, 3, 44, 744, 8, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 750, 8, 44, 1,
		44, 4, 44, 753, 8, 44, 11, 44, 12, 44, 754, 1, 44, 1, 44, 3, 44, 759, 8,
		44, 1, 44, 1, 44, 1, 44, 3, 44, 764, 8, 44, 1, 44, 3, 44, 767, 8, 44, 1,
		44, 1, 44, 1, 44, 1, 44, 3, 44, 773, 8, 44, 3, 44, 775, 8, 44, 1, 44, 1,
		44, 1, 44, 1, 44, 1, 44, 3, 44, 782, 8, 44, 1, 44, 1, 44, 1, 44, 1, 44,
		3, 44, 788, 8, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1,
		44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44,
		1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3,
		44, 818, 8, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 824, 8, 44, 1, 44, 1,
		44, 3, 44, 828, 8, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 834, 8, 44, 1,
		44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 841, 8, 44, 1, 44, 1, 44, 1, 44,
		1, 44, 1, 44, 1, 44, 3, 44, 849, 8, 44, 5, 44, 851, 8, 44, 10, 44, 12,
		44, 854, 9, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46,
		5, 46, 864, 8, 46, 10, 46, 12, 46, 867, 9, 46, 1, 47, 1, 47, 1, 47, 3,
		47, 872, 8, 47, 1, 47, 1, 47, 3, 47, 876, 8, 47, 1, 47, 1, 47, 1, 47, 1,
		47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 888, 8, 47, 1, 47,
		1, 47, 3, 47, 892, 8, 47, 1, 48, 1, 48, 1, 48, 5, 48, 897, 8, 48, 10, 48,
		12, 48, 900, 9, 48, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 906, 8, 49, 1, 49,
		1, 49, 1, 49, 1, 49, 3, 49, 912, 8, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1,
		49, 3, 49, 919, 8, 49, 1, 49, 3, 49, 922, 8, 49, 1, 50, 5, 50, 925, 8,
		50, 10, 50, 12, 50, 928, 9, 50, 1, 51, 1, 51, 1, 51, 3, 51, 933, 8, 51,
		1, 51, 1, 51, 3, 51, 937, 8, 51, 1, 51, 1, 51, 3, 51, 941, 8, 51, 1, 51,
		1, 51, 3, 51, 945, 8, 51, 1, 51, 1, 51, 3, 51, 949, 8, 51, 1, 51, 1, 51,
		1, 51, 1, 51, 3, 51, 955, 8, 51, 1, 51, 1, 51, 3, 51, 959, 8, 51, 1, 51,
		1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1,
		51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 981,
		8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 987, 8, 51, 1, 51, 1, 51, 1,
		51, 3, 51, 992, 8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51,
		1000, 8, 51, 5, 51, 1002, 8, 51, 10, 51, 12, 51, 1005, 9, 51, 1, 52, 1,
		52, 1, 52, 5, 52, 1010, 8, 52, 10, 52, 12, 52, 1013, 9, 52, 1, 53, 1, 53,
		1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 5, 53, 1022, 8, 53, 10, 53, 12, 53,
		1025, 9, 53, 1, 53, 1, 53, 3, 53, 1029, 8, 53, 1, 53, 1, 53, 1, 53, 1,
		53, 1, 53, 3, 53, 1036, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53,
		1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1048, 8, 53, 1, 53, 1, 53, 5, 53, 1052,
		8, 53, 10, 53, 12, 53, 1055, 9, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53,
		1, 53, 5, 53, 1063, 8, 53, 10, 53, 12, 53, 1066, 9, 53, 1, 53, 1, 53, 1,
		53, 5, 53, 1071, 8, 53, 10, 53, 12, 53, 1074, 9, 53, 1, 53, 3, 53, 1077,
		8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1087,
		8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1095, 8, 53, 1,
		54, 1, 54, 1, 55, 1, 55, 1, 55, 3, 55, 1102, 8, 55, 1, 55, 1, 55, 1, 55,
		1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 3, 55, 1113, 8, 55, 1, 55, 1,
		55, 3, 55, 1117, 8, 55, 1, 56, 1, 56, 1, 56, 5, 56, 1122, 8, 56, 10, 56,
		12, 56, 1125, 9, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 0,
		2, 88, 102, 58, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
		30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64,
		66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100,
		102, 104, 106, 108, 110, 112, 114, 0, 16, 1, 0, 20, 21, 1, 0, 115, 116,
		1, 0, 126, 127, 3, 0, 43, 43, 47, 47, 58, 58, 1, 0, 55, 56, 1, 0, 38, 41,
		1, 0, 74, 75, 1, 0, 101, 102, 2, 0, 70, 72, 96, 96, 2, 0, 20, 21, 57, 57,
		2, 0, 15, 16, 23, 27, 1, 0, 61, 62, 3, 0, 14, 14, 19, 19, 22, 22, 2, 0,
		11, 11, 20, 21, 1, 0, 59, 60, 2, 0, 29, 29, 126, 126, 1292, 0, 116, 1,
		0, 0, 0, 2, 119, 1, 0, 0, 0, 4, 122, 1, 0, 0, 0, 6, 125, 1, 0, 0, 0, 8,
		142, 1, 0, 0, 0, 10, 148, 1, 0, 0, 0, 12, 150, 1, 0, 0, 0, 14, 158, 1,
		0, 0, 0, 16, 170, 1, 0, 0, 0, 18, 173, 1, 0, 0, 0, 20, 175, 1, 0, 0, 0,
		22, 183, 1, 0, 0, 0, 24, 194, 1, 0, 0, 0, 26, 212, 1, 0, 0, 0, 28, 216,
		1, 0, 0, 0, 30, 239, 1, 0, 0, 0, 32, 256, 1, 0, 0, 0, 34, 264, 1, 0, 0,
		0, 36, 273, 1, 0, 0, 0, 38, 299, 1, 0, 0, 0, 40, 323, 1, 0, 0, 0, 42, 331,
		1, 0, 0, 0, 44, 341, 1, 0, 0, 0, 46, 361, 1, 0, 0, 0, 48, 369, 1, 0, 0,
		0, 50, 374, 1, 0, 0, 0, 52, 396, 1, 0, 0, 0, 54, 418, 1, 0, 0, 0, 56, 430,
		1, 0, 0, 0, 58, 444, 1, 0, 0, 0, 60, 456, 1, 0, 0, 0, 62, 464, 1, 0, 0,
		0, 64, 482, 1, 0, 0, 0, 66, 517, 1, 0, 0, 0, 68, 519, 1, 0, 0, 0, 70, 527,
		1, 0, 0, 0, 72, 585, 1, 0, 0, 0, 74, 587, 1, 0, 0, 0, 76, 606, 1, 0, 0,
		0, 78, 608, 1, 0, 0, 0, 80, 639, 1, 0, 0, 0, 82, 643, 1, 0, 0, 0, 84, 675,
		1, 0, 0, 0, 86, 704, 1, 0, 0, 0, 88, 774, 1, 0, 0, 0, 90, 855, 1, 0, 0,
		0, 92, 860, 1, 0, 0, 0, 94, 891, 1, 0, 0, 0, 96, 898, 1, 0, 0, 0, 98, 921,
		1, 0, 0, 0, 100, 926, 1, 0, 0, 0, 102, 958, 1, 0, 0, 0, 104, 1006, 1, 0,
		0, 0, 106, 1094, 1, 0, 0, 0, 108, 1096, 1, 0, 0, 0, 110, 1116, 1, 0, 0,
		0, 112, 1118, 1, 0, 0, 0, 114, 1128, 1, 0, 0, 0, 116, 117, 3, 22, 11, 0,
		117, 118, 5, 0, 0, 1, 118, 1, 1, 0, 0, 0, 119, 120, 3, 58, 29, 0, 120,
		121, 5, 0, 0, 1, 121, 3, 1, 0, 0, 0, 122, 123, 3, 96, 48, 0, 123, 124,
		5, 0, 0, 1, 124, 5, 1, 0, 0, 0, 125, 126, 3, 100, 50, 0, 126, 127, 5, 0,
		0, 1, 127, 7, 1, 0, 0, 0, 128, 143, 5, 114, 0, 0, 129, 131, 7, 0, 0, 0,
		130, 129, 1, 0, 0, 0, 130, 131, 1, 0, 0, 0, 131, 132, 1, 0, 0, 0, 132,
		143, 5, 117, 0, 0, 133, 135, 7, 0, 0, 0, 134, 133, 1, 0, 0, 0, 134, 135,
		1, 0, 0, 0, 135, 136, 1, 0, 0, 0, 136, 137, 5, 117, 0, 0, 137, 138, 5,
		12, 0, 0, 138, 143, 5, 117, 0, 0, 139, 143, 7, 1, 0, 0, 140, 143, 5, 52,
		0, 0, 141, 143, 5, 118, 0, 0, 142, 128, 1, 0, 0, 0, 142, 130, 1, 0, 0,
		0, 142, 134, 1, 0, 0, 0, 142, 139, 1, 0, 0, 0, 142, 140, 1, 0, 0, 0, 142,
		141, 1, 0, 0, 0, 143, 9, 1, 0, 0, 0, 144, 145, 5, 32, 0, 0, 145, 146, 5,
		125, 0, 0, 146, 149, 5, 32, 0, 0, 147, 149, 5, 125, 0, 0, 148, 144, 1,
		0, 0, 0, 148, 147, 1, 0, 0, 0, 149, 11, 1, 0, 0, 0, 150, 155, 3, 10, 5,
		0, 151, 152, 5, 9, 0, 0, 152, 154, 3, 10, 5, 0, 153, 151, 1, 0, 0, 0, 154,
		157, 1, 0, 0, 0, 155, 153, 1, 0, 0, 0, 155, 156, 1, 0, 0, 0, 156, 13, 1,
		0, 0, 0, 157, 155, 1, 0, 0, 0, 158, 164, 5, 125, 0, 0, 159, 160, 5, 7,
		0, 0, 160, 161, 5, 117, 0, 0, 161, 162, 5, 9, 0, 0, 162, 163, 5, 117, 0,
		0, 163, 165, 5, 8, 0, 0, 164, 159, 1, 0, 0, 0, 164, 165, 1, 0, 0, 0, 165,
		168, 1, 0, 0, 0, 166, 167, 5, 3, 0, 0, 167, 169, 5, 4, 0, 0, 168, 166,
		1, 0, 0, 0, 168, 169, 1, 0, 0, 0, 169, 15, 1, 0, 0, 0, 170, 171, 5, 28,
		0, 0, 171, 172, 3, 14, 7, 0, 172, 17, 1, 0, 0, 0, 173, 174, 7, 2, 0, 0,
		174, 19, 1, 0, 0, 0, 175, 180, 3, 18, 9, 0, 176, 177, 5, 9, 0, 0, 177,
		179, 3, 18, 9, 0, 178, 176, 1, 0, 0, 0, 179, 182, 1, 0, 0, 0, 180, 178,
		1, 0, 0, 0, 180, 181, 1, 0, 0, 0, 181, 21, 1, 0, 0, 0, 182, 180, 1, 0,
		0, 0, 183, 191, 3, 26, 13, 0, 184, 190, 3, 28, 14, 0, 185, 190, 3, 30,
		15, 0, 186, 190, 3, 50, 25, 0, 187, 190, 3, 52, 26, 0, 188, 190, 3, 54,
		27, 0, 189, 184, 1, 0, 0, 0, 189, 185, 1, 0, 0, 0, 189, 186, 1, 0, 0, 0,
		189, 187, 1, 0, 0, 0, 189, 188, 1, 0, 0, 0, 190, 193, 1, 0, 0, 0, 191,
		189, 1, 0, 0, 0, 191, 192, 1, 0, 0, 0, 192, 23, 1, 0, 0, 0, 193, 191, 1,
		0, 0, 0, 194, 195, 5, 127, 0, 0, 195, 208, 5, 7, 0, 0, 196, 197, 5, 125,
		0, 0, 197, 198, 5, 15, 0, 0, 198, 205, 3, 8, 4, 0, 199, 200, 5, 9, 0, 0,
		200, 201, 5, 125, 0, 0, 201, 202, 5, 15, 0, 0, 202, 204, 3, 8, 4, 0, 203,
		199, 1, 0, 0, 0, 204, 207, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 205, 206,
		1, 0, 0, 0, 206, 209, 1, 0, 0, 0, 207, 205, 1, 0, 0, 0, 208, 196, 1, 0,
		0, 0, 208, 209, 1, 0, 0, 0, 209, 210, 1, 0, 0, 0, 210, 211, 5, 8, 0, 0,
		211, 25, 1, 0, 0, 0, 212, 213, 5, 33, 0, 0, 213, 214, 5, 125, 0, 0, 214,
		215, 5, 6, 0, 0, 215, 27, 1, 0, 0, 0, 216, 217, 5, 34, 0, 0, 217, 233,
		5, 125, 0, 0, 218, 219, 5, 1, 0, 0, 219, 220, 5, 125, 0, 0, 220, 221, 5,
		5, 0, 0, 221, 228, 3, 8, 4, 0, 222, 223, 5, 9, 0, 0, 223, 224, 5, 125,
		0, 0, 224, 225, 5, 5, 0, 0, 225, 227, 3, 8, 4, 0, 226, 222, 1, 0, 0, 0,
		227, 230, 1, 0, 0, 0, 228, 226, 1, 0, 0, 0, 228, 229, 1, 0, 0, 0, 229,
		231, 1, 0, 0, 0, 230, 228, 1, 0, 0, 0, 231, 232, 5, 2, 0, 0, 232, 234,
		1, 0, 0, 0, 233, 218, 1, 0, 0, 0, 233, 234, 1, 0, 0, 0, 234, 235, 1, 0,
		0, 0, 235, 236, 5, 73, 0, 0, 236, 237, 5, 125, 0, 0, 237, 238, 5, 6, 0,
		0, 238, 29, 1, 0, 0, 0, 239, 240, 5, 35, 0, 0, 240, 241, 5, 125, 0, 0,
		241, 242, 5, 1, 0, 0, 242, 251, 3, 32, 16, 0, 243, 247, 5, 9, 0, 0, 244,
		248, 3, 32, 16, 0, 245, 248, 3, 34, 17, 0, 246, 248, 3, 36, 18, 0, 247,
		244, 1, 0, 0, 0, 247, 245, 1, 0, 0, 0, 247, 246, 1, 0, 0, 0, 248, 250,
		1, 0, 0, 0, 249, 243, 1, 0, 0, 0, 250, 253, 1, 0, 0, 0, 251, 249, 1, 0,
		0, 0, 251, 252, 1, 0, 0, 0, 252, 254, 1, 0, 0, 0, 253, 251, 1, 0, 0, 0,
		254, 255, 5, 2, 0, 0, 255, 31, 1, 0, 0, 0, 256, 257, 5, 125, 0, 0, 257,
		261, 3, 14, 7, 0, 258, 260, 3, 46, 23, 0, 259, 258, 1, 0, 0, 0, 260, 263,
		1, 0, 0, 0, 261, 259, 1, 0, 0, 0, 261, 262, 1, 0, 0, 0, 262, 33, 1, 0,
		0, 0, 263, 261, 1, 0, 0, 0, 264, 265, 5, 128, 0, 0, 265, 266, 7, 3, 0,
		0, 266, 267, 5, 7, 0, 0, 267, 268, 3, 12, 6, 0, 268, 269, 5, 8, 0, 0, 269,
		35, 1, 0, 0, 0, 270, 271, 5, 42, 0, 0, 271, 274, 5, 44, 0, 0, 272, 274,
		5, 119, 0, 0, 273, 270, 1, 0, 0, 0, 273, 272, 1, 0, 0, 0, 274, 275, 1,
		0, 0, 0, 275, 276, 5, 7, 0, 0, 276, 277, 3, 12, 6, 0, 277, 278, 5, 8, 0,
		0, 278, 279, 7, 4, 0, 0, 279, 280, 5, 125, 0, 0, 280, 281, 5, 7, 0, 0,
		281, 282, 3, 12, 6, 0, 282, 286, 5, 8, 0, 0, 283, 285, 3, 38, 19, 0, 284,
		283, 1, 0, 0, 0, 285, 288, 1, 0, 0, 0, 286, 284, 1, 0, 0, 0, 286, 287,
		1, 0, 0, 0, 287, 37, 1, 0, 0, 0, 288, 286, 1, 0, 0, 0, 289, 290, 5, 45,
		0, 0, 290, 293, 5, 54, 0, 0, 291, 293, 5, 120, 0, 0, 292, 289, 1, 0, 0,
		0, 292, 291, 1, 0, 0, 0, 293, 300, 1, 0, 0, 0, 294, 295, 5, 45, 0, 0, 295,
		298, 5, 53, 0, 0, 296, 298, 5, 121, 0, 0, 297, 294, 1, 0, 0, 0, 297, 296,
		1, 0, 0, 0, 298, 300, 1, 0, 0, 0, 299, 292, 1, 0, 0, 0, 299, 297, 1, 0,
		0, 0, 300, 302, 1, 0, 0, 0, 301, 303, 5, 46, 0, 0, 302, 301, 1, 0, 0, 0,
		302, 303, 1, 0, 0, 0, 303, 321, 1, 0, 0, 0, 304, 305, 5, 83, 0, 0, 305,
		308, 5, 36, 0, 0, 306, 308, 5, 124, 0, 0, 307, 304, 1, 0, 0, 0, 307, 306,
		1, 0, 0, 0, 308, 322, 1, 0, 0, 0, 309, 322, 5, 48, 0, 0, 310, 311, 5, 50,
		0, 0, 311, 314, 5, 52, 0, 0, 312, 314, 5, 123, 0, 0, 313, 310, 1, 0, 0,
		0, 313, 312, 1, 0, 0, 0, 314, 322, 1, 0, 0, 0, 315, 316, 5, 50, 0, 0, 316,
		319, 5, 51, 0, 0, 317, 319, 5, 122, 0, 0, 318, 315, 1, 0, 0, 0, 318, 317,
		1, 0, 0, 0, 319, 322, 1, 0, 0, 0, 320, 322, 5, 49, 0, 0, 321, 307, 1, 0,
		0, 0, 321, 309, 1, 0, 0, 0, 321, 313, 1, 0, 0, 0, 321, 318, 1, 0, 0, 0,
		321, 320, 1, 0, 0, 0, 322, 39, 1, 0, 0, 0, 323, 328, 3, 14, 7, 0, 324,
		325, 5, 9, 0, 0, 325, 327, 3, 14, 7, 0, 326, 324, 1, 0, 0, 0, 327, 330,
		1, 0, 0, 0, 328, 326, 1, 0, 0, 0, 328, 329, 1, 0, 0, 0, 329, 41, 1, 0,
		0, 0, 330, 328, 1, 0, 0, 0, 331, 332, 5, 125, 0, 0, 332, 338, 3, 14, 7,
		0, 333, 334, 5, 9, 0, 0, 334, 335, 5, 125, 0, 0, 335, 337, 3, 14, 7, 0,
		336, 333, 1, 0, 0, 0, 337, 340, 1, 0, 0, 0, 338, 336, 1, 0, 0, 0, 338,
		339, 1, 0, 0, 0, 339, 43, 1, 0, 0, 0, 340, 338, 1, 0, 0, 0, 341, 342, 3,
		18, 9, 0, 342, 349, 3, 14, 7, 0, 343, 344, 5, 9, 0, 0, 344, 345, 3, 18,
		9, 0, 345, 346, 3, 14, 7, 0, 346, 348, 1, 0, 0, 0, 347, 343, 1, 0, 0, 0,
		348, 351, 1, 0, 0, 0, 349, 347, 1, 0, 0, 0, 349, 350, 1, 0, 0, 0, 350,
		45, 1, 0, 0, 0, 351, 349, 1, 0, 0, 0, 352, 362, 5, 125, 0, 0, 353, 355,
		5, 43, 0, 0, 354, 356, 5, 44, 0, 0, 355, 354, 1, 0, 0, 0, 355, 356, 1,
		0, 0, 0, 356, 362, 1, 0, 0, 0, 357, 358, 5, 57, 0, 0, 358, 362, 5, 52,
		0, 0, 359, 362, 5, 51, 0, 0, 360, 362, 5, 47, 0, 0, 361, 352, 1, 0, 0,
		0, 361, 353, 1, 0, 0, 0, 361, 357, 1, 0, 0, 0, 361, 359, 1, 0, 0, 0, 361,
		360, 1, 0, 0, 0, 362, 367, 1, 0, 0, 0, 363, 364, 5, 7, 0, 0, 364, 365,
		3, 8, 4, 0, 365, 366, 5, 8, 0, 0, 366, 368, 1, 0, 0, 0, 367, 363, 1, 0,
		0, 0, 367, 368, 1, 0, 0, 0, 368, 47, 1, 0, 0, 0, 369, 370, 7, 5, 0, 0,
		370, 49, 1, 0, 0, 0, 371, 373, 3, 24, 12, 0, 372, 371, 1, 0, 0, 0, 373,
		376, 1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0, 375, 377,
		1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 377, 378, 5, 36, 0, 0, 378, 379, 5, 125,
		0, 0, 379, 381, 5, 7, 0, 0, 380, 382, 3, 20, 10, 0, 381, 380, 1, 0, 0,
		0, 381, 382, 1, 0, 0, 0, 382, 383, 1, 0, 0, 0, 383, 385, 5, 8, 0, 0, 384,
		386, 3, 48, 24, 0, 385, 384, 1, 0, 0, 0, 386, 387, 1, 0, 0, 0, 387, 385,
		1, 0, 0, 0, 387, 388, 1, 0, 0, 0, 388, 389, 1, 0, 0, 0, 389, 390, 5, 1,
		0, 0, 390, 391, 3, 96, 48, 0, 391, 392, 5, 2, 0, 0, 392, 51, 1, 0, 0, 0,
		393, 395, 3, 24, 12, 0, 394, 393, 1, 0, 0, 0, 395, 398, 1, 0, 0, 0, 396,
		394, 1, 0, 0, 0, 396, 397, 1, 0, 0, 0, 397, 399, 1, 0, 0, 0, 398, 396,
		1, 0, 0, 0, 399, 400, 5, 37, 0, 0, 400, 401, 5, 125, 0, 0, 401, 403, 5,
		7, 0, 0, 402, 404, 3, 44, 22, 0, 403, 402, 1, 0, 0, 0, 403, 404, 1, 0,
		0, 0, 404, 405, 1, 0, 0, 0, 405, 407, 5, 8, 0, 0, 406, 408, 3, 48, 24,
		0, 407, 406, 1, 0, 0, 0, 408, 409, 1, 0, 0, 0, 409, 407, 1, 0, 0, 0, 409,
		410, 1, 0, 0, 0, 410, 412, 1, 0, 0, 0, 411, 413, 3, 56, 28, 0, 412, 411,
		1, 0, 0, 0, 412, 413, 1, 0, 0, 0, 413, 414, 1, 0, 0, 0, 414, 415, 5, 1,
		0, 0, 415, 416, 3, 100, 50, 0, 416, 417, 5, 2, 0, 0, 417, 53, 1, 0, 0,
		0, 418, 419, 5, 42, 0, 0, 419, 420, 5, 37, 0, 0, 420, 421, 5, 125, 0, 0,
		421, 424, 5, 7, 0, 0, 422, 425, 3, 40, 20, 0, 423, 425, 3, 44, 22, 0, 424,
		422, 1, 0, 0, 0, 424, 423, 1, 0, 0, 0, 424, 425, 1, 0, 0, 0, 425, 426,
		1, 0, 0, 0, 426, 428, 5, 8, 0, 0, 427, 429, 3, 56, 28, 0, 428, 427, 1,
		0, 0, 0, 428, 429, 1, 0, 0, 0, 429, 55, 1, 0, 0, 0, 430, 442, 5, 82, 0,
		0, 431, 433, 5, 35, 0, 0, 432, 431, 1, 0, 0, 0, 432, 433, 1, 0, 0, 0, 433,
		434, 1, 0, 0, 0, 434, 435, 5, 7, 0, 0, 435, 436, 3, 42, 21, 0, 436, 437,
		5, 8, 0, 0, 437, 443, 1, 0, 0, 0, 438, 439, 5, 7, 0, 0, 439, 440, 3, 40,
		20, 0, 440, 441, 5, 8, 0, 0, 441, 443, 1, 0, 0, 0, 442, 432, 1, 0, 0, 0,
		442, 438, 1, 0, 0, 0, 443, 57, 1, 0, 0, 0, 444, 445, 3, 60, 30, 0, 445,
		446, 5, 6, 0, 0, 446, 59, 1, 0, 0, 0, 447, 448, 5, 84, 0, 0, 448, 453,
		3, 62, 31, 0, 449, 450, 5, 9, 0, 0, 450, 452, 3, 62, 31, 0, 451, 449, 1,
		0, 0, 0, 452, 455, 1, 0, 0, 0, 453, 451, 1, 0, 0, 0, 453, 454, 1, 0, 0,
		0, 454, 457, 1, 0, 0, 0, 455, 453, 1, 0, 0, 0, 456, 447, 1, 0, 0, 0, 456,
		457, 1, 0, 0, 0, 457, 462, 1, 0, 0, 0, 458, 463, 3, 64, 32, 0, 459, 463,
		3, 78, 39, 0, 460, 463, 3, 82, 41, 0, 461, 463, 3, 86, 43, 0, 462, 458,
		1, 0, 0, 0, 462, 459, 1, 0, 0, 0, 462, 460, 1, 0, 0, 0, 462, 461, 1, 0,
		0, 0, 463, 61, 1, 0, 0, 0, 464, 465, 3, 10, 5, 0, 465, 474, 5, 7, 0, 0,
		466, 471, 3, 10, 5, 0, 467, 468, 5, 9, 0, 0, 468, 470, 3, 10, 5, 0, 469,
		467, 1, 0, 0, 0, 470, 473, 1, 0, 0, 0, 471, 469, 1, 0, 0, 0, 471, 472,
		1, 0, 0, 0, 472, 475, 1, 0, 0, 0, 473, 471, 1, 0, 0, 0, 474, 466, 1, 0,
		0, 0, 474, 475, 1, 0, 0, 0, 475, 476, 1, 0, 0, 0, 476, 477, 5, 8, 0, 0,
		477, 478, 5, 73, 0, 0, 478, 479, 5, 7, 0, 0, 479, 480, 3, 64, 32, 0, 480,
		481, 5, 8, 0, 0, 481, 63, 1, 0, 0, 0, 482, 488, 3, 70, 35, 0, 483, 484,
		3, 66, 33, 0, 484, 485, 3, 70, 35, 0, 485, 487, 1, 0, 0, 0, 486, 483, 1,
		0, 0, 0, 487, 490, 1, 0, 0, 0, 488, 486, 1, 0, 0, 0, 488, 489, 1, 0, 0,
		0, 489, 501, 1, 0, 0, 0, 490, 488, 1, 0, 0, 0, 491, 492, 5, 78, 0, 0, 492,
		493, 5, 79, 0, 0, 493, 498, 3, 68, 34, 0, 494, 495, 5, 9, 0, 0, 495, 497,
		3, 68, 34, 0, 496, 494, 1, 0, 0, 0, 497, 500, 1, 0, 0, 0, 498, 496, 1,
		0, 0, 0, 498, 499, 1, 0, 0, 0, 499, 502, 1, 0, 0, 0, 500, 498, 1, 0, 0,
		0, 501, 491, 1, 0, 0, 0, 501, 502, 1, 0, 0, 0, 502, 505, 1, 0, 0, 0, 503,
		504, 5, 76, 0, 0, 504, 506, 3, 88, 44, 0, 505, 503, 1, 0, 0, 0, 505, 506,
		1, 0, 0, 0, 506, 509, 1, 0, 0, 0, 507, 508, 5, 77, 0, 0, 508, 510, 3, 88,
		44, 0, 509, 507, 1, 0, 0, 0, 509, 510, 1, 0, 0, 0, 510, 65, 1, 0, 0, 0,
		511, 513, 5, 97, 0, 0, 512, 514, 5, 67, 0, 0, 513, 512, 1, 0, 0, 0, 513,
		514, 1, 0, 0, 0, 514, 518, 1, 0, 0, 0, 515, 518, 5, 98, 0, 0, 516, 518,
		5, 99, 0, 0, 517, 511, 1, 0, 0, 0, 517, 515, 1, 0, 0, 0, 517, 516, 1, 0,
		0, 0, 518, 67, 1, 0, 0, 0, 519, 521, 3, 88, 44, 0, 520, 522, 7, 6, 0, 0,
		521, 520, 1, 0, 0, 0, 521, 522, 1, 0, 0, 0, 522, 525, 1, 0, 0, 0, 523,
		524, 5, 100, 0, 0, 524, 526, 7, 7, 0, 0, 525, 523, 1, 0, 0, 0, 525, 526,
		1, 0, 0, 0, 526, 69, 1, 0, 0, 0, 527, 529, 5, 93, 0, 0, 528, 530, 5, 89,
		0, 0, 529, 528, 1, 0, 0, 0, 529, 530, 1, 0, 0, 0, 530, 531, 1, 0, 0, 0,
		531, 536, 3, 76, 38, 0, 532, 533, 5, 9, 0, 0, 533, 535, 3, 76, 38, 0, 534,
		532, 1, 0, 0, 0, 535, 538, 1, 0, 0, 0, 536, 534, 1, 0, 0, 0, 536, 537,
		1, 0, 0, 0, 537, 547, 1, 0, 0, 0, 538, 536, 1, 0, 0, 0, 539, 540, 5, 90,
		0, 0, 540, 544, 3, 72, 36, 0, 541, 543, 3, 74, 37, 0, 542, 541, 1, 0, 0,
		0, 543, 546, 1, 0, 0, 0, 544, 542, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0, 545,
		548, 1, 0, 0, 0, 546, 544, 1, 0, 0, 0, 547, 539, 1, 0, 0, 0, 547, 548,
		1, 0, 0, 0, 548, 551, 1, 0, 0, 0, 549, 550, 5, 91, 0, 0, 550, 552, 3, 88,
		44, 0, 551, 549, 1, 0, 0, 0, 551, 552, 1, 0, 0, 0, 552, 560, 1, 0, 0, 0,
		553, 554, 5, 80, 0, 0, 554, 555, 5, 79, 0, 0, 555, 558, 3, 92, 46, 0, 556,
		557, 5, 81, 0, 0, 557, 559, 3, 88, 44, 0, 558, 556, 1, 0, 0, 0, 558, 559,
		1, 0, 0, 0, 559, 561, 1, 0, 0, 0, 560, 553, 1, 0, 0, 0, 560, 561, 1, 0,
		0, 0, 561, 71, 1, 0, 0, 0, 562, 567, 3, 10, 5, 0, 563, 565, 5, 73, 0, 0,
		564, 563, 1, 0, 0, 0, 564, 565, 1, 0, 0, 0, 565, 566, 1, 0, 0, 0, 566,
		568, 3, 10, 5, 0, 567, 564, 1, 0, 0, 0, 567, 568, 1, 0, 0, 0, 568, 586,
		1, 0, 0, 0, 569, 570, 5, 7, 0, 0, 570, 571, 3, 64, 32, 0, 571, 576, 5,
		8, 0, 0, 572, 574, 5, 73, 0, 0, 573, 572, 1, 0, 0, 0, 573, 574, 1, 0, 0,
		0, 574, 575, 1, 0, 0, 0, 575, 577, 3, 10, 5, 0, 576, 573, 1, 0, 0, 0, 576,
		577, 1, 0, 0, 0, 577, 586, 1, 0, 0, 0, 578, 580, 3, 94, 47, 0, 579, 581,
		5, 73, 0, 0, 580, 579, 1, 0, 0, 0, 580, 581, 1, 0, 0, 0, 581, 583, 1, 0,
		0, 0, 582, 584, 3, 10, 5, 0, 583, 582, 1, 0, 0, 0, 583, 584, 1, 0, 0, 0,
		584, 586, 1, 0, 0, 0, 585, 562, 1, 0, 0, 0, 585, 569, 1, 0, 0, 0, 585,
		578, 1, 0, 0, 0, 586, 73, 1, 0, 0, 0, 587, 588, 7, 8, 0, 0, 588, 589, 5,
		69, 0, 0, 589, 590, 3, 72, 36, 0, 590, 591, 5, 45, 0, 0, 591, 592, 3, 88,
		44, 0, 592, 75, 1, 0, 0, 0, 593, 598, 3, 88, 44, 0, 594, 596, 5, 73, 0,
		0, 595, 594, 1, 0, 0, 0, 595, 596, 1, 0, 0, 0, 596, 597, 1, 0, 0, 0, 597,
		599, 3, 10, 5, 0, 598, 595, 1, 0, 0, 0, 598, 599, 1, 0, 0, 0, 599, 607,
		1, 0, 0, 0, 600, 601, 3, 10, 5, 0, 601, 602, 5, 12, 0, 0, 602, 604, 1,
		0, 0, 0, 603, 600, 1, 0, 0, 0, 603, 604, 1, 0, 0, 0, 604, 605, 1, 0, 0,
		0, 605, 607, 5, 14, 0, 0, 606, 593, 1, 0, 0, 0, 606, 603, 1, 0, 0, 0, 607,
		77, 1, 0, 0, 0, 608, 609, 5, 54, 0, 0, 609, 614, 3, 10, 5, 0, 610, 612,
		5, 73, 0, 0, 611, 610, 1, 0, 0, 0, 611, 612, 1, 0, 0, 0, 612, 613, 1, 0,
		0, 0, 613, 615, 3, 10, 5, 0, 614, 611, 1, 0, 0, 0, 614, 615, 1, 0, 0, 0,
		615, 616, 1, 0, 0, 0, 616, 617, 5, 50, 0, 0, 617, 622, 3, 80, 40, 0, 618,
		619, 5, 9, 0, 0, 619, 621, 3, 80, 40, 0, 620, 618, 1, 0, 0, 0, 621, 624,
		1, 0, 0, 0, 622, 620, 1, 0, 0, 0, 622, 623, 1, 0, 0, 0, 623, 633, 1, 0,
		0, 0, 624, 622, 1, 0, 0, 0, 625, 626, 5, 90, 0, 0, 626, 630, 3, 72, 36,
		0, 627, 629, 3, 74, 37, 0, 628, 627, 1, 0, 0, 0, 629, 632, 1, 0, 0, 0,
		630, 628, 1, 0, 0, 0, 630, 631, 1, 0, 0, 0, 631, 634, 1, 0, 0, 0, 632,
		630, 1, 0, 0, 0, 633, 625, 1, 0, 0, 0, 633, 634, 1, 0, 0, 0, 634, 637,
		1, 0, 0, 0, 635, 636, 5, 91, 0, 0, 636, 638, 3, 88, 44, 0, 637, 635, 1,
		0, 0, 0, 637, 638, 1, 0, 0, 0, 638, 79, 1, 0, 0, 0, 639, 640, 3, 10, 5,
		0, 640, 641, 5, 15, 0, 0, 641, 642, 3, 88, 44, 0, 642, 81, 1, 0, 0, 0,
		643, 644, 5, 94, 0, 0, 644, 645, 5, 104, 0, 0, 645, 650, 3, 10, 5, 0, 646,
		648, 5, 73, 0, 0, 647, 646, 1, 0, 0, 0, 647, 648, 1, 0, 0, 0, 648, 649,
		1, 0, 0, 0, 649, 651, 3, 10, 5, 0, 650, 647, 1, 0, 0, 0, 650, 651, 1, 0,
		0, 0, 651, 656, 1, 0, 0, 0, 652, 653, 5, 7, 0, 0, 653, 654, 3, 12, 6, 0,
		654, 655, 5, 8, 0, 0, 655, 657, 1, 0, 0, 0, 656, 652, 1, 0, 0, 0, 656,
		657, 1, 0, 0, 0, 657, 658, 1, 0, 0, 0, 658, 659, 5, 95, 0, 0, 659, 660,
		5, 7, 0, 0, 660, 661, 3, 92, 46, 0, 661, 669, 5, 8, 0, 0, 662, 663, 5,
		9, 0, 0, 663, 664, 5, 7, 0, 0, 664, 665, 3, 92, 46, 0, 665, 666, 5, 8,
		0, 0, 666, 668, 1, 0, 0, 0, 667, 662, 1, 0, 0, 0, 668, 671, 1, 0, 0, 0,
		669, 667, 1, 0, 0, 0, 669, 670, 1, 0, 0, 0, 670, 673, 1, 0, 0, 0, 671,
		669, 1, 0, 0, 0, 672, 674, 3, 84, 42, 0, 673, 672, 1, 0, 0, 0, 673, 674,
		1, 0, 0, 0, 674, 83, 1, 0, 0, 0, 675, 676, 5, 45, 0, 0, 676, 684, 5, 105,
		0, 0, 677, 678, 5, 7, 0, 0, 678, 679, 3, 12, 6, 0, 679, 682, 5, 8, 0, 0,
		680, 681, 5, 91, 0, 0, 681, 683, 3, 88, 44, 0, 682, 680, 1, 0, 0, 0, 682,
		683, 1, 0, 0, 0, 683, 685, 1, 0, 0, 0, 684, 677, 1, 0, 0, 0, 684, 685,
		1, 0, 0, 0, 685, 686, 1, 0, 0, 0, 686, 702, 5, 46, 0, 0, 687, 703, 5, 106,
		0, 0, 688, 689, 5, 54, 0, 0, 689, 690, 5, 50, 0, 0, 690, 695, 3, 80, 40,
		0, 691, 692, 5, 9, 0, 0, 692, 694, 3, 80, 40, 0, 693, 691, 1, 0, 0, 0,
		694, 697, 1, 0, 0, 0, 695, 693, 1, 0, 0, 0, 695, 696, 1, 0, 0, 0, 696,
		700, 1, 0, 0, 0, 697, 695, 1, 0, 0, 0, 698, 699, 5, 91, 0, 0, 699, 701,
		3, 88, 44, 0, 700, 698, 1, 0, 0, 0, 700, 701, 1, 0, 0, 0, 701, 703, 1,
		0, 0, 0, 702, 687, 1, 0, 0, 0, 702, 688, 1, 0, 0, 0, 703, 85, 1, 0, 0,
		0, 704, 705, 5, 53, 0, 0, 705, 706, 5, 90, 0, 0, 706, 711, 3, 10, 5, 0,
		707, 709, 5, 73, 0, 0, 708, 707, 1, 0, 0, 0, 708, 709, 1, 0, 0, 0, 709,
		710, 1, 0, 0, 0, 710, 712, 3, 10, 5, 0, 711, 708, 1, 0, 0, 0, 711, 712,
		1, 0, 0, 0, 712, 715, 1, 0, 0, 0, 713, 714, 5, 91, 0, 0, 714, 716, 3, 88,
		44, 0, 715, 713, 1, 0, 0, 0, 715, 716, 1, 0, 0, 0, 716, 87, 1, 0, 0, 0,
		717, 718, 6, 44, -1, 0, 718, 720, 3, 8, 4, 0, 719, 721, 3, 16, 8, 0, 720,
		719, 1, 0, 0, 0, 720, 721, 1, 0, 0, 0, 721, 775, 1, 0, 0, 0, 722, 724,
		3, 94, 47, 0, 723, 725, 3, 16, 8, 0, 724, 723, 1, 0, 0, 0, 724, 725, 1,
		0, 0, 0, 725, 775, 1, 0, 0, 0, 726, 728, 3, 18, 9, 0, 727, 729, 3, 16,
		8, 0, 728, 727, 1, 0, 0, 0, 728, 729, 1, 0, 0, 0, 729, 775, 1, 0, 0, 0,
		730, 731, 3, 10, 5, 0, 731, 732, 5, 12, 0, 0, 732, 734, 1, 0, 0, 0, 733,
		730, 1, 0, 0, 0, 733, 734, 1, 0, 0, 0, 734, 735, 1, 0, 0, 0, 735, 737,
		3, 10, 5, 0, 736, 738, 3, 16, 8, 0, 737, 736, 1, 0, 0, 0, 737, 738, 1,
		0, 0, 0, 738, 775, 1, 0, 0, 0, 739, 740, 5, 7, 0, 0, 740, 741, 3, 88, 44,
		0, 741, 743, 5, 8, 0, 0, 742, 744, 3, 16, 8, 0, 743, 742, 1, 0, 0, 0, 743,
		744, 1, 0, 0, 0, 744, 775, 1, 0, 0, 0, 745, 746, 7, 9, 0, 0, 746, 775,
		3, 88, 44, 10, 747, 749, 5, 85, 0, 0, 748, 750, 3, 88, 44, 0, 749, 748,
		1, 0, 0, 0, 749, 750, 1, 0, 0, 0, 750, 752, 1, 0, 0, 0, 751, 753, 3, 90,
		45, 0, 752, 751, 1, 0, 0, 0, 753, 754, 1, 0, 0, 0, 754, 752, 1, 0, 0, 0,
		754, 755, 1, 0, 0, 0, 755, 758, 1, 0, 0, 0, 756, 757, 5, 110, 0, 0, 757,
		759, 3, 88, 44, 0, 758, 756, 1, 0, 0, 0, 758, 759, 1, 0, 0, 0, 759, 760,
		1, 0, 0, 0, 760, 761, 5, 88, 0, 0, 761, 775, 1, 0, 0, 0, 762, 764, 5, 57,
		0, 0, 763, 762, 1, 0, 0, 0, 763, 764, 1, 0, 0, 0, 764, 765, 1, 0, 0, 0,
		765, 767, 5, 66, 0, 0, 766, 763, 1, 0, 0, 0, 766, 767, 1, 0, 0, 0, 767,
		768, 1, 0, 0, 0, 768, 769, 5, 7, 0, 0, 769, 770, 3, 64, 32, 0, 770, 772,
		5, 8, 0, 0, 771, 773, 3, 16, 8, 0, 772, 771, 1, 0, 0, 0, 772, 773, 1, 0,
		0, 0, 773, 775, 1, 0, 0, 0, 774, 717, 1, 0, 0, 0, 774, 722, 1, 0, 0, 0,
		774, 726, 1, 0, 0, 0, 774, 733, 1, 0, 0, 0, 774, 739, 1, 0, 0, 0, 774,
		745, 1, 0, 0, 0, 774, 747, 1, 0, 0, 0, 774, 766, 1, 0, 0, 0, 775, 852,
		1, 0, 0, 0, 776, 777, 10, 13, 0, 0, 777, 778, 7, 10, 0, 0, 778, 851, 3,
		88, 44, 14, 779, 781, 10, 11, 0, 0, 780, 782, 5, 57, 0, 0, 781, 780, 1,
		0, 0, 0, 781, 782, 1, 0, 0, 0, 782, 783, 1, 0, 0, 0, 783, 784, 7, 11, 0,
		0, 784, 851, 3, 88, 44, 12, 785, 787, 10, 9, 0, 0, 786, 788, 5, 57, 0,
		0, 787, 786, 1, 0, 0, 0, 787, 788, 1, 0, 0, 0, 788, 789, 1, 0, 0, 0, 789,
		790, 5, 64, 0, 0, 790, 791, 3, 88, 44, 0, 791, 792, 5, 59, 0, 0, 792, 793,
		3, 88, 44, 10, 793, 851, 1, 0, 0, 0, 794, 795, 10, 5, 0, 0, 795, 796, 5,
		13, 0, 0, 796, 851, 3, 88, 44, 6, 797, 798, 10, 4, 0, 0, 798, 799, 7, 12,
		0, 0, 799, 851, 3, 88, 44, 5, 800, 801, 10, 3, 0, 0, 801, 802, 7, 0, 0,
		0, 802, 851, 3, 88, 44, 4, 803, 804, 10, 2, 0, 0, 804, 805, 5, 59, 0, 0,
		805, 851, 3, 88, 44, 3, 806, 807, 10, 1, 0, 0, 807, 808, 5, 60, 0, 0, 808,
		851, 3, 88, 44, 2, 809, 810, 10, 20, 0, 0, 810, 811, 5, 92, 0, 0, 811,
		851, 3, 10, 5, 0, 812, 813, 10, 16, 0, 0, 813, 814, 5, 3, 0, 0, 814, 815,
		3, 88, 44, 0, 815, 817, 5, 4, 0, 0, 816, 818, 3, 16, 8, 0, 817, 816, 1,
		0, 0, 0, 817, 818, 1, 0, 0, 0, 818, 851, 1, 0, 0, 0, 819, 820, 10, 15,
		0, 0, 820, 821, 5, 12, 0, 0, 821, 823, 3, 10, 5, 0, 822, 824, 3, 16, 8,
		0, 823, 822, 1, 0, 0, 0, 823, 824, 1, 0, 0, 0, 824, 851, 1, 0, 0, 0, 825,
		827, 10, 12, 0, 0, 826, 828, 5, 57, 0, 0, 827, 826, 1, 0, 0, 0, 827, 828,
		1, 0, 0, 0, 828, 829, 1, 0, 0, 0, 829, 830, 5, 63, 0, 0, 830, 833, 5, 7,
		0, 0, 831, 834, 3, 92, 46, 0, 832, 834, 3, 64, 32, 0, 833, 831, 1, 0, 0,
		0, 833, 832, 1, 0, 0, 0, 834, 835, 1, 0, 0, 0, 835, 836, 5, 8, 0, 0, 836,
		851, 1, 0, 0, 0, 837, 838, 10, 8, 0, 0, 838, 840, 5, 65, 0, 0, 839, 841,
		5, 57, 0, 0, 840, 839, 1, 0, 0, 0, 840, 841, 1, 0, 0, 0, 841, 848, 1, 0,
		0, 0, 842, 843, 5, 89, 0, 0, 843, 844, 5, 90, 0, 0, 844, 849, 3, 88, 44,
		0, 845, 849, 5, 52, 0, 0, 846, 849, 5, 115, 0, 0, 847, 849, 5, 116, 0,
		0, 848, 842, 1, 0, 0, 0, 848, 845, 1, 0, 0, 0, 848, 846, 1, 0, 0, 0, 848,
		847, 1, 0, 0, 0, 849, 851, 1, 0, 0, 0, 850, 776, 1, 0, 0, 0, 850, 779,
		1, 0, 0, 0, 850, 785, 1, 0, 0, 0, 850, 794, 1, 0, 0, 0, 850, 797, 1, 0,
		0, 0, 850, 800, 1, 0, 0, 0, 850, 803, 1, 0, 0, 0, 850, 806, 1, 0, 0, 0,
		850, 809, 1, 0, 0, 0, 850, 812, 1, 0, 0, 0, 850, 819, 1, 0, 0, 0, 850,
		825, 1, 0, 0, 0, 850, 837, 1, 0, 0, 0, 851, 854, 1, 0, 0, 0, 852, 850,
		1, 0, 0, 0, 852, 853, 1, 0, 0, 0, 853, 89, 1, 0, 0, 0, 854, 852, 1, 0,
		0, 0, 855, 856, 5, 86, 0, 0, 856, 857, 3, 88, 44, 0, 857, 858, 5, 87, 0,
		0, 858, 859, 3, 88, 44, 0, 859, 91, 1, 0, 0, 0, 860, 865, 3, 88, 44, 0,
		861, 862, 5, 9, 0, 0, 862, 864, 3, 88, 44, 0, 863, 861, 1, 0, 0, 0, 864,
		867, 1, 0, 0, 0, 865, 863, 1, 0, 0, 0, 865, 866, 1, 0, 0, 0, 866, 93, 1,
		0, 0, 0, 867, 865, 1, 0, 0, 0, 868, 869, 3, 10, 5, 0, 869, 875, 5, 7, 0,
		0, 870, 872, 5, 89, 0, 0, 871, 870, 1, 0, 0, 0, 871, 872, 1, 0, 0, 0, 872,
		873, 1, 0, 0, 0, 873, 876, 3, 92, 46, 0, 874, 876, 5, 14, 0, 0, 875, 871,
		1, 0, 0, 0, 875, 874, 1, 0, 0, 0, 875, 876, 1, 0, 0, 0, 876, 877, 1, 0,
		0, 0, 877, 878, 5, 8, 0, 0, 878, 892, 1, 0, 0, 0, 879, 880, 3, 10, 5, 0,
		880, 881, 5, 3, 0, 0, 881, 882, 3, 88, 44, 0, 882, 883, 5, 9, 0, 0, 883,
		884, 3, 88, 44, 0, 884, 885, 5, 4, 0, 0, 885, 887, 5, 7, 0, 0, 886, 888,
		3, 92, 46, 0, 887, 886, 1, 0, 0, 0, 887, 888, 1, 0, 0, 0, 888, 889, 1,
		0, 0, 0, 889, 890, 5, 8, 0, 0, 890, 892, 1, 0, 0, 0, 891, 868, 1, 0, 0,
		0, 891, 879, 1, 0, 0, 0, 892, 95, 1, 0, 0, 0, 893, 894, 3, 98, 49, 0, 894,
		895, 5, 6, 0, 0, 895, 897, 1, 0, 0, 0, 896, 893, 1, 0, 0, 0, 897, 900,
		1, 0, 0, 0, 898, 896, 1, 0, 0, 0, 898, 899, 1, 0, 0, 0, 899, 97, 1, 0,
		0, 0, 900, 898, 1, 0, 0, 0, 901, 922, 3, 60, 30, 0, 902, 903, 5, 125, 0,
		0, 903, 905, 5, 7, 0, 0, 904, 906, 3, 104, 52, 0, 905, 904, 1, 0, 0, 0,
		905, 906, 1, 0, 0, 0, 906, 907, 1, 0, 0, 0, 907, 922, 5, 8, 0, 0, 908,
		909, 3, 20, 10, 0, 909, 910, 5, 15, 0, 0, 910, 912, 1, 0, 0, 0, 911, 908,
		1, 0, 0, 0, 911, 912, 1, 0, 0, 0, 912, 913, 1, 0, 0, 0, 913, 914, 5, 125,
		0, 0, 914, 915, 5, 12, 0, 0, 915, 916, 5, 125, 0, 0, 916, 918, 5, 7, 0,
		0, 917, 919, 3, 104, 52, 0, 918, 917, 1, 0, 0, 0, 918, 919, 1, 0, 0, 0,
		919, 920, 1, 0, 0, 0, 920, 922, 5, 8, 0, 0, 921, 901, 1, 0, 0, 0, 921,
		902, 1, 0, 0, 0, 921, 911, 1, 0, 0, 0, 922, 99, 1, 0, 0, 0, 923, 925, 3,
		106, 53, 0, 924, 923, 1, 0, 0, 0, 925, 928, 1, 0, 0, 0, 926, 924, 1, 0,
		0, 0, 926, 927, 1, 0, 0, 0, 927, 101, 1, 0, 0, 0, 928, 926, 1, 0, 0, 0,
		929, 930, 6, 51, -1, 0, 930, 932, 3, 8, 4, 0, 931, 933, 3, 16, 8, 0, 932,
		931, 1, 0, 0, 0, 932, 933, 1, 0, 0, 0, 933, 959, 1, 0, 0, 0, 934, 936,
		3, 110, 55, 0, 935, 937, 3, 16, 8, 0, 936, 935, 1, 0, 0, 0, 936, 937, 1,
		0, 0, 0, 937, 959, 1, 0, 0, 0, 938, 940, 3, 18, 9, 0, 939, 941, 3, 16,
		8, 0, 940, 939, 1, 0, 0, 0, 940, 941, 1, 0, 0, 0, 941, 959, 1, 0, 0, 0,
		942, 944, 5, 3, 0, 0, 943, 945, 3, 104, 52, 0, 944, 943, 1, 0, 0, 0, 944,
		945, 1, 0, 0, 0, 945, 946, 1, 0, 0, 0, 946, 948, 5, 4, 0, 0, 947, 949,
		3, 16, 8, 0, 948, 947, 1, 0, 0, 0, 948, 949, 1, 0, 0, 0, 949, 959, 1, 0,
		0, 0, 950, 951, 5, 7, 0, 0, 951, 952, 3, 102, 51, 0, 952, 954, 5, 8, 0,
		0, 953, 955, 3, 16, 8, 0, 954, 953, 1, 0, 0, 0, 954, 955, 1, 0, 0, 0, 955,
		959, 1, 0, 0, 0, 956, 957, 7, 13, 0, 0, 957, 959, 3, 102, 51, 6, 958, 929,
		1, 0, 0, 0, 958, 934, 1, 0, 0, 0, 958, 938, 1, 0, 0, 0, 958, 942, 1, 0,
		0, 0, 958, 950, 1, 0, 0, 0, 958, 956, 1, 0, 0, 0, 959, 1003, 1, 0, 0, 0,
		960, 961, 10, 7, 0, 0, 961, 962, 7, 10, 0, 0, 962, 1002, 3, 102, 51, 8,
		963, 964, 10, 4, 0, 0, 964, 965, 7, 14, 0, 0, 965, 1002, 3, 102, 51, 5,
		966, 967, 10, 3, 0, 0, 967, 968, 5, 13, 0, 0, 968, 1002, 3, 102, 51, 4,
		969, 970, 10, 2, 0, 0, 970, 971, 7, 12, 0, 0, 971, 1002, 3, 102, 51, 3,
		972, 973, 10, 1, 0, 0, 973, 974, 7, 0, 0, 0, 974, 1002, 3, 102, 51, 2,
		975, 976, 10, 10, 0, 0, 976, 977, 5, 3, 0, 0, 977, 978, 3, 102, 51, 0,
		978, 980, 5, 4, 0, 0, 979, 981, 3, 16, 8, 0, 980, 979, 1, 0, 0, 0, 980,
		981, 1, 0, 0, 0, 981, 1002, 1, 0, 0, 0, 982, 983, 10, 8, 0, 0, 983, 984,
		5, 12, 0, 0, 984, 986, 5, 125, 0, 0, 985, 987, 3, 16, 8, 0, 986, 985, 1,
		0, 0, 0, 986, 987, 1, 0, 0, 0, 987, 1002, 1, 0, 0, 0, 988, 989, 10, 5,
		0, 0, 989, 991, 5, 65, 0, 0, 990, 992, 5, 57, 0, 0, 991, 990, 1, 0, 0,
		0, 991, 992, 1, 0, 0, 0, 992, 999, 1, 0, 0, 0, 993, 994, 5, 89, 0, 0, 994,
		995, 5, 90, 0, 0, 995, 1000, 3, 102, 51, 0, 996, 1000, 5, 52, 0, 0, 997,
		1000, 5, 115, 0, 0, 998, 1000, 5, 116, 0, 0, 999, 993, 1, 0, 0, 0, 999,
		996, 1, 0, 0, 0, 999, 997, 1, 0, 0, 0, 999, 998, 1, 0, 0, 0, 1000, 1002,
		1, 0, 0, 0, 1001, 960, 1, 0, 0, 0, 1001, 963, 1, 0, 0, 0, 1001, 966, 1,
		0, 0, 0, 1001, 969, 1, 0, 0, 0, 1001, 972, 1, 0, 0, 0, 1001, 975, 1, 0,
		0, 0, 1001, 982, 1, 0, 0, 0, 1001, 988, 1, 0, 0, 0, 1002, 1005, 1, 0, 0,
		0, 1003, 1001, 1, 0, 0, 0, 1003, 1004, 1, 0, 0, 0, 1004, 103, 1, 0, 0,
		0, 1005, 1003, 1, 0, 0, 0, 1006, 1011, 3, 102, 51, 0, 1007, 1008, 5, 9,
		0, 0, 1008, 1010, 3, 102, 51, 0, 1009, 1007, 1, 0, 0, 0, 1010, 1013, 1,
		0, 0, 0, 1011, 1009, 1, 0, 0, 0, 1011, 1012, 1, 0, 0, 0, 1012, 105, 1,
		0, 0, 0, 1013, 1011, 1, 0, 0, 0, 1014, 1015, 5, 126, 0, 0, 1015, 1016,
		3, 14, 7, 0, 1016, 1017, 5, 6, 0, 0, 1017, 1095, 1, 0, 0, 0, 1018, 1023,
		3, 108, 54, 0, 1019, 1020, 5, 9, 0, 0, 1020, 1022, 3, 108, 54, 0, 1021,
		1019, 1, 0, 0, 0, 1022, 1025, 1, 0, 0, 0, 1023, 1021, 1, 0, 0, 0, 1023,
		1024, 1, 0, 0, 0, 1024, 1026, 1, 0, 0, 0, 1025, 1023, 1, 0, 0, 0, 1026,
		1027, 5, 30, 0, 0, 1027, 1029, 1, 0, 0, 0, 1028, 1018, 1, 0, 0, 0, 1028,
		1029, 1, 0, 0, 0, 1029, 1030, 1, 0, 0, 0, 1030, 1031, 3, 110, 55, 0, 1031,
		1032, 5, 6, 0, 0, 1032, 1095, 1, 0, 0, 0, 1033, 1035, 3, 102, 51, 0, 1034,
		1036, 3, 14, 7, 0, 1035, 1034, 1, 0, 0, 0, 1035, 1036, 1, 0, 0, 0, 1036,
		1037, 1, 0, 0, 0, 1037, 1038, 5, 30, 0, 0, 1038, 1039, 3, 102, 51, 0, 1039,
		1040, 5, 6, 0, 0, 1040, 1095, 1, 0, 0, 0, 1041, 1042, 5, 107, 0, 0, 1042,
		1043, 5, 126, 0, 0, 1043, 1047, 5, 63, 0, 0, 1044, 1048, 3, 114, 57, 0,
		1045, 1048, 3, 18, 9, 0, 1046, 1048, 3, 60, 30, 0, 1047, 1044, 1, 0, 0,
		0, 1047, 1045, 1, 0, 0, 0, 1047, 1046, 1, 0, 0, 0, 1048, 1049, 1, 0, 0,
		0, 1049, 1053, 5, 1, 0, 0, 1050, 1052, 3, 106, 53, 0, 1051, 1050, 1, 0,
		0, 0, 1052, 1055, 1, 0, 0, 0, 1053, 1051, 1, 0, 0, 0, 1053, 1054, 1, 0,
		0, 0, 1054, 1056, 1, 0, 0, 0, 1055, 1053, 1, 0, 0, 0, 1056, 1057, 5, 2,
		0, 0, 1057, 1095, 1, 0, 0, 0, 1058, 1059, 5, 108, 0, 0, 1059, 1064, 3,
		112, 56, 0, 1060, 1061, 5, 109, 0, 0, 1061, 1063, 3, 112, 56, 0, 1062,
		1060, 1, 0, 0, 0, 1063, 1066, 1, 0, 0, 0, 1064, 1062, 1, 0, 0, 0, 1064,
		1065, 1, 0, 0, 0, 1065, 1076, 1, 0, 0, 0, 1066, 1064, 1, 0, 0, 0, 1067,
		1068, 5, 110, 0, 0, 1068, 1072, 5, 1, 0, 0, 1069, 1071, 3, 106, 53, 0,
		1070, 1069, 1, 0, 0, 0, 1071, 1074, 1, 0, 0, 0, 1072, 1070, 1, 0, 0, 0,
		1072, 1073, 1, 0, 0, 0, 1073, 1075, 1, 0, 0, 0, 1074, 1072, 1, 0, 0, 0,
		1075, 1077, 5, 2, 0, 0, 1076, 1067, 1, 0, 0, 0, 1076, 1077, 1, 0, 0, 0,
		1077, 1095, 1, 0, 0, 0, 1078, 1079, 3, 60, 30, 0, 1079, 1080, 5, 6, 0,
		0, 1080, 1095, 1, 0, 0, 0, 1081, 1082, 5, 111, 0, 0, 1082, 1095, 5, 6,
		0, 0, 1083, 1086, 5, 112, 0, 0, 1084, 1087, 3, 104, 52, 0, 1085, 1087,
		3, 60, 30, 0, 1086, 1084, 1, 0, 0, 0, 1086, 1085, 1, 0, 0, 0, 1086, 1087,
		1, 0, 0, 0, 1087, 1088, 1, 0, 0, 0, 1088, 1095, 5, 6, 0, 0, 1089, 1090,
		5, 112, 0, 0, 1090, 1091, 5, 113, 0, 0, 1091, 1092, 3, 104, 52, 0, 1092,
		1093, 5, 6, 0, 0, 1093, 1095, 1, 0, 0, 0, 1094, 1014, 1, 0, 0, 0, 1094,
		1028, 1, 0, 0, 0, 1094, 1033, 1, 0, 0, 0, 1094, 1041, 1, 0, 0, 0, 1094,
		1058, 1, 0, 0, 0, 1094, 1078, 1, 0, 0, 0, 1094, 1081, 1, 0, 0, 0, 1094,
		1083, 1, 0, 0, 0, 1094, 1089, 1, 0, 0, 0, 1095, 107, 1, 0, 0, 0, 1096,
		1097, 7, 15, 0, 0, 1097, 109, 1, 0, 0, 0, 1098, 1099, 5, 125, 0, 0, 1099,
		1101, 5, 7, 0, 0, 1100, 1102, 3, 104, 52, 0, 1101, 1100, 1, 0, 0, 0, 1101,
		1102, 1, 0, 0, 0, 1102, 1103, 1, 0, 0, 0, 1103, 1117, 5, 8, 0, 0, 1104,
		1105, 5, 125, 0, 0, 1105, 1106, 5, 3, 0, 0, 1106, 1107, 3, 102, 51, 0,
		1107, 1108, 5, 9, 0, 0, 1108, 1109, 3, 102, 51, 0, 1109, 1110, 5, 4, 0,
		0, 1110, 1112, 5, 7, 0, 0, 1111, 1113, 3, 104, 52, 0, 1112, 1111, 1, 0,
		0, 0, 1112, 1113, 1, 0, 0, 0, 1113, 1114, 1, 0, 0, 0, 1114, 1115, 5, 8,
		0, 0, 1115, 1117, 1, 0, 0, 0, 1116, 1098, 1, 0, 0, 0, 1116, 1104, 1, 0,
		0, 0, 1117, 111, 1, 0, 0, 0, 1118, 1119, 3, 102, 51, 0, 1119, 1123, 5,
		1, 0, 0, 1120, 1122, 3, 106, 53, 0, 1121, 1120, 1, 0, 0, 0, 1122, 1125,
		1, 0, 0, 0, 1123, 1121, 1, 0, 0, 0, 1123, 1124, 1, 0, 0, 0, 1124, 1126,
		1, 0, 0, 0, 1125, 1123, 1, 0, 0, 0, 1126, 1127, 5, 2, 0, 0, 1127, 113,
		1, 0, 0, 0, 1128, 1129, 3, 102, 51, 0, 1129, 1130, 5, 31, 0, 0, 1130, 1131,
		3, 102, 51, 0, 1131, 115, 1, 0, 0, 0, 157, 130, 134, 142, 148, 155, 164,
		168, 180, 189, 191, 205, 208, 228, 233, 247, 251, 261, 273, 286, 292, 297,
		299, 302, 307, 313, 318, 321, 328, 338, 349, 355, 361, 367, 374, 381, 387,
		396, 403, 409, 412, 424, 428, 432, 442, 453, 456, 462, 471, 474, 488, 498,
		501, 505, 509, 513, 517, 521, 525, 529, 536, 544, 547, 551, 558, 560, 564,
		567, 573, 576, 580, 583, 585, 595, 598, 603, 606, 611, 614, 622, 630, 633,
		637, 647, 650, 656, 669, 673, 682, 684, 695, 700, 702, 708, 711, 715, 720,
		724, 728, 733, 737, 743, 749, 754, 758, 763, 766, 772, 774, 781, 787, 817,
		823, 827, 833, 840, 848, 850, 852, 865, 871, 875, 887, 891, 898, 905, 911,
		918, 921, 926, 932, 936, 940, 944, 948, 954, 958, 980, 986, 991, 999, 1001,
		1003, 1011, 1023, 1028, 1035, 1047, 1053, 1064, 1072, 1076, 1086, 1094,
		1101, 1112, 1116, 1123,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// KuneiformParserInit initializes any static state used to implement KuneiformParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewKuneiformParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func KuneiformParserInit() {
	staticData := &KuneiformParserParserStaticData
	staticData.once.Do(kuneiformparserParserInit)
}

// NewKuneiformParser produces a new parser instance for the optional input antlr.TokenStream.
func NewKuneiformParser(input antlr.TokenStream) *KuneiformParser {
	KuneiformParserInit()
	this := new(KuneiformParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &KuneiformParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "KuneiformParser.g4"

	return this
}

// KuneiformParser tokens.
const (
	KuneiformParserEOF                 = antlr.TokenEOF
	KuneiformParserLBRACE              = 1
	KuneiformParserRBRACE              = 2
	KuneiformParserLBRACKET            = 3
	KuneiformParserRBRACKET            = 4
	KuneiformParserCOL                 = 5
	KuneiformParserSCOL                = 6
	KuneiformParserLPAREN              = 7
	KuneiformParserRPAREN              = 8
	KuneiformParserCOMMA               = 9
	KuneiformParserAT                  = 10
	KuneiformParserEXCL                = 11
	KuneiformParserPERIOD              = 12
	KuneiformParserCONCAT              = 13
	KuneiformParserSTAR                = 14
	KuneiformParserEQUALS              = 15
	KuneiformParserEQUATE              = 16
	KuneiformParserHASH                = 17
	KuneiformParserDOLLAR              = 18
	KuneiformParserMOD                 = 19
	KuneiformParserPLUS                = 20
	KuneiformParserMINUS               = 21
	KuneiformParserDIV                 = 22
	KuneiformParserNEQ                 = 23
	KuneiformParserLT                  = 24
	KuneiformParserLTE                 = 25
	KuneiformParserGT                  = 26
	KuneiformParserGTE                 = 27
	KuneiformParserTYPE_CAST           = 28
	KuneiformParserUNDERSCORE          = 29
	KuneiformParserASSIGN              = 30
	KuneiformParserRANGE               = 31
	KuneiformParserDOUBLE_QUOTE        = 32
	KuneiformParserDATABASE            = 33
	KuneiformParserUSE                 = 34
	KuneiformParserTABLE               = 35
	KuneiformParserACTION              = 36
	KuneiformParserPROCEDURE           = 37
	KuneiformParserPUBLIC              = 38
	KuneiformParserPRIVATE             = 39
	KuneiformParserVIEW                = 40
	KuneiformParserOWNER               = 41
	KuneiformParserFOREIGN             = 42
	KuneiformParserPRIMARY             = 43
	KuneiformParserKEY                 = 44
	KuneiformParserON                  = 45
	KuneiformParserDO                  = 46
	KuneiformParserUNIQUE              = 47
	KuneiformParserCASCADE             = 48
	KuneiformParserRESTRICT            = 49
	KuneiformParserSET                 = 50
	KuneiformParserDEFAULT             = 51
	KuneiformParserNULL                = 52
	KuneiformParserDELETE              = 53
	KuneiformParserUPDATE              = 54
	KuneiformParserREFERENCES          = 55
	KuneiformParserREF                 = 56
	KuneiformParserNOT                 = 57
	KuneiformParserINDEX               = 58
	KuneiformParserAND                 = 59
	KuneiformParserOR                  = 60
	KuneiformParserLIKE                = 61
	KuneiformParserILIKE               = 62
	KuneiformParserIN                  = 63
	KuneiformParserBETWEEN             = 64
	KuneiformParserIS                  = 65
	KuneiformParserEXISTS              = 66
	KuneiformParserALL                 = 67
	KuneiformParserANY                 = 68
	KuneiformParserJOIN                = 69
	KuneiformParserLEFT                = 70
	KuneiformParserRIGHT               = 71
	KuneiformParserINNER               = 72
	KuneiformParserAS                  = 73
	KuneiformParserASC                 = 74
	KuneiformParserDESC                = 75
	KuneiformParserLIMIT               = 76
	KuneiformParserOFFSET              = 77
	KuneiformParserORDER               = 78
	KuneiformParserBY                  = 79
	KuneiformParserGROUP               = 80
	KuneiformParserHAVING              = 81
	KuneiformParserRETURNS             = 82
	KuneiformParserNO                  = 83
	KuneiformParserWITH                = 84
	KuneiformParserCASE                = 85
	KuneiformParserWHEN                = 86
	KuneiformParserTHEN                = 87
	KuneiformParserEND                 = 88
	KuneiformParserDISTINCT            = 89
	KuneiformParserFROM                = 90
	KuneiformParserWHERE               = 91
	KuneiformParserCOLLATE             = 92
	KuneiformParserSELECT              = 93
	KuneiformParserINSERT              = 94
	KuneiformParserVALUES              = 95
	KuneiformParserFULL                = 96
	KuneiformParserUNION               = 97
	KuneiformParserINTERSECT           = 98
	KuneiformParserEXCEPT              = 99
	KuneiformParserNULLS               = 100
	KuneiformParserFIRST               = 101
	KuneiformParserLAST                = 102
	KuneiformParserRETURNING           = 103
	KuneiformParserINTO                = 104
	KuneiformParserCONFLICT            = 105
	KuneiformParserNOTHING             = 106
	KuneiformParserFOR                 = 107
	KuneiformParserIF                  = 108
	KuneiformParserELSEIF              = 109
	KuneiformParserELSE                = 110
	KuneiformParserBREAK               = 111
	KuneiformParserRETURN              = 112
	KuneiformParserNEXT                = 113
	KuneiformParserSTRING_             = 114
	KuneiformParserTRUE                = 115
	KuneiformParserFALSE               = 116
	KuneiformParserDIGITS_             = 117
	KuneiformParserBINARY_             = 118
	KuneiformParserLEGACY_FOREIGN_KEY  = 119
	KuneiformParserLEGACY_ON_UPDATE    = 120
	KuneiformParserLEGACY_ON_DELETE    = 121
	KuneiformParserLEGACY_SET_DEFAULT  = 122
	KuneiformParserLEGACY_SET_NULL     = 123
	KuneiformParserLEGACY_NO_ACTION    = 124
	KuneiformParserIDENTIFIER          = 125
	KuneiformParserVARIABLE            = 126
	KuneiformParserCONTEXTUAL_VARIABLE = 127
	KuneiformParserHASH_IDENTIFIER     = 128
	KuneiformParserWS                  = 129
	KuneiformParserBLOCK_COMMENT       = 130
	KuneiformParserLINE_COMMENT        = 131
)

// KuneiformParser rules.
const (
	KuneiformParserRULE_schema_entry                  = 0
	KuneiformParserRULE_sql_entry                     = 1
	KuneiformParserRULE_action_entry                  = 2
	KuneiformParserRULE_procedure_entry               = 3
	KuneiformParserRULE_literal                       = 4
	KuneiformParserRULE_identifier                    = 5
	KuneiformParserRULE_identifier_list               = 6
	KuneiformParserRULE_type                          = 7
	KuneiformParserRULE_type_cast                     = 8
	KuneiformParserRULE_variable                      = 9
	KuneiformParserRULE_variable_list                 = 10
	KuneiformParserRULE_schema                        = 11
	KuneiformParserRULE_annotation                    = 12
	KuneiformParserRULE_database_declaration          = 13
	KuneiformParserRULE_use_declaration               = 14
	KuneiformParserRULE_table_declaration             = 15
	KuneiformParserRULE_column_def                    = 16
	KuneiformParserRULE_index_def                     = 17
	KuneiformParserRULE_foreign_key_def               = 18
	KuneiformParserRULE_foreign_key_action            = 19
	KuneiformParserRULE_type_list                     = 20
	KuneiformParserRULE_named_type_list               = 21
	KuneiformParserRULE_typed_variable_list           = 22
	KuneiformParserRULE_constraint                    = 23
	KuneiformParserRULE_access_modifier               = 24
	KuneiformParserRULE_action_declaration            = 25
	KuneiformParserRULE_procedure_declaration         = 26
	KuneiformParserRULE_foreign_procedure_declaration = 27
	KuneiformParserRULE_procedure_return              = 28
	KuneiformParserRULE_sql                           = 29
	KuneiformParserRULE_sql_statement                 = 30
	KuneiformParserRULE_common_table_expression       = 31
	KuneiformParserRULE_select_statement              = 32
	KuneiformParserRULE_compound_operator             = 33
	KuneiformParserRULE_ordering_term                 = 34
	KuneiformParserRULE_select_core                   = 35
	KuneiformParserRULE_relation                      = 36
	KuneiformParserRULE_join                          = 37
	KuneiformParserRULE_result_column                 = 38
	KuneiformParserRULE_update_statement              = 39
	KuneiformParserRULE_update_set_clause             = 40
	KuneiformParserRULE_insert_statement              = 41
	KuneiformParserRULE_upsert_clause                 = 42
	KuneiformParserRULE_delete_statement              = 43
	KuneiformParserRULE_sql_expr                      = 44
	KuneiformParserRULE_when_then_clause              = 45
	KuneiformParserRULE_sql_expr_list                 = 46
	KuneiformParserRULE_sql_function_call             = 47
	KuneiformParserRULE_action_block                  = 48
	KuneiformParserRULE_action_statement              = 49
	KuneiformParserRULE_procedure_block               = 50
	KuneiformParserRULE_procedure_expr                = 51
	KuneiformParserRULE_procedure_expr_list           = 52
	KuneiformParserRULE_proc_statement                = 53
	KuneiformParserRULE_variable_or_underscore        = 54
	KuneiformParserRULE_procedure_function_call       = 55
	KuneiformParserRULE_if_then_block                 = 56
	KuneiformParserRULE_range                         = 57
)

// ISchema_entryContext is an interface to support dynamic dispatch.
type ISchema_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Schema() ISchemaContext
	EOF() antlr.TerminalNode

	// IsSchema_entryContext differentiates from other interfaces.
	IsSchema_entryContext()
}

type Schema_entryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_entryContext() *Schema_entryContext {
	var p = new(Schema_entryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_schema_entry
	return p
}

func InitEmptySchema_entryContext(p *Schema_entryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_schema_entry
}

func (*Schema_entryContext) IsSchema_entryContext() {}

func NewSchema_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_entryContext {
	var p = new(Schema_entryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_schema_entry

	return p
}

func (s *Schema_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_entryContext) Schema() ISchemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchemaContext)
}

func (s *Schema_entryContext) EOF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEOF, 0)
}

func (s *Schema_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Schema_entryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSchema_entry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Schema_entry() (localctx ISchema_entryContext) {
	localctx = NewSchema_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, KuneiformParserRULE_schema_entry)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(116)
		p.Schema()
	}
	{
		p.SetState(117)
		p.Match(KuneiformParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_entryContext is an interface to support dynamic dispatch.
type ISql_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sql() ISqlContext
	EOF() antlr.TerminalNode

	// IsSql_entryContext differentiates from other interfaces.
	IsSql_entryContext()
}

type Sql_entryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_entryContext() *Sql_entryContext {
	var p = new(Sql_entryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_entry
	return p
}

func InitEmptySql_entryContext(p *Sql_entryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_entry
}

func (*Sql_entryContext) IsSql_entryContext() {}

func NewSql_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_entryContext {
	var p = new(Sql_entryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql_entry

	return p
}

func (s *Sql_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_entryContext) Sql() ISqlContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlContext)
}

func (s *Sql_entryContext) EOF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEOF, 0)
}

func (s *Sql_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_entryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSql_entry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql_entry() (localctx ISql_entryContext) {
	localctx = NewSql_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, KuneiformParserRULE_sql_entry)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(119)
		p.Sql()
	}
	{
		p.SetState(120)
		p.Match(KuneiformParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_entryContext is an interface to support dynamic dispatch.
type IAction_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Action_block() IAction_blockContext
	EOF() antlr.TerminalNode

	// IsAction_entryContext differentiates from other interfaces.
	IsAction_entryContext()
}

type Action_entryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAction_entryContext() *Action_entryContext {
	var p = new(Action_entryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_entry
	return p
}

func InitEmptyAction_entryContext(p *Action_entryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_entry
}

func (*Action_entryContext) IsAction_entryContext() {}

func NewAction_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_entryContext {
	var p = new(Action_entryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_action_entry

	return p
}

func (s *Action_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_entryContext) Action_block() IAction_blockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_blockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_blockContext)
}

func (s *Action_entryContext) EOF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEOF, 0)
}

func (s *Action_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Action_entryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAction_entry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Action_entry() (localctx IAction_entryContext) {
	localctx = NewAction_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, KuneiformParserRULE_action_entry)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(122)
		p.Action_block()
	}
	{
		p.SetState(123)
		p.Match(KuneiformParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_entryContext is an interface to support dynamic dispatch.
type IProcedure_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Procedure_block() IProcedure_blockContext
	EOF() antlr.TerminalNode

	// IsProcedure_entryContext differentiates from other interfaces.
	IsProcedure_entryContext()
}

type Procedure_entryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_entryContext() *Procedure_entryContext {
	var p = new(Procedure_entryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_entry
	return p
}

func InitEmptyProcedure_entryContext(p *Procedure_entryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_entry
}

func (*Procedure_entryContext) IsProcedure_entryContext() {}

func NewProcedure_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_entryContext {
	var p = new(Procedure_entryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_procedure_entry

	return p
}

func (s *Procedure_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_entryContext) Procedure_block() IProcedure_blockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_blockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_blockContext)
}

func (s *Procedure_entryContext) EOF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEOF, 0)
}

func (s *Procedure_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_entryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitProcedure_entry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Procedure_entry() (localctx IProcedure_entryContext) {
	localctx = NewProcedure_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, KuneiformParserRULE_procedure_entry)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(125)
		p.Procedure_block()
	}
	{
		p.SetState(126)
		p.Match(KuneiformParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) CopyAll(ctx *LiteralContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type String_literalContext struct {
	LiteralContext
}

func NewString_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *String_literalContext {
	var p = new(String_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *String_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literalContext) STRING_() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTRING_, 0)
}

func (s *String_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitString_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Decimal_literalContext struct {
	LiteralContext
}

func NewDecimal_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Decimal_literalContext {
	var p = new(Decimal_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Decimal_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Decimal_literalContext) AllDIGITS_() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserDIGITS_)
}

func (s *Decimal_literalContext) DIGITS_(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIGITS_, i)
}

func (s *Decimal_literalContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Decimal_literalContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Decimal_literalContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Decimal_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDecimal_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Null_literalContext struct {
	LiteralContext
}

func NewNull_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Null_literalContext {
	var p = new(Null_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Null_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_literalContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Null_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitNull_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Boolean_literalContext struct {
	LiteralContext
}

func NewBoolean_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Boolean_literalContext {
	var p = new(Boolean_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Boolean_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_literalContext) TRUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTRUE, 0)
}

func (s *Boolean_literalContext) FALSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFALSE, 0)
}

func (s *Boolean_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitBoolean_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Integer_literalContext struct {
	LiteralContext
}

func NewInteger_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Integer_literalContext {
	var p = new(Integer_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Integer_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_literalContext) DIGITS_() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIGITS_, 0)
}

func (s *Integer_literalContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Integer_literalContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Integer_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitInteger_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Binary_literalContext struct {
	LiteralContext
}

func NewBinary_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Binary_literalContext {
	var p = new(Binary_literalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *Binary_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binary_literalContext) BINARY_() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBINARY_, 0)
}

func (s *Binary_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitBinary_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, KuneiformParserRULE_literal)
	var _la int

	p.SetState(142)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		localctx = NewString_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(128)
			p.Match(KuneiformParserSTRING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewInteger_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(130)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserPLUS || _la == KuneiformParserMINUS {
			{
				p.SetState(129)
				_la = p.GetTokenStream().LA(1)

				if !(_la == KuneiformParserPLUS || _la == KuneiformParserMINUS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(132)
			p.Match(KuneiformParserDIGITS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewDecimal_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(134)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserPLUS || _la == KuneiformParserMINUS {
			{
				p.SetState(133)
				_la = p.GetTokenStream().LA(1)

				if !(_la == KuneiformParserPLUS || _la == KuneiformParserMINUS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(136)
			p.Match(KuneiformParserDIGITS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(137)
			p.Match(KuneiformParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(138)
			p.Match(KuneiformParserDIGITS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewBoolean_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(139)
			_la = p.GetTokenStream().LA(1)

			if !(_la == KuneiformParserTRUE || _la == KuneiformParserFALSE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 5:
		localctx = NewNull_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(140)
			p.Match(KuneiformParserNULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		localctx = NewBinary_literalContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(141)
			p.Match(KuneiformParserBINARY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDOUBLE_QUOTE() []antlr.TerminalNode
	DOUBLE_QUOTE(i int) antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) AllDOUBLE_QUOTE() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserDOUBLE_QUOTE)
}

func (s *IdentifierContext) DOUBLE_QUOTE(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserDOUBLE_QUOTE, i)
}

func (s *IdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, KuneiformParserRULE_identifier)
	p.SetState(148)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserDOUBLE_QUOTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(144)
			p.Match(KuneiformParserDOUBLE_QUOTE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(145)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(146)
			p.Match(KuneiformParserDOUBLE_QUOTE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(147)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifier_listContext is an interface to support dynamic dispatch.
type IIdentifier_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsIdentifier_listContext differentiates from other interfaces.
	IsIdentifier_listContext()
}

type Identifier_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_listContext() *Identifier_listContext {
	var p = new(Identifier_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_identifier_list
	return p
}

func InitEmptyIdentifier_listContext(p *Identifier_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_identifier_list
}

func (*Identifier_listContext) IsIdentifier_listContext() {}

func NewIdentifier_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_listContext {
	var p = new(Identifier_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_identifier_list

	return p
}

func (s *Identifier_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_listContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Identifier_listContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Identifier_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Identifier_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIdentifier_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Identifier_list() (localctx IIdentifier_listContext) {
	localctx = NewIdentifier_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, KuneiformParserRULE_identifier_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(150)
		p.Identifier()
	}
	p.SetState(155)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(151)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(152)
			p.Identifier()
		}

		p.SetState(157)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeContext is an interface to support dynamic dispatch.
type ITypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	AllDIGITS_() []antlr.TerminalNode
	DIGITS_(i int) antlr.TerminalNode
	COMMA() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	LBRACKET() antlr.TerminalNode
	RBRACKET() antlr.TerminalNode

	// IsTypeContext differentiates from other interfaces.
	IsTypeContext()
}

type TypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeContext() *TypeContext {
	var p = new(TypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type
	return p
}

func InitEmptyTypeContext(p *TypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type
}

func (*TypeContext) IsTypeContext() {}

func NewTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeContext {
	var p = new(TypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_type

	return p
}

func (s *TypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *TypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *TypeContext) AllDIGITS_() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserDIGITS_)
}

func (s *TypeContext) DIGITS_(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIGITS_, i)
}

func (s *TypeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, 0)
}

func (s *TypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *TypeContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *TypeContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *TypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Type_() (localctx ITypeContext) {
	localctx = NewTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, KuneiformParserRULE_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(158)
		p.Match(KuneiformParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(164)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(159)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(160)
			p.Match(KuneiformParserDIGITS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(161)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(162)
			p.Match(KuneiformParserDIGITS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(163)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(168)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 6, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(166)
			p.Match(KuneiformParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(167)
			p.Match(KuneiformParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_castContext is an interface to support dynamic dispatch.
type IType_castContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TYPE_CAST() antlr.TerminalNode
	Type_() ITypeContext

	// IsType_castContext differentiates from other interfaces.
	IsType_castContext()
}

type Type_castContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_castContext() *Type_castContext {
	var p = new(Type_castContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type_cast
	return p
}

func InitEmptyType_castContext(p *Type_castContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type_cast
}

func (*Type_castContext) IsType_castContext() {}

func NewType_castContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_castContext {
	var p = new(Type_castContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_type_cast

	return p
}

func (s *Type_castContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_castContext) TYPE_CAST() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTYPE_CAST, 0)
}

func (s *Type_castContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Type_castContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_castContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_castContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitType_cast(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Type_cast() (localctx IType_castContext) {
	localctx = NewType_castContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, KuneiformParserRULE_type_cast)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(170)
		p.Match(KuneiformParserTYPE_CAST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(171)
		p.Type_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VARIABLE() antlr.TerminalNode
	CONTEXTUAL_VARIABLE() antlr.TerminalNode

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable
	return p
}

func InitEmptyVariableContext(p *VariableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVARIABLE, 0)
}

func (s *VariableContext) CONTEXTUAL_VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONTEXTUAL_VARIABLE, 0)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Variable() (localctx IVariableContext) {
	localctx = NewVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, KuneiformParserRULE_variable)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(173)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KuneiformParserVARIABLE || _la == KuneiformParserCONTEXTUAL_VARIABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariable_listContext is an interface to support dynamic dispatch.
type IVariable_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllVariable() []IVariableContext
	Variable(i int) IVariableContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsVariable_listContext differentiates from other interfaces.
	IsVariable_listContext()
}

type Variable_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_listContext() *Variable_listContext {
	var p = new(Variable_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable_list
	return p
}

func InitEmptyVariable_listContext(p *Variable_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable_list
}

func (*Variable_listContext) IsVariable_listContext() {}

func NewVariable_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_listContext {
	var p = new(Variable_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_variable_list

	return p
}

func (s *Variable_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_listContext) AllVariable() []IVariableContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableContext); ok {
			len++
		}
	}

	tst := make([]IVariableContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableContext); ok {
			tst[i] = t.(IVariableContext)
			i++
		}
	}

	return tst
}

func (s *Variable_listContext) Variable(i int) IVariableContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Variable_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Variable_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Variable_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitVariable_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Variable_list() (localctx IVariable_listContext) {
	localctx = NewVariable_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, KuneiformParserRULE_variable_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(175)
		p.Variable()
	}
	p.SetState(180)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(176)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(177)
			p.Variable()
		}

		p.SetState(182)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISchemaContext is an interface to support dynamic dispatch.
type ISchemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Database_declaration() IDatabase_declarationContext
	AllUse_declaration() []IUse_declarationContext
	Use_declaration(i int) IUse_declarationContext
	AllTable_declaration() []ITable_declarationContext
	Table_declaration(i int) ITable_declarationContext
	AllAction_declaration() []IAction_declarationContext
	Action_declaration(i int) IAction_declarationContext
	AllProcedure_declaration() []IProcedure_declarationContext
	Procedure_declaration(i int) IProcedure_declarationContext
	AllForeign_procedure_declaration() []IForeign_procedure_declarationContext
	Foreign_procedure_declaration(i int) IForeign_procedure_declarationContext

	// IsSchemaContext differentiates from other interfaces.
	IsSchemaContext()
}

type SchemaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchemaContext() *SchemaContext {
	var p = new(SchemaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_schema
	return p
}

func InitEmptySchemaContext(p *SchemaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_schema
}

func (*SchemaContext) IsSchemaContext() {}

func NewSchemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SchemaContext {
	var p = new(SchemaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_schema

	return p
}

func (s *SchemaContext) GetParser() antlr.Parser { return s.parser }

func (s *SchemaContext) Database_declaration() IDatabase_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_declarationContext)
}

func (s *SchemaContext) AllUse_declaration() []IUse_declarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUse_declarationContext); ok {
			len++
		}
	}

	tst := make([]IUse_declarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUse_declarationContext); ok {
			tst[i] = t.(IUse_declarationContext)
			i++
		}
	}

	return tst
}

func (s *SchemaContext) Use_declaration(i int) IUse_declarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUse_declarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUse_declarationContext)
}

func (s *SchemaContext) AllTable_declaration() []ITable_declarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_declarationContext); ok {
			len++
		}
	}

	tst := make([]ITable_declarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_declarationContext); ok {
			tst[i] = t.(ITable_declarationContext)
			i++
		}
	}

	return tst
}

func (s *SchemaContext) Table_declaration(i int) ITable_declarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_declarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_declarationContext)
}

func (s *SchemaContext) AllAction_declaration() []IAction_declarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_declarationContext); ok {
			len++
		}
	}

	tst := make([]IAction_declarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_declarationContext); ok {
			tst[i] = t.(IAction_declarationContext)
			i++
		}
	}

	return tst
}

func (s *SchemaContext) Action_declaration(i int) IAction_declarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_declarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_declarationContext)
}

func (s *SchemaContext) AllProcedure_declaration() []IProcedure_declarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_declarationContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_declarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_declarationContext); ok {
			tst[i] = t.(IProcedure_declarationContext)
			i++
		}
	}

	return tst
}

func (s *SchemaContext) Procedure_declaration(i int) IProcedure_declarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_declarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_declarationContext)
}

func (s *SchemaContext) AllForeign_procedure_declaration() []IForeign_procedure_declarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IForeign_procedure_declarationContext); ok {
			len++
		}
	}

	tst := make([]IForeign_procedure_declarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IForeign_procedure_declarationContext); ok {
			tst[i] = t.(IForeign_procedure_declarationContext)
			i++
		}
	}

	return tst
}

func (s *SchemaContext) Foreign_procedure_declaration(i int) IForeign_procedure_declarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_procedure_declarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_procedure_declarationContext)
}

func (s *SchemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SchemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSchema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Schema() (localctx ISchemaContext) {
	localctx = NewSchemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, KuneiformParserRULE_schema)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(183)
		p.Database_declaration()
	}
	p.SetState(191)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4655744548864) != 0) || _la == KuneiformParserCONTEXTUAL_VARIABLE {
		p.SetState(189)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 8, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(184)
				p.Use_declaration()
			}

		case 2:
			{
				p.SetState(185)
				p.Table_declaration()
			}

		case 3:
			{
				p.SetState(186)
				p.Action_declaration()
			}

		case 4:
			{
				p.SetState(187)
				p.Procedure_declaration()
			}

		case 5:
			{
				p.SetState(188)
				p.Foreign_procedure_declaration()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

		p.SetState(193)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONTEXTUAL_VARIABLE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	AllEQUALS() []antlr.TerminalNode
	EQUALS(i int) antlr.TerminalNode
	AllLiteral() []ILiteralContext
	Literal(i int) ILiteralContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_annotation
	return p
}

func InitEmptyAnnotationContext(p *AnnotationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_annotation
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) CONTEXTUAL_VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONTEXTUAL_VARIABLE, 0)
}

func (s *AnnotationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *AnnotationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *AnnotationContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserIDENTIFIER)
}

func (s *AnnotationContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, i)
}

func (s *AnnotationContext) AllEQUALS() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserEQUALS)
}

func (s *AnnotationContext) EQUALS(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, i)
}

func (s *AnnotationContext) AllLiteral() []ILiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILiteralContext); ok {
			len++
		}
	}

	tst := make([]ILiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILiteralContext); ok {
			tst[i] = t.(ILiteralContext)
			i++
		}
	}

	return tst
}

func (s *AnnotationContext) Literal(i int) ILiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *AnnotationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *AnnotationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Annotation() (localctx IAnnotationContext) {
	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, KuneiformParserRULE_annotation)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(194)
		p.Match(KuneiformParserCONTEXTUAL_VARIABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(195)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(208)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserIDENTIFIER {
		{
			p.SetState(196)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(197)
			p.Match(KuneiformParserEQUALS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(198)
			p.Literal()
		}
		p.SetState(205)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(199)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(200)
				p.Match(KuneiformParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(201)
				p.Match(KuneiformParserEQUALS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(202)
				p.Literal()
			}

			p.SetState(207)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(210)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDatabase_declarationContext is an interface to support dynamic dispatch.
type IDatabase_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DATABASE() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	SCOL() antlr.TerminalNode

	// IsDatabase_declarationContext differentiates from other interfaces.
	IsDatabase_declarationContext()
}

type Database_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_declarationContext() *Database_declarationContext {
	var p = new(Database_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_database_declaration
	return p
}

func InitEmptyDatabase_declarationContext(p *Database_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_database_declaration
}

func (*Database_declarationContext) IsDatabase_declarationContext() {}

func NewDatabase_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_declarationContext {
	var p = new(Database_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_database_declaration

	return p
}

func (s *Database_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_declarationContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDATABASE, 0)
}

func (s *Database_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Database_declarationContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Database_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDatabase_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Database_declaration() (localctx IDatabase_declarationContext) {
	localctx = NewDatabase_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, KuneiformParserRULE_database_declaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(212)
		p.Match(KuneiformParserDATABASE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(213)
		p.Match(KuneiformParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(214)
		p.Match(KuneiformParserSCOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUse_declarationContext is an interface to support dynamic dispatch.
type IUse_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	USE() antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	AS() antlr.TerminalNode
	SCOL() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	AllCOL() []antlr.TerminalNode
	COL(i int) antlr.TerminalNode
	AllLiteral() []ILiteralContext
	Literal(i int) ILiteralContext
	RBRACE() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsUse_declarationContext differentiates from other interfaces.
	IsUse_declarationContext()
}

type Use_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUse_declarationContext() *Use_declarationContext {
	var p = new(Use_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_use_declaration
	return p
}

func InitEmptyUse_declarationContext(p *Use_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_use_declaration
}

func (*Use_declarationContext) IsUse_declarationContext() {}

func NewUse_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_declarationContext {
	var p = new(Use_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_use_declaration

	return p
}

func (s *Use_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_declarationContext) USE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUSE, 0)
}

func (s *Use_declarationContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserIDENTIFIER)
}

func (s *Use_declarationContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, i)
}

func (s *Use_declarationContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Use_declarationContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Use_declarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Use_declarationContext) AllCOL() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOL)
}

func (s *Use_declarationContext) COL(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOL, i)
}

func (s *Use_declarationContext) AllLiteral() []ILiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILiteralContext); ok {
			len++
		}
	}

	tst := make([]ILiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILiteralContext); ok {
			tst[i] = t.(ILiteralContext)
			i++
		}
	}

	return tst
}

func (s *Use_declarationContext) Literal(i int) ILiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *Use_declarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Use_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Use_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Use_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Use_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUse_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Use_declaration() (localctx IUse_declarationContext) {
	localctx = NewUse_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, KuneiformParserRULE_use_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(216)
		p.Match(KuneiformParserUSE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(217)
		p.Match(KuneiformParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(233)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLBRACE {
		{
			p.SetState(218)
			p.Match(KuneiformParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(219)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(220)
			p.Match(KuneiformParserCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(221)
			p.Literal()
		}
		p.SetState(228)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(222)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(223)
				p.Match(KuneiformParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(224)
				p.Match(KuneiformParserCOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(225)
				p.Literal()
			}

			p.SetState(230)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(231)
			p.Match(KuneiformParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(235)
		p.Match(KuneiformParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(236)
		p.Match(KuneiformParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(237)
		p.Match(KuneiformParserSCOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_declarationContext is an interface to support dynamic dispatch.
type ITable_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TABLE() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	AllColumn_def() []IColumn_defContext
	Column_def(i int) IColumn_defContext
	RBRACE() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllIndex_def() []IIndex_defContext
	Index_def(i int) IIndex_defContext
	AllForeign_key_def() []IForeign_key_defContext
	Foreign_key_def(i int) IForeign_key_defContext

	// IsTable_declarationContext differentiates from other interfaces.
	IsTable_declarationContext()
}

type Table_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_declarationContext() *Table_declarationContext {
	var p = new(Table_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_table_declaration
	return p
}

func InitEmptyTable_declarationContext(p *Table_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_table_declaration
}

func (*Table_declarationContext) IsTable_declarationContext() {}

func NewTable_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_declarationContext {
	var p = new(Table_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_table_declaration

	return p
}

func (s *Table_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_declarationContext) TABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTABLE, 0)
}

func (s *Table_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Table_declarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Table_declarationContext) AllColumn_def() []IColumn_defContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_defContext); ok {
			len++
		}
	}

	tst := make([]IColumn_defContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_defContext); ok {
			tst[i] = t.(IColumn_defContext)
			i++
		}
	}

	return tst
}

func (s *Table_declarationContext) Column_def(i int) IColumn_defContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Table_declarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Table_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Table_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Table_declarationContext) AllIndex_def() []IIndex_defContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndex_defContext); ok {
			len++
		}
	}

	tst := make([]IIndex_defContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndex_defContext); ok {
			tst[i] = t.(IIndex_defContext)
			i++
		}
	}

	return tst
}

func (s *Table_declarationContext) Index_def(i int) IIndex_defContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_defContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_defContext)
}

func (s *Table_declarationContext) AllForeign_key_def() []IForeign_key_defContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IForeign_key_defContext); ok {
			len++
		}
	}

	tst := make([]IForeign_key_defContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IForeign_key_defContext); ok {
			tst[i] = t.(IForeign_key_defContext)
			i++
		}
	}

	return tst
}

func (s *Table_declarationContext) Foreign_key_def(i int) IForeign_key_defContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_defContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_defContext)
}

func (s *Table_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitTable_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Table_declaration() (localctx ITable_declarationContext) {
	localctx = NewTable_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, KuneiformParserRULE_table_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(239)
		p.Match(KuneiformParserTABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(240)
		p.Match(KuneiformParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(241)
		p.Match(KuneiformParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(242)
		p.Column_def()
	}
	p.SetState(251)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(243)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(247)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case KuneiformParserIDENTIFIER:
			{
				p.SetState(244)
				p.Column_def()
			}

		case KuneiformParserHASH_IDENTIFIER:
			{
				p.SetState(245)
				p.Index_def()
			}

		case KuneiformParserFOREIGN, KuneiformParserLEGACY_FOREIGN_KEY:
			{
				p.SetState(246)
				p.Foreign_key_def()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(253)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(254)
		p.Match(KuneiformParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_defContext is an interface to support dynamic dispatch.
type IColumn_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name token.
	GetName() antlr.Token

	// SetName sets the name token.
	SetName(antlr.Token)

	// Getter signatures
	Type_() ITypeContext
	IDENTIFIER() antlr.TerminalNode
	AllConstraint() []IConstraintContext
	Constraint(i int) IConstraintContext

	// IsColumn_defContext differentiates from other interfaces.
	IsColumn_defContext()
}

type Column_defContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	name   antlr.Token
}

func NewEmptyColumn_defContext() *Column_defContext {
	var p = new(Column_defContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_column_def
	return p
}

func InitEmptyColumn_defContext(p *Column_defContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_column_def
}

func (*Column_defContext) IsColumn_defContext() {}

func NewColumn_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_defContext {
	var p = new(Column_defContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_column_def

	return p
}

func (s *Column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_defContext) GetName() antlr.Token { return s.name }

func (s *Column_defContext) SetName(v antlr.Token) { s.name = v }

func (s *Column_defContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Column_defContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Column_defContext) AllConstraint() []IConstraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IConstraintContext); ok {
			len++
		}
	}

	tst := make([]IConstraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IConstraintContext); ok {
			tst[i] = t.(IConstraintContext)
			i++
		}
	}

	return tst
}

func (s *Column_defContext) Constraint(i int) IConstraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraintContext)
}

func (s *Column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitColumn_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Column_def() (localctx IColumn_defContext) {
	localctx = NewColumn_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, KuneiformParserRULE_column_def)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(256)

		var _m = p.Match(KuneiformParserIDENTIFIER)

		localctx.(*Column_defContext).name = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(257)
		p.Type_()
	}
	p.SetState(261)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&146516521470918656) != 0) || _la == KuneiformParserIDENTIFIER {
		{
			p.SetState(258)
			p.Constraint()
		}

		p.SetState(263)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndex_defContext is an interface to support dynamic dispatch.
type IIndex_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumns returns the columns rule contexts.
	GetColumns() IIdentifier_listContext

	// SetColumns sets the columns rule contexts.
	SetColumns(IIdentifier_listContext)

	// Getter signatures
	HASH_IDENTIFIER() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	UNIQUE() antlr.TerminalNode
	INDEX() antlr.TerminalNode
	PRIMARY() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext

	// IsIndex_defContext differentiates from other interfaces.
	IsIndex_defContext()
}

type Index_defContext struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	columns IIdentifier_listContext
}

func NewEmptyIndex_defContext() *Index_defContext {
	var p = new(Index_defContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_index_def
	return p
}

func InitEmptyIndex_defContext(p *Index_defContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_index_def
}

func (*Index_defContext) IsIndex_defContext() {}

func NewIndex_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_defContext {
	var p = new(Index_defContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_index_def

	return p
}

func (s *Index_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_defContext) GetColumns() IIdentifier_listContext { return s.columns }

func (s *Index_defContext) SetColumns(v IIdentifier_listContext) { s.columns = v }

func (s *Index_defContext) HASH_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserHASH_IDENTIFIER, 0)
}

func (s *Index_defContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Index_defContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Index_defContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNIQUE, 0)
}

func (s *Index_defContext) INDEX() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINDEX, 0)
}

func (s *Index_defContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPRIMARY, 0)
}

func (s *Index_defContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Index_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIndex_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Index_def() (localctx IIndex_defContext) {
	localctx = NewIndex_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, KuneiformParserRULE_index_def)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(264)
		p.Match(KuneiformParserHASH_IDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(265)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&288379909733089280) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(266)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(267)

		var _x = p.Identifier_list()

		localctx.(*Index_defContext).columns = _x
	}
	{
		p.SetState(268)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_defContext is an interface to support dynamic dispatch.
type IForeign_key_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParent_table returns the parent_table token.
	GetParent_table() antlr.Token

	// SetParent_table sets the parent_table token.
	SetParent_table(antlr.Token)

	// GetChild_keys returns the child_keys rule contexts.
	GetChild_keys() IIdentifier_listContext

	// GetParent_keys returns the parent_keys rule contexts.
	GetParent_keys() IIdentifier_listContext

	// SetChild_keys sets the child_keys rule contexts.
	SetChild_keys(IIdentifier_listContext)

	// SetParent_keys sets the parent_keys rule contexts.
	SetParent_keys(IIdentifier_listContext)

	// Getter signatures
	AllLPAREN() []antlr.TerminalNode
	LPAREN(i int) antlr.TerminalNode
	AllRPAREN() []antlr.TerminalNode
	RPAREN(i int) antlr.TerminalNode
	AllIdentifier_list() []IIdentifier_listContext
	Identifier_list(i int) IIdentifier_listContext
	REFERENCES() antlr.TerminalNode
	REF() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	FOREIGN() antlr.TerminalNode
	KEY() antlr.TerminalNode
	LEGACY_FOREIGN_KEY() antlr.TerminalNode
	AllForeign_key_action() []IForeign_key_actionContext
	Foreign_key_action(i int) IForeign_key_actionContext

	// IsForeign_key_defContext differentiates from other interfaces.
	IsForeign_key_defContext()
}

type Foreign_key_defContext struct {
	antlr.BaseParserRuleContext
	parser       antlr.Parser
	child_keys   IIdentifier_listContext
	parent_table antlr.Token
	parent_keys  IIdentifier_listContext
}

func NewEmptyForeign_key_defContext() *Foreign_key_defContext {
	var p = new(Foreign_key_defContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_foreign_key_def
	return p
}

func InitEmptyForeign_key_defContext(p *Foreign_key_defContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_foreign_key_def
}

func (*Foreign_key_defContext) IsForeign_key_defContext() {}

func NewForeign_key_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_defContext {
	var p = new(Foreign_key_defContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_foreign_key_def

	return p
}

func (s *Foreign_key_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_defContext) GetParent_table() antlr.Token { return s.parent_table }

func (s *Foreign_key_defContext) SetParent_table(v antlr.Token) { s.parent_table = v }

func (s *Foreign_key_defContext) GetChild_keys() IIdentifier_listContext { return s.child_keys }

func (s *Foreign_key_defContext) GetParent_keys() IIdentifier_listContext { return s.parent_keys }

func (s *Foreign_key_defContext) SetChild_keys(v IIdentifier_listContext) { s.child_keys = v }

func (s *Foreign_key_defContext) SetParent_keys(v IIdentifier_listContext) { s.parent_keys = v }

func (s *Foreign_key_defContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserLPAREN)
}

func (s *Foreign_key_defContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, i)
}

func (s *Foreign_key_defContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserRPAREN)
}

func (s *Foreign_key_defContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, i)
}

func (s *Foreign_key_defContext) AllIdentifier_list() []IIdentifier_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			len++
		}
	}

	tst := make([]IIdentifier_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifier_listContext); ok {
			tst[i] = t.(IIdentifier_listContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_key_defContext) Identifier_list(i int) IIdentifier_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Foreign_key_defContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(KuneiformParserREFERENCES, 0)
}

func (s *Foreign_key_defContext) REF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserREF, 0)
}

func (s *Foreign_key_defContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Foreign_key_defContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFOREIGN, 0)
}

func (s *Foreign_key_defContext) KEY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserKEY, 0)
}

func (s *Foreign_key_defContext) LEGACY_FOREIGN_KEY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLEGACY_FOREIGN_KEY, 0)
}

func (s *Foreign_key_defContext) AllForeign_key_action() []IForeign_key_actionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IForeign_key_actionContext); ok {
			len++
		}
	}

	tst := make([]IForeign_key_actionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IForeign_key_actionContext); ok {
			tst[i] = t.(IForeign_key_actionContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_key_defContext) Foreign_key_action(i int) IForeign_key_actionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_actionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_actionContext)
}

func (s *Foreign_key_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitForeign_key_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Foreign_key_def() (localctx IForeign_key_defContext) {
	localctx = NewForeign_key_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, KuneiformParserRULE_foreign_key_def)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(273)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserFOREIGN:
		{
			p.SetState(270)
			p.Match(KuneiformParserFOREIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(271)
			p.Match(KuneiformParserKEY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserLEGACY_FOREIGN_KEY:
		{
			p.SetState(272)
			p.Match(KuneiformParserLEGACY_FOREIGN_KEY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(275)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(276)

		var _x = p.Identifier_list()

		localctx.(*Foreign_key_defContext).child_keys = _x
	}
	{
		p.SetState(277)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(278)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KuneiformParserREFERENCES || _la == KuneiformParserREF) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(279)

		var _m = p.Match(KuneiformParserIDENTIFIER)

		localctx.(*Foreign_key_defContext).parent_table = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(280)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(281)

		var _x = p.Identifier_list()

		localctx.(*Foreign_key_defContext).parent_keys = _x
	}
	{
		p.SetState(282)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(286)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserON || _la == KuneiformParserLEGACY_ON_UPDATE || _la == KuneiformParserLEGACY_ON_DELETE {
		{
			p.SetState(283)
			p.Foreign_key_action()
		}

		p.SetState(288)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_actionContext is an interface to support dynamic dispatch.
type IForeign_key_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASCADE() antlr.TerminalNode
	RESTRICT() antlr.TerminalNode
	DO() antlr.TerminalNode
	ON() antlr.TerminalNode
	UPDATE() antlr.TerminalNode
	LEGACY_ON_UPDATE() antlr.TerminalNode
	DELETE() antlr.TerminalNode
	LEGACY_ON_DELETE() antlr.TerminalNode
	NO() antlr.TerminalNode
	ACTION() antlr.TerminalNode
	LEGACY_NO_ACTION() antlr.TerminalNode
	SET() antlr.TerminalNode
	NULL() antlr.TerminalNode
	LEGACY_SET_NULL() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	LEGACY_SET_DEFAULT() antlr.TerminalNode

	// IsForeign_key_actionContext differentiates from other interfaces.
	IsForeign_key_actionContext()
}

type Foreign_key_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_actionContext() *Foreign_key_actionContext {
	var p = new(Foreign_key_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_foreign_key_action
	return p
}

func InitEmptyForeign_key_actionContext(p *Foreign_key_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_foreign_key_action
}

func (*Foreign_key_actionContext) IsForeign_key_actionContext() {}

func NewForeign_key_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_actionContext {
	var p = new(Foreign_key_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_foreign_key_action

	return p
}

func (s *Foreign_key_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_actionContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCASCADE, 0)
}

func (s *Foreign_key_actionContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRESTRICT, 0)
}

func (s *Foreign_key_actionContext) DO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDO, 0)
}

func (s *Foreign_key_actionContext) ON() antlr.TerminalNode {
	return s.GetToken(KuneiformParserON, 0)
}

func (s *Foreign_key_actionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUPDATE, 0)
}

func (s *Foreign_key_actionContext) LEGACY_ON_UPDATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLEGACY_ON_UPDATE, 0)
}

func (s *Foreign_key_actionContext) DELETE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDELETE, 0)
}

func (s *Foreign_key_actionContext) LEGACY_ON_DELETE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLEGACY_ON_DELETE, 0)
}

func (s *Foreign_key_actionContext) NO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNO, 0)
}

func (s *Foreign_key_actionContext) ACTION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserACTION, 0)
}

func (s *Foreign_key_actionContext) LEGACY_NO_ACTION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLEGACY_NO_ACTION, 0)
}

func (s *Foreign_key_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSET, 0)
}

func (s *Foreign_key_actionContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Foreign_key_actionContext) LEGACY_SET_NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLEGACY_SET_NULL, 0)
}

func (s *Foreign_key_actionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDEFAULT, 0)
}

func (s *Foreign_key_actionContext) LEGACY_SET_DEFAULT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLEGACY_SET_DEFAULT, 0)
}

func (s *Foreign_key_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitForeign_key_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Foreign_key_action() (localctx IForeign_key_actionContext) {
	localctx = NewForeign_key_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, KuneiformParserRULE_foreign_key_action)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(299)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.SetState(292)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case KuneiformParserON:
			{
				p.SetState(289)
				p.Match(KuneiformParserON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(290)
				p.Match(KuneiformParserUPDATE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case KuneiformParserLEGACY_ON_UPDATE:
			{
				p.SetState(291)
				p.Match(KuneiformParserLEGACY_ON_UPDATE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 2:
		p.SetState(297)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case KuneiformParserON:
			{
				p.SetState(294)
				p.Match(KuneiformParserON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(295)
				p.Match(KuneiformParserDELETE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case KuneiformParserLEGACY_ON_DELETE:
			{
				p.SetState(296)
				p.Match(KuneiformParserLEGACY_ON_DELETE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(302)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserDO {
		{
			p.SetState(301)
			p.Match(KuneiformParserDO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(321)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext()) {
	case 1:
		p.SetState(307)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case KuneiformParserNO:
			{
				p.SetState(304)
				p.Match(KuneiformParserNO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(305)
				p.Match(KuneiformParserACTION)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case KuneiformParserLEGACY_NO_ACTION:
			{
				p.SetState(306)
				p.Match(KuneiformParserLEGACY_NO_ACTION)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 2:
		{
			p.SetState(309)
			p.Match(KuneiformParserCASCADE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.SetState(313)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case KuneiformParserSET:
			{
				p.SetState(310)
				p.Match(KuneiformParserSET)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(311)
				p.Match(KuneiformParserNULL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case KuneiformParserLEGACY_SET_NULL:
			{
				p.SetState(312)
				p.Match(KuneiformParserLEGACY_SET_NULL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 4:
		p.SetState(318)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case KuneiformParserSET:
			{
				p.SetState(315)
				p.Match(KuneiformParserSET)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(316)
				p.Match(KuneiformParserDEFAULT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case KuneiformParserLEGACY_SET_DEFAULT:
			{
				p.SetState(317)
				p.Match(KuneiformParserLEGACY_SET_DEFAULT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 5:
		{
			p.SetState(320)
			p.Match(KuneiformParserRESTRICT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_listContext is an interface to support dynamic dispatch.
type IType_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsType_listContext differentiates from other interfaces.
	IsType_listContext()
}

type Type_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_listContext() *Type_listContext {
	var p = new(Type_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type_list
	return p
}

func InitEmptyType_listContext(p *Type_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_type_list
}

func (*Type_listContext) IsType_listContext() {}

func NewType_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_listContext {
	var p = new(Type_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_type_list

	return p
}

func (s *Type_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_listContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Type_listContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Type_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Type_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Type_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitType_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Type_list() (localctx IType_listContext) {
	localctx = NewType_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, KuneiformParserRULE_type_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(323)
		p.Type_()
	}
	p.SetState(328)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(324)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(325)
			p.Type_()
		}

		p.SetState(330)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamed_type_listContext is an interface to support dynamic dispatch.
type INamed_type_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsNamed_type_listContext differentiates from other interfaces.
	IsNamed_type_listContext()
}

type Named_type_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_type_listContext() *Named_type_listContext {
	var p = new(Named_type_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_named_type_list
	return p
}

func InitEmptyNamed_type_listContext(p *Named_type_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_named_type_list
}

func (*Named_type_listContext) IsNamed_type_listContext() {}

func NewNamed_type_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_type_listContext {
	var p = new(Named_type_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_named_type_list

	return p
}

func (s *Named_type_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_type_listContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserIDENTIFIER)
}

func (s *Named_type_listContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, i)
}

func (s *Named_type_listContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Named_type_listContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Named_type_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Named_type_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Named_type_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_type_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_type_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitNamed_type_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Named_type_list() (localctx INamed_type_listContext) {
	localctx = NewNamed_type_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, KuneiformParserRULE_named_type_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(331)
		p.Match(KuneiformParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(332)
		p.Type_()
	}
	p.SetState(338)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(333)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(334)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(335)
			p.Type_()
		}

		p.SetState(340)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITyped_variable_listContext is an interface to support dynamic dispatch.
type ITyped_variable_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllVariable() []IVariableContext
	Variable(i int) IVariableContext
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTyped_variable_listContext differentiates from other interfaces.
	IsTyped_variable_listContext()
}

type Typed_variable_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTyped_variable_listContext() *Typed_variable_listContext {
	var p = new(Typed_variable_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_typed_variable_list
	return p
}

func InitEmptyTyped_variable_listContext(p *Typed_variable_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_typed_variable_list
}

func (*Typed_variable_listContext) IsTyped_variable_listContext() {}

func NewTyped_variable_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Typed_variable_listContext {
	var p = new(Typed_variable_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_typed_variable_list

	return p
}

func (s *Typed_variable_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Typed_variable_listContext) AllVariable() []IVariableContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableContext); ok {
			len++
		}
	}

	tst := make([]IVariableContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableContext); ok {
			tst[i] = t.(IVariableContext)
			i++
		}
	}

	return tst
}

func (s *Typed_variable_listContext) Variable(i int) IVariableContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Typed_variable_listContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Typed_variable_listContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Typed_variable_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Typed_variable_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Typed_variable_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Typed_variable_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Typed_variable_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitTyped_variable_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Typed_variable_list() (localctx ITyped_variable_listContext) {
	localctx = NewTyped_variable_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, KuneiformParserRULE_typed_variable_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(341)
		p.Variable()
	}
	{
		p.SetState(342)
		p.Type_()
	}
	p.SetState(349)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(343)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(344)
			p.Variable()
		}
		{
			p.SetState(345)
			p.Type_()
		}

		p.SetState(351)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstraintContext is an interface to support dynamic dispatch.
type IConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	PRIMARY() antlr.TerminalNode
	NOT() antlr.TerminalNode
	NULL() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	UNIQUE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Literal() ILiteralContext
	RPAREN() antlr.TerminalNode
	KEY() antlr.TerminalNode

	// IsConstraintContext differentiates from other interfaces.
	IsConstraintContext()
}

type ConstraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraintContext() *ConstraintContext {
	var p = new(ConstraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_constraint
	return p
}

func InitEmptyConstraintContext(p *ConstraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_constraint
}

func (*ConstraintContext) IsConstraintContext() {}

func NewConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstraintContext {
	var p = new(ConstraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_constraint

	return p
}

func (s *ConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstraintContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *ConstraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPRIMARY, 0)
}

func (s *ConstraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *ConstraintContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *ConstraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDEFAULT, 0)
}

func (s *ConstraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNIQUE, 0)
}

func (s *ConstraintContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *ConstraintContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *ConstraintContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *ConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserKEY, 0)
}

func (s *ConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Constraint() (localctx IConstraintContext) {
	localctx = NewConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, KuneiformParserRULE_constraint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(361)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserIDENTIFIER:
		{
			p.SetState(352)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserPRIMARY:
		{
			p.SetState(353)
			p.Match(KuneiformParserPRIMARY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(355)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserKEY {
			{
				p.SetState(354)
				p.Match(KuneiformParserKEY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case KuneiformParserNOT:
		{
			p.SetState(357)
			p.Match(KuneiformParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(358)
			p.Match(KuneiformParserNULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserDEFAULT:
		{
			p.SetState(359)
			p.Match(KuneiformParserDEFAULT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserUNIQUE:
		{
			p.SetState(360)
			p.Match(KuneiformParserUNIQUE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(367)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLPAREN {
		{
			p.SetState(363)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(364)
			p.Literal()
		}
		{
			p.SetState(365)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAccess_modifierContext is an interface to support dynamic dispatch.
type IAccess_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PUBLIC() antlr.TerminalNode
	PRIVATE() antlr.TerminalNode
	VIEW() antlr.TerminalNode
	OWNER() antlr.TerminalNode

	// IsAccess_modifierContext differentiates from other interfaces.
	IsAccess_modifierContext()
}

type Access_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccess_modifierContext() *Access_modifierContext {
	var p = new(Access_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_access_modifier
	return p
}

func InitEmptyAccess_modifierContext(p *Access_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_access_modifier
}

func (*Access_modifierContext) IsAccess_modifierContext() {}

func NewAccess_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Access_modifierContext {
	var p = new(Access_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_access_modifier

	return p
}

func (s *Access_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Access_modifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPUBLIC, 0)
}

func (s *Access_modifierContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPRIVATE, 0)
}

func (s *Access_modifierContext) VIEW() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVIEW, 0)
}

func (s *Access_modifierContext) OWNER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOWNER, 0)
}

func (s *Access_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Access_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Access_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAccess_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Access_modifier() (localctx IAccess_modifierContext) {
	localctx = NewAccess_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, KuneiformParserRULE_access_modifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(369)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4123168604160) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_declarationContext is an interface to support dynamic dispatch.
type IAction_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ACTION() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	Action_block() IAction_blockContext
	RBRACE() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	Variable_list() IVariable_listContext
	AllAccess_modifier() []IAccess_modifierContext
	Access_modifier(i int) IAccess_modifierContext

	// IsAction_declarationContext differentiates from other interfaces.
	IsAction_declarationContext()
}

type Action_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAction_declarationContext() *Action_declarationContext {
	var p = new(Action_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_declaration
	return p
}

func InitEmptyAction_declarationContext(p *Action_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_declaration
}

func (*Action_declarationContext) IsAction_declarationContext() {}

func NewAction_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_declarationContext {
	var p = new(Action_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_action_declaration

	return p
}

func (s *Action_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_declarationContext) ACTION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserACTION, 0)
}

func (s *Action_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Action_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Action_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Action_declarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Action_declarationContext) Action_block() IAction_blockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_blockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_blockContext)
}

func (s *Action_declarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Action_declarationContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *Action_declarationContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Action_declarationContext) Variable_list() IVariable_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariable_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariable_listContext)
}

func (s *Action_declarationContext) AllAccess_modifier() []IAccess_modifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAccess_modifierContext); ok {
			len++
		}
	}

	tst := make([]IAccess_modifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAccess_modifierContext); ok {
			tst[i] = t.(IAccess_modifierContext)
			i++
		}
	}

	return tst
}

func (s *Action_declarationContext) Access_modifier(i int) IAccess_modifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccess_modifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccess_modifierContext)
}

func (s *Action_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Action_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAction_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Action_declaration() (localctx IAction_declarationContext) {
	localctx = NewAction_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, KuneiformParserRULE_action_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(374)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCONTEXTUAL_VARIABLE {
		{
			p.SetState(371)
			p.Annotation()
		}

		p.SetState(376)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(377)
		p.Match(KuneiformParserACTION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(378)
		p.Match(KuneiformParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(379)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(381)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserVARIABLE || _la == KuneiformParserCONTEXTUAL_VARIABLE {
		{
			p.SetState(380)
			p.Variable_list()
		}

	}
	{
		p.SetState(383)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(385)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4123168604160) != 0) {
		{
			p.SetState(384)
			p.Access_modifier()
		}

		p.SetState(387)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(389)
		p.Match(KuneiformParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(390)
		p.Action_block()
	}
	{
		p.SetState(391)
		p.Match(KuneiformParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_declarationContext is an interface to support dynamic dispatch.
type IProcedure_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PROCEDURE() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	Procedure_block() IProcedure_blockContext
	RBRACE() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	Typed_variable_list() ITyped_variable_listContext
	AllAccess_modifier() []IAccess_modifierContext
	Access_modifier(i int) IAccess_modifierContext
	Procedure_return() IProcedure_returnContext

	// IsProcedure_declarationContext differentiates from other interfaces.
	IsProcedure_declarationContext()
}

type Procedure_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_declarationContext() *Procedure_declarationContext {
	var p = new(Procedure_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_declaration
	return p
}

func InitEmptyProcedure_declarationContext(p *Procedure_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_declaration
}

func (*Procedure_declarationContext) IsProcedure_declarationContext() {}

func NewProcedure_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_declarationContext {
	var p = new(Procedure_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_procedure_declaration

	return p
}

func (s *Procedure_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_declarationContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPROCEDURE, 0)
}

func (s *Procedure_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Procedure_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Procedure_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Procedure_declarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Procedure_declarationContext) Procedure_block() IProcedure_blockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_blockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_blockContext)
}

func (s *Procedure_declarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Procedure_declarationContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *Procedure_declarationContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Procedure_declarationContext) Typed_variable_list() ITyped_variable_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITyped_variable_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITyped_variable_listContext)
}

func (s *Procedure_declarationContext) AllAccess_modifier() []IAccess_modifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAccess_modifierContext); ok {
			len++
		}
	}

	tst := make([]IAccess_modifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAccess_modifierContext); ok {
			tst[i] = t.(IAccess_modifierContext)
			i++
		}
	}

	return tst
}

func (s *Procedure_declarationContext) Access_modifier(i int) IAccess_modifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccess_modifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccess_modifierContext)
}

func (s *Procedure_declarationContext) Procedure_return() IProcedure_returnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_returnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_returnContext)
}

func (s *Procedure_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitProcedure_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Procedure_declaration() (localctx IProcedure_declarationContext) {
	localctx = NewProcedure_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, KuneiformParserRULE_procedure_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(396)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCONTEXTUAL_VARIABLE {
		{
			p.SetState(393)
			p.Annotation()
		}

		p.SetState(398)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(399)
		p.Match(KuneiformParserPROCEDURE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(400)
		p.Match(KuneiformParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(401)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(403)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserVARIABLE || _la == KuneiformParserCONTEXTUAL_VARIABLE {
		{
			p.SetState(402)
			p.Typed_variable_list()
		}

	}
	{
		p.SetState(405)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(407)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4123168604160) != 0) {
		{
			p.SetState(406)
			p.Access_modifier()
		}

		p.SetState(409)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserRETURNS {
		{
			p.SetState(411)
			p.Procedure_return()
		}

	}
	{
		p.SetState(414)
		p.Match(KuneiformParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(415)
		p.Procedure_block()
	}
	{
		p.SetState(416)
		p.Match(KuneiformParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_procedure_declarationContext is an interface to support dynamic dispatch.
type IForeign_procedure_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnnamed_params returns the unnamed_params rule contexts.
	GetUnnamed_params() IType_listContext

	// GetNamed_params returns the named_params rule contexts.
	GetNamed_params() ITyped_variable_listContext

	// SetUnnamed_params sets the unnamed_params rule contexts.
	SetUnnamed_params(IType_listContext)

	// SetNamed_params sets the named_params rule contexts.
	SetNamed_params(ITyped_variable_listContext)

	// Getter signatures
	FOREIGN() antlr.TerminalNode
	PROCEDURE() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Procedure_return() IProcedure_returnContext
	Type_list() IType_listContext
	Typed_variable_list() ITyped_variable_listContext

	// IsForeign_procedure_declarationContext differentiates from other interfaces.
	IsForeign_procedure_declarationContext()
}

type Foreign_procedure_declarationContext struct {
	antlr.BaseParserRuleContext
	parser         antlr.Parser
	unnamed_params IType_listContext
	named_params   ITyped_variable_listContext
}

func NewEmptyForeign_procedure_declarationContext() *Foreign_procedure_declarationContext {
	var p = new(Foreign_procedure_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_foreign_procedure_declaration
	return p
}

func InitEmptyForeign_procedure_declarationContext(p *Foreign_procedure_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_foreign_procedure_declaration
}

func (*Foreign_procedure_declarationContext) IsForeign_procedure_declarationContext() {}

func NewForeign_procedure_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_procedure_declarationContext {
	var p = new(Foreign_procedure_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_foreign_procedure_declaration

	return p
}

func (s *Foreign_procedure_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_procedure_declarationContext) GetUnnamed_params() IType_listContext {
	return s.unnamed_params
}

func (s *Foreign_procedure_declarationContext) GetNamed_params() ITyped_variable_listContext {
	return s.named_params
}

func (s *Foreign_procedure_declarationContext) SetUnnamed_params(v IType_listContext) {
	s.unnamed_params = v
}

func (s *Foreign_procedure_declarationContext) SetNamed_params(v ITyped_variable_listContext) {
	s.named_params = v
}

func (s *Foreign_procedure_declarationContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFOREIGN, 0)
}

func (s *Foreign_procedure_declarationContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPROCEDURE, 0)
}

func (s *Foreign_procedure_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Foreign_procedure_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Foreign_procedure_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Foreign_procedure_declarationContext) Procedure_return() IProcedure_returnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_returnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_returnContext)
}

func (s *Foreign_procedure_declarationContext) Type_list() IType_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_listContext)
}

func (s *Foreign_procedure_declarationContext) Typed_variable_list() ITyped_variable_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITyped_variable_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITyped_variable_listContext)
}

func (s *Foreign_procedure_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_procedure_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_procedure_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitForeign_procedure_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Foreign_procedure_declaration() (localctx IForeign_procedure_declarationContext) {
	localctx = NewForeign_procedure_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, KuneiformParserRULE_foreign_procedure_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(418)
		p.Match(KuneiformParserFOREIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(419)
		p.Match(KuneiformParserPROCEDURE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(420)
		p.Match(KuneiformParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(421)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(424)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case KuneiformParserIDENTIFIER:
		{
			p.SetState(422)

			var _x = p.Type_list()

			localctx.(*Foreign_procedure_declarationContext).unnamed_params = _x
		}

	case KuneiformParserVARIABLE, KuneiformParserCONTEXTUAL_VARIABLE:
		{
			p.SetState(423)

			var _x = p.Typed_variable_list()

			localctx.(*Foreign_procedure_declarationContext).named_params = _x
		}

	case KuneiformParserRPAREN:

	default:
	}
	{
		p.SetState(426)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(428)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserRETURNS {
		{
			p.SetState(427)
			p.Procedure_return()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_returnContext is an interface to support dynamic dispatch.
type IProcedure_returnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturn_columns returns the return_columns rule contexts.
	GetReturn_columns() INamed_type_listContext

	// GetUnnamed_return_types returns the unnamed_return_types rule contexts.
	GetUnnamed_return_types() IType_listContext

	// SetReturn_columns sets the return_columns rule contexts.
	SetReturn_columns(INamed_type_listContext)

	// SetUnnamed_return_types sets the unnamed_return_types rule contexts.
	SetUnnamed_return_types(IType_listContext)

	// Getter signatures
	RETURNS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Named_type_list() INamed_type_listContext
	Type_list() IType_listContext
	TABLE() antlr.TerminalNode

	// IsProcedure_returnContext differentiates from other interfaces.
	IsProcedure_returnContext()
}

type Procedure_returnContext struct {
	antlr.BaseParserRuleContext
	parser               antlr.Parser
	return_columns       INamed_type_listContext
	unnamed_return_types IType_listContext
}

func NewEmptyProcedure_returnContext() *Procedure_returnContext {
	var p = new(Procedure_returnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_return
	return p
}

func InitEmptyProcedure_returnContext(p *Procedure_returnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_return
}

func (*Procedure_returnContext) IsProcedure_returnContext() {}

func NewProcedure_returnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_returnContext {
	var p = new(Procedure_returnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_procedure_return

	return p
}

func (s *Procedure_returnContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_returnContext) GetReturn_columns() INamed_type_listContext {
	return s.return_columns
}

func (s *Procedure_returnContext) GetUnnamed_return_types() IType_listContext {
	return s.unnamed_return_types
}

func (s *Procedure_returnContext) SetReturn_columns(v INamed_type_listContext) { s.return_columns = v }

func (s *Procedure_returnContext) SetUnnamed_return_types(v IType_listContext) {
	s.unnamed_return_types = v
}

func (s *Procedure_returnContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRETURNS, 0)
}

func (s *Procedure_returnContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Procedure_returnContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Procedure_returnContext) Named_type_list() INamed_type_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_type_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_type_listContext)
}

func (s *Procedure_returnContext) Type_list() IType_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_listContext)
}

func (s *Procedure_returnContext) TABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTABLE, 0)
}

func (s *Procedure_returnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_returnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_returnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitProcedure_return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Procedure_return() (localctx IProcedure_returnContext) {
	localctx = NewProcedure_returnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, KuneiformParserRULE_procedure_return)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(430)
		p.Match(KuneiformParserRETURNS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(442)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext()) {
	case 1:
		p.SetState(432)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserTABLE {
			{
				p.SetState(431)
				p.Match(KuneiformParserTABLE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(434)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(435)

			var _x = p.Named_type_list()

			localctx.(*Procedure_returnContext).return_columns = _x
		}
		{
			p.SetState(436)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(438)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(439)

			var _x = p.Type_list()

			localctx.(*Procedure_returnContext).unnamed_return_types = _x
		}
		{
			p.SetState(440)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISqlContext is an interface to support dynamic dispatch.
type ISqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sql_statement() ISql_statementContext
	SCOL() antlr.TerminalNode

	// IsSqlContext differentiates from other interfaces.
	IsSqlContext()
}

type SqlContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlContext() *SqlContext {
	var p = new(SqlContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql
	return p
}

func InitEmptySqlContext(p *SqlContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql
}

func (*SqlContext) IsSqlContext() {}

func NewSqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlContext {
	var p = new(SqlContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql

	return p
}

func (s *SqlContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlContext) Sql_statement() ISql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *SqlContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *SqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql() (localctx ISqlContext) {
	localctx = NewSqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, KuneiformParserRULE_sql)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(444)
		p.Sql_statement()
	}
	{
		p.SetState(445)
		p.Match(KuneiformParserSCOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_statementContext is an interface to support dynamic dispatch.
type ISql_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_statement() ISelect_statementContext
	Update_statement() IUpdate_statementContext
	Insert_statement() IInsert_statementContext
	Delete_statement() IDelete_statementContext
	WITH() antlr.TerminalNode
	AllCommon_table_expression() []ICommon_table_expressionContext
	Common_table_expression(i int) ICommon_table_expressionContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSql_statementContext differentiates from other interfaces.
	IsSql_statementContext()
}

type Sql_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_statementContext() *Sql_statementContext {
	var p = new(Sql_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_statement
	return p
}

func InitEmptySql_statementContext(p *Sql_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_statement
}

func (*Sql_statementContext) IsSql_statementContext() {}

func NewSql_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_statementContext {
	var p = new(Sql_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql_statement

	return p
}

func (s *Sql_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_statementContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Sql_statementContext) Update_statement() IUpdate_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_statementContext)
}

func (s *Sql_statementContext) Insert_statement() IInsert_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_statementContext)
}

func (s *Sql_statementContext) Delete_statement() IDelete_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_statementContext)
}

func (s *Sql_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWITH, 0)
}

func (s *Sql_statementContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			len++
		}
	}

	tst := make([]ICommon_table_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommon_table_expressionContext); ok {
			tst[i] = t.(ICommon_table_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Sql_statementContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Sql_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Sql_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Sql_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSql_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql_statement() (localctx ISql_statementContext) {
	localctx = NewSql_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, KuneiformParserRULE_sql_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(456)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserWITH {
		{
			p.SetState(447)
			p.Match(KuneiformParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(448)
			p.Common_table_expression()
		}
		p.SetState(453)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(449)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(450)
				p.Common_table_expression()
			}

			p.SetState(455)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(462)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserSELECT:
		{
			p.SetState(458)
			p.Select_statement()
		}

	case KuneiformParserUPDATE:
		{
			p.SetState(459)
			p.Update_statement()
		}

	case KuneiformParserINSERT:
		{
			p.SetState(460)
			p.Insert_statement()
		}

	case KuneiformParserDELETE:
		{
			p.SetState(461)
			p.Delete_statement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllLPAREN() []antlr.TerminalNode
	LPAREN(i int) antlr.TerminalNode
	AllRPAREN() []antlr.TerminalNode
	RPAREN(i int) antlr.TerminalNode
	AS() antlr.TerminalNode
	Select_statement() ISelect_statementContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_common_table_expression
	return p
}

func InitEmptyCommon_table_expressionContext(p *Common_table_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_common_table_expression
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Common_table_expressionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Common_table_expressionContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserLPAREN)
}

func (s *Common_table_expressionContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, i)
}

func (s *Common_table_expressionContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserRPAREN)
}

func (s *Common_table_expressionContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, i)
}

func (s *Common_table_expressionContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Common_table_expressionContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Common_table_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Common_table_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCommon_table_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, KuneiformParserRULE_common_table_expression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(464)
		p.Identifier()
	}
	{
		p.SetState(465)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(474)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserDOUBLE_QUOTE || _la == KuneiformParserIDENTIFIER {
		{
			p.SetState(466)
			p.Identifier()
		}
		p.SetState(471)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(467)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(468)
				p.Identifier()
			}

			p.SetState(473)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(476)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(477)
		p.Match(KuneiformParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(478)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(479)
		p.Select_statement()
	}
	{
		p.SetState(480)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_statementContext is an interface to support dynamic dispatch.
type ISelect_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLimit returns the limit rule contexts.
	GetLimit() ISql_exprContext

	// GetOffset returns the offset rule contexts.
	GetOffset() ISql_exprContext

	// SetLimit sets the limit rule contexts.
	SetLimit(ISql_exprContext)

	// SetOffset sets the offset rule contexts.
	SetOffset(ISql_exprContext)

	// Getter signatures
	AllSelect_core() []ISelect_coreContext
	Select_core(i int) ISelect_coreContext
	AllCompound_operator() []ICompound_operatorContext
	Compound_operator(i int) ICompound_operatorContext
	ORDER() antlr.TerminalNode
	BY() antlr.TerminalNode
	AllOrdering_term() []IOrdering_termContext
	Ordering_term(i int) IOrdering_termContext
	LIMIT() antlr.TerminalNode
	OFFSET() antlr.TerminalNode
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSelect_statementContext differentiates from other interfaces.
	IsSelect_statementContext()
}

type Select_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	limit  ISql_exprContext
	offset ISql_exprContext
}

func NewEmptySelect_statementContext() *Select_statementContext {
	var p = new(Select_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_select_statement
	return p
}

func InitEmptySelect_statementContext(p *Select_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_select_statement
}

func (*Select_statementContext) IsSelect_statementContext() {}

func NewSelect_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_statementContext {
	var p = new(Select_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_select_statement

	return p
}

func (s *Select_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_statementContext) GetLimit() ISql_exprContext { return s.limit }

func (s *Select_statementContext) GetOffset() ISql_exprContext { return s.offset }

func (s *Select_statementContext) SetLimit(v ISql_exprContext) { s.limit = v }

func (s *Select_statementContext) SetOffset(v ISql_exprContext) { s.offset = v }

func (s *Select_statementContext) AllSelect_core() []ISelect_coreContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_coreContext); ok {
			len++
		}
	}

	tst := make([]ISelect_coreContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_coreContext); ok {
			tst[i] = t.(ISelect_coreContext)
			i++
		}
	}

	return tst
}

func (s *Select_statementContext) Select_core(i int) ISelect_coreContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Select_statementContext) AllCompound_operator() []ICompound_operatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			len++
		}
	}

	tst := make([]ICompound_operatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompound_operatorContext); ok {
			tst[i] = t.(ICompound_operatorContext)
			i++
		}
	}

	return tst
}

func (s *Select_statementContext) Compound_operator(i int) ICompound_operatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Select_statementContext) ORDER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserORDER, 0)
}

func (s *Select_statementContext) BY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBY, 0)
}

func (s *Select_statementContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Select_statementContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Select_statementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLIMIT, 0)
}

func (s *Select_statementContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOFFSET, 0)
}

func (s *Select_statementContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Select_statementContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Select_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Select_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Select_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSelect_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Select_statement() (localctx ISelect_statementContext) {
	localctx = NewSelect_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, KuneiformParserRULE_select_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(482)
		p.Select_core()
	}
	p.SetState(488)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&7) != 0 {
		{
			p.SetState(483)
			p.Compound_operator()
		}
		{
			p.SetState(484)
			p.Select_core()
		}

		p.SetState(490)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(501)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserORDER {
		{
			p.SetState(491)
			p.Match(KuneiformParserORDER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(492)
			p.Match(KuneiformParserBY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(493)
			p.Ordering_term()
		}
		p.SetState(498)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(494)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(495)
				p.Ordering_term()
			}

			p.SetState(500)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(505)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLIMIT {
		{
			p.SetState(503)
			p.Match(KuneiformParserLIMIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(504)

			var _x = p.sql_expr(0)

			localctx.(*Select_statementContext).limit = _x
		}

	}
	p.SetState(509)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserOFFSET {
		{
			p.SetState(507)
			p.Match(KuneiformParserOFFSET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(508)

			var _x = p.sql_expr(0)

			localctx.(*Select_statementContext).offset = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompound_operatorContext is an interface to support dynamic dispatch.
type ICompound_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNION() antlr.TerminalNode
	ALL() antlr.TerminalNode
	INTERSECT() antlr.TerminalNode
	EXCEPT() antlr.TerminalNode

	// IsCompound_operatorContext differentiates from other interfaces.
	IsCompound_operatorContext()
}

type Compound_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_operatorContext() *Compound_operatorContext {
	var p = new(Compound_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_compound_operator
	return p
}

func InitEmptyCompound_operatorContext(p *Compound_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_compound_operator
}

func (*Compound_operatorContext) IsCompound_operatorContext() {}

func NewCompound_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_operatorContext {
	var p = new(Compound_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_compound_operator

	return p
}

func (s *Compound_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_operatorContext) UNION() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNION, 0)
}

func (s *Compound_operatorContext) ALL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserALL, 0)
}

func (s *Compound_operatorContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINTERSECT, 0)
}

func (s *Compound_operatorContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXCEPT, 0)
}

func (s *Compound_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCompound_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Compound_operator() (localctx ICompound_operatorContext) {
	localctx = NewCompound_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, KuneiformParserRULE_compound_operator)
	var _la int

	p.SetState(517)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserUNION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(511)
			p.Match(KuneiformParserUNION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(513)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserALL {
			{
				p.SetState(512)
				p.Match(KuneiformParserALL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case KuneiformParserINTERSECT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(515)
			p.Match(KuneiformParserINTERSECT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserEXCEPT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(516)
			p.Match(KuneiformParserEXCEPT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrdering_termContext is an interface to support dynamic dispatch.
type IOrdering_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sql_expr() ISql_exprContext
	NULLS() antlr.TerminalNode
	ASC() antlr.TerminalNode
	DESC() antlr.TerminalNode
	FIRST() antlr.TerminalNode
	LAST() antlr.TerminalNode

	// IsOrdering_termContext differentiates from other interfaces.
	IsOrdering_termContext()
}

type Ordering_termContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdering_termContext() *Ordering_termContext {
	var p = new(Ordering_termContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_ordering_term
	return p
}

func InitEmptyOrdering_termContext(p *Ordering_termContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_ordering_term
}

func (*Ordering_termContext) IsOrdering_termContext() {}

func NewOrdering_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordering_termContext {
	var p = new(Ordering_termContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_ordering_term

	return p
}

func (s *Ordering_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordering_termContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Ordering_termContext) NULLS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULLS, 0)
}

func (s *Ordering_termContext) ASC() antlr.TerminalNode {
	return s.GetToken(KuneiformParserASC, 0)
}

func (s *Ordering_termContext) DESC() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDESC, 0)
}

func (s *Ordering_termContext) FIRST() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFIRST, 0)
}

func (s *Ordering_termContext) LAST() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLAST, 0)
}

func (s *Ordering_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordering_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordering_termContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitOrdering_term(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Ordering_term() (localctx IOrdering_termContext) {
	localctx = NewOrdering_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, KuneiformParserRULE_ordering_term)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(519)
		p.sql_expr(0)
	}
	p.SetState(521)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserASC || _la == KuneiformParserDESC {
		{
			p.SetState(520)
			_la = p.GetTokenStream().LA(1)

			if !(_la == KuneiformParserASC || _la == KuneiformParserDESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(525)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserNULLS {
		{
			p.SetState(523)
			p.Match(KuneiformParserNULLS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(524)
			_la = p.GetTokenStream().LA(1)

			if !(_la == KuneiformParserFIRST || _la == KuneiformParserLAST) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_coreContext is an interface to support dynamic dispatch.
type ISelect_coreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhere returns the where rule contexts.
	GetWhere() ISql_exprContext

	// GetGroup_by returns the group_by rule contexts.
	GetGroup_by() ISql_expr_listContext

	// GetHaving returns the having rule contexts.
	GetHaving() ISql_exprContext

	// SetWhere sets the where rule contexts.
	SetWhere(ISql_exprContext)

	// SetGroup_by sets the group_by rule contexts.
	SetGroup_by(ISql_expr_listContext)

	// SetHaving sets the having rule contexts.
	SetHaving(ISql_exprContext)

	// Getter signatures
	SELECT() antlr.TerminalNode
	AllResult_column() []IResult_columnContext
	Result_column(i int) IResult_columnContext
	DISTINCT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FROM() antlr.TerminalNode
	Relation() IRelationContext
	WHERE() antlr.TerminalNode
	GROUP() antlr.TerminalNode
	BY() antlr.TerminalNode
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext
	Sql_expr_list() ISql_expr_listContext
	AllJoin() []IJoinContext
	Join(i int) IJoinContext
	HAVING() antlr.TerminalNode

	// IsSelect_coreContext differentiates from other interfaces.
	IsSelect_coreContext()
}

type Select_coreContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	where    ISql_exprContext
	group_by ISql_expr_listContext
	having   ISql_exprContext
}

func NewEmptySelect_coreContext() *Select_coreContext {
	var p = new(Select_coreContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_select_core
	return p
}

func InitEmptySelect_coreContext(p *Select_coreContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_select_core
}

func (*Select_coreContext) IsSelect_coreContext() {}

func NewSelect_coreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_coreContext {
	var p = new(Select_coreContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_select_core

	return p
}

func (s *Select_coreContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_coreContext) GetWhere() ISql_exprContext { return s.where }

func (s *Select_coreContext) GetGroup_by() ISql_expr_listContext { return s.group_by }

func (s *Select_coreContext) GetHaving() ISql_exprContext { return s.having }

func (s *Select_coreContext) SetWhere(v ISql_exprContext) { s.where = v }

func (s *Select_coreContext) SetGroup_by(v ISql_expr_listContext) { s.group_by = v }

func (s *Select_coreContext) SetHaving(v ISql_exprContext) { s.having = v }

func (s *Select_coreContext) SELECT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSELECT, 0)
}

func (s *Select_coreContext) AllResult_column() []IResult_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResult_columnContext); ok {
			len++
		}
	}

	tst := make([]IResult_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResult_columnContext); ok {
			tst[i] = t.(IResult_columnContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Result_column(i int) IResult_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResult_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_coreContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDISTINCT, 0)
}

func (s *Select_coreContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Select_coreContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Select_coreContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Select_coreContext) Relation() IRelationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *Select_coreContext) WHERE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHERE, 0)
}

func (s *Select_coreContext) GROUP() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGROUP, 0)
}

func (s *Select_coreContext) BY() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBY, 0)
}

func (s *Select_coreContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Select_coreContext) Sql_expr_list() ISql_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *Select_coreContext) AllJoin() []IJoinContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoinContext); ok {
			len++
		}
	}

	tst := make([]IJoinContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoinContext); ok {
			tst[i] = t.(IJoinContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Join(i int) IJoinContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinContext)
}

func (s *Select_coreContext) HAVING() antlr.TerminalNode {
	return s.GetToken(KuneiformParserHAVING, 0)
}

func (s *Select_coreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_coreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_coreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSelect_core(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Select_core() (localctx ISelect_coreContext) {
	localctx = NewSelect_coreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, KuneiformParserRULE_select_core)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(527)
		p.Match(KuneiformParserSELECT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(529)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserDISTINCT {
		{
			p.SetState(528)
			p.Match(KuneiformParserDISTINCT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(531)
		p.Result_column()
	}
	p.SetState(536)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(532)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(533)
			p.Result_column()
		}

		p.SetState(538)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(547)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserFROM {
		{
			p.SetState(539)
			p.Match(KuneiformParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(540)
			p.Relation()
		}
		p.SetState(544)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-70)) & ^0x3f) == 0 && ((int64(1)<<(_la-70))&67108871) != 0 {
			{
				p.SetState(541)
				p.Join()
			}

			p.SetState(546)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(551)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserWHERE {
		{
			p.SetState(549)
			p.Match(KuneiformParserWHERE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(550)

			var _x = p.sql_expr(0)

			localctx.(*Select_coreContext).where = _x
		}

	}
	p.SetState(560)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserGROUP {
		{
			p.SetState(553)
			p.Match(KuneiformParserGROUP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(554)
			p.Match(KuneiformParserBY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(555)

			var _x = p.Sql_expr_list()

			localctx.(*Select_coreContext).group_by = _x
		}
		p.SetState(558)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserHAVING {
			{
				p.SetState(556)
				p.Match(KuneiformParserHAVING)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(557)

				var _x = p.sql_expr(0)

				localctx.(*Select_coreContext).having = _x
			}

		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRelationContext is an interface to support dynamic dispatch.
type IRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsRelationContext differentiates from other interfaces.
	IsRelationContext()
}

type RelationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationContext() *RelationContext {
	var p = new(RelationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_relation
	return p
}

func InitEmptyRelationContext(p *RelationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_relation
}

func (*RelationContext) IsRelationContext() {}

func NewRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationContext {
	var p = new(RelationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_relation

	return p
}

func (s *RelationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationContext) CopyAll(ctx *RelationContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *RelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Function_relationContext struct {
	RelationContext
	alias IIdentifierContext
}

func NewFunction_relationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Function_relationContext {
	var p = new(Function_relationContext)

	InitEmptyRelationContext(&p.RelationContext)
	p.parser = parser
	p.CopyAll(ctx.(*RelationContext))

	return p
}

func (s *Function_relationContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Function_relationContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Function_relationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_relationContext) Sql_function_call() ISql_function_callContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_function_callContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_function_callContext)
}

func (s *Function_relationContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Function_relationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_relationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitFunction_relation(s)

	default:
		return t.VisitChildren(s)
	}
}

type Table_relationContext struct {
	RelationContext
	table_name IIdentifierContext
	alias      IIdentifierContext
}

func NewTable_relationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Table_relationContext {
	var p = new(Table_relationContext)

	InitEmptyRelationContext(&p.RelationContext)
	p.parser = parser
	p.CopyAll(ctx.(*RelationContext))

	return p
}

func (s *Table_relationContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Table_relationContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Table_relationContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Table_relationContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Table_relationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_relationContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Table_relationContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_relationContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Table_relationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitTable_relation(s)

	default:
		return t.VisitChildren(s)
	}
}

type Subquery_relationContext struct {
	RelationContext
	alias IIdentifierContext
}

func NewSubquery_relationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Subquery_relationContext {
	var p = new(Subquery_relationContext)

	InitEmptyRelationContext(&p.RelationContext)
	p.parser = parser
	p.CopyAll(ctx.(*RelationContext))

	return p
}

func (s *Subquery_relationContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Subquery_relationContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Subquery_relationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subquery_relationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Subquery_relationContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Subquery_relationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Subquery_relationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Subquery_relationContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Subquery_relationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSubquery_relation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Relation() (localctx IRelationContext) {
	localctx = NewRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, KuneiformParserRULE_relation)
	var _la int

	p.SetState(585)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTable_relationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(562)

			var _x = p.Identifier()

			localctx.(*Table_relationContext).table_name = _x
		}
		p.SetState(567)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserDOUBLE_QUOTE || _la == KuneiformParserAS || _la == KuneiformParserIDENTIFIER {
			p.SetState(564)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == KuneiformParserAS {
				{
					p.SetState(563)
					p.Match(KuneiformParserAS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(566)

				var _x = p.Identifier()

				localctx.(*Table_relationContext).alias = _x
			}

		}

	case 2:
		localctx = NewSubquery_relationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(569)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(570)
			p.Select_statement()
		}
		{
			p.SetState(571)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(576)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserDOUBLE_QUOTE || _la == KuneiformParserAS || _la == KuneiformParserIDENTIFIER {
			p.SetState(573)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == KuneiformParserAS {
				{
					p.SetState(572)
					p.Match(KuneiformParserAS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(575)

				var _x = p.Identifier()

				localctx.(*Subquery_relationContext).alias = _x
			}

		}

	case 3:
		localctx = NewFunction_relationContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(578)
			p.Sql_function_call()
		}

		p.SetState(580)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserAS {
			{
				p.SetState(579)
				p.Match(KuneiformParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(583)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserDOUBLE_QUOTE || _la == KuneiformParserIDENTIFIER {
			{
				p.SetState(582)

				var _x = p.Identifier()

				localctx.(*Function_relationContext).alias = _x
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinContext is an interface to support dynamic dispatch.
type IJoinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	JOIN() antlr.TerminalNode
	Relation() IRelationContext
	ON() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	INNER() antlr.TerminalNode
	LEFT() antlr.TerminalNode
	RIGHT() antlr.TerminalNode
	FULL() antlr.TerminalNode

	// IsJoinContext differentiates from other interfaces.
	IsJoinContext()
}

type JoinContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinContext() *JoinContext {
	var p = new(JoinContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_join
	return p
}

func InitEmptyJoinContext(p *JoinContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_join
}

func (*JoinContext) IsJoinContext() {}

func NewJoinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinContext {
	var p = new(JoinContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_join

	return p
}

func (s *JoinContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserJOIN, 0)
}

func (s *JoinContext) Relation() IRelationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *JoinContext) ON() antlr.TerminalNode {
	return s.GetToken(KuneiformParserON, 0)
}

func (s *JoinContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *JoinContext) INNER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINNER, 0)
}

func (s *JoinContext) LEFT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLEFT, 0)
}

func (s *JoinContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRIGHT, 0)
}

func (s *JoinContext) FULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFULL, 0)
}

func (s *JoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Join() (localctx IJoinContext) {
	localctx = NewJoinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, KuneiformParserRULE_join)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(587)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-70)) & ^0x3f) == 0 && ((int64(1)<<(_la-70))&67108871) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(588)
		p.Match(KuneiformParserJOIN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(589)
		p.Relation()
	}
	{
		p.SetState(590)
		p.Match(KuneiformParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(591)
		p.sql_expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResult_columnContext is an interface to support dynamic dispatch.
type IResult_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsResult_columnContext differentiates from other interfaces.
	IsResult_columnContext()
}

type Result_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResult_columnContext() *Result_columnContext {
	var p = new(Result_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_result_column
	return p
}

func InitEmptyResult_columnContext(p *Result_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_result_column
}

func (*Result_columnContext) IsResult_columnContext() {}

func NewResult_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Result_columnContext {
	var p = new(Result_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_result_column

	return p
}

func (s *Result_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Result_columnContext) CopyAll(ctx *Result_columnContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Result_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Expression_result_columnContext struct {
	Result_columnContext
}

func NewExpression_result_columnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expression_result_columnContext {
	var p = new(Expression_result_columnContext)

	InitEmptyResult_columnContext(&p.Result_columnContext)
	p.parser = parser
	p.CopyAll(ctx.(*Result_columnContext))

	return p
}

func (s *Expression_result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_result_columnContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Expression_result_columnContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Expression_result_columnContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Expression_result_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitExpression_result_column(s)

	default:
		return t.VisitChildren(s)
	}
}

type Wildcard_result_columnContext struct {
	Result_columnContext
	table_name IIdentifierContext
}

func NewWildcard_result_columnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Wildcard_result_columnContext {
	var p = new(Wildcard_result_columnContext)

	InitEmptyResult_columnContext(&p.Result_columnContext)
	p.parser = parser
	p.CopyAll(ctx.(*Result_columnContext))

	return p
}

func (s *Wildcard_result_columnContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Wildcard_result_columnContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Wildcard_result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Wildcard_result_columnContext) STAR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTAR, 0)
}

func (s *Wildcard_result_columnContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Wildcard_result_columnContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Wildcard_result_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitWildcard_result_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Result_column() (localctx IResult_columnContext) {
	localctx = NewResult_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, KuneiformParserRULE_result_column)
	var _la int

	p.SetState(606)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExpression_result_columnContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(593)
			p.sql_expr(0)
		}
		p.SetState(598)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserDOUBLE_QUOTE || _la == KuneiformParserAS || _la == KuneiformParserIDENTIFIER {
			p.SetState(595)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == KuneiformParserAS {
				{
					p.SetState(594)
					p.Match(KuneiformParserAS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(597)
				p.Identifier()
			}

		}

	case 2:
		localctx = NewWildcard_result_columnContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(603)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserDOUBLE_QUOTE || _la == KuneiformParserIDENTIFIER {
			{
				p.SetState(600)

				var _x = p.Identifier()

				localctx.(*Wildcard_result_columnContext).table_name = _x
			}
			{
				p.SetState(601)
				p.Match(KuneiformParserPERIOD)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(605)
			p.Match(KuneiformParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_statementContext is an interface to support dynamic dispatch.
type IUpdate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// GetWhere returns the where rule contexts.
	GetWhere() ISql_exprContext

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// SetWhere sets the where rule contexts.
	SetWhere(ISql_exprContext)

	// Getter signatures
	UPDATE() antlr.TerminalNode
	SET() antlr.TerminalNode
	AllUpdate_set_clause() []IUpdate_set_clauseContext
	Update_set_clause(i int) IUpdate_set_clauseContext
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FROM() antlr.TerminalNode
	Relation() IRelationContext
	WHERE() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	AS() antlr.TerminalNode
	AllJoin() []IJoinContext
	Join(i int) IJoinContext

	// IsUpdate_statementContext differentiates from other interfaces.
	IsUpdate_statementContext()
}

type Update_statementContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	table_name IIdentifierContext
	alias      IIdentifierContext
	where      ISql_exprContext
}

func NewEmptyUpdate_statementContext() *Update_statementContext {
	var p = new(Update_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_update_statement
	return p
}

func InitEmptyUpdate_statementContext(p *Update_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_update_statement
}

func (*Update_statementContext) IsUpdate_statementContext() {}

func NewUpdate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_statementContext {
	var p = new(Update_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_update_statement

	return p
}

func (s *Update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_statementContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Update_statementContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Update_statementContext) GetWhere() ISql_exprContext { return s.where }

func (s *Update_statementContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Update_statementContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Update_statementContext) SetWhere(v ISql_exprContext) { s.where = v }

func (s *Update_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUPDATE, 0)
}

func (s *Update_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSET, 0)
}

func (s *Update_statementContext) AllUpdate_set_clause() []IUpdate_set_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdate_set_clauseContext); ok {
			len++
		}
	}

	tst := make([]IUpdate_set_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdate_set_clauseContext); ok {
			tst[i] = t.(IUpdate_set_clauseContext)
			i++
		}
	}

	return tst
}

func (s *Update_statementContext) Update_set_clause(i int) IUpdate_set_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_set_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_set_clauseContext)
}

func (s *Update_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Update_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Update_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Update_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Update_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Update_statementContext) Relation() IRelationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *Update_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHERE, 0)
}

func (s *Update_statementContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Update_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Update_statementContext) AllJoin() []IJoinContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoinContext); ok {
			len++
		}
	}

	tst := make([]IJoinContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoinContext); ok {
			tst[i] = t.(IJoinContext)
			i++
		}
	}

	return tst
}

func (s *Update_statementContext) Join(i int) IJoinContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinContext)
}

func (s *Update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUpdate_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Update_statement() (localctx IUpdate_statementContext) {
	localctx = NewUpdate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, KuneiformParserRULE_update_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(608)
		p.Match(KuneiformParserUPDATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(609)

		var _x = p.Identifier()

		localctx.(*Update_statementContext).table_name = _x
	}
	p.SetState(614)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserDOUBLE_QUOTE || _la == KuneiformParserAS || _la == KuneiformParserIDENTIFIER {
		p.SetState(611)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserAS {
			{
				p.SetState(610)
				p.Match(KuneiformParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(613)

			var _x = p.Identifier()

			localctx.(*Update_statementContext).alias = _x
		}

	}
	{
		p.SetState(616)
		p.Match(KuneiformParserSET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(617)
		p.Update_set_clause()
	}
	p.SetState(622)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(618)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(619)
			p.Update_set_clause()
		}

		p.SetState(624)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(633)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserFROM {
		{
			p.SetState(625)
			p.Match(KuneiformParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(626)
			p.Relation()
		}
		p.SetState(630)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-70)) & ^0x3f) == 0 && ((int64(1)<<(_la-70))&67108871) != 0 {
			{
				p.SetState(627)
				p.Join()
			}

			p.SetState(632)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(637)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserWHERE {
		{
			p.SetState(635)
			p.Match(KuneiformParserWHERE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(636)

			var _x = p.sql_expr(0)

			localctx.(*Update_statementContext).where = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_set_clauseContext is an interface to support dynamic dispatch.
type IUpdate_set_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn returns the column rule contexts.
	GetColumn() IIdentifierContext

	// SetColumn sets the column rule contexts.
	SetColumn(IIdentifierContext)

	// Getter signatures
	EQUALS() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	Identifier() IIdentifierContext

	// IsUpdate_set_clauseContext differentiates from other interfaces.
	IsUpdate_set_clauseContext()
}

type Update_set_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	column IIdentifierContext
}

func NewEmptyUpdate_set_clauseContext() *Update_set_clauseContext {
	var p = new(Update_set_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_update_set_clause
	return p
}

func InitEmptyUpdate_set_clauseContext(p *Update_set_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_update_set_clause
}

func (*Update_set_clauseContext) IsUpdate_set_clauseContext() {}

func NewUpdate_set_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_set_clauseContext {
	var p = new(Update_set_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_update_set_clause

	return p
}

func (s *Update_set_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_set_clauseContext) GetColumn() IIdentifierContext { return s.column }

func (s *Update_set_clauseContext) SetColumn(v IIdentifierContext) { s.column = v }

func (s *Update_set_clauseContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, 0)
}

func (s *Update_set_clauseContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Update_set_clauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Update_set_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_set_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_set_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUpdate_set_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Update_set_clause() (localctx IUpdate_set_clauseContext) {
	localctx = NewUpdate_set_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, KuneiformParserRULE_update_set_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(639)

		var _x = p.Identifier()

		localctx.(*Update_set_clauseContext).column = _x
	}
	{
		p.SetState(640)
		p.Match(KuneiformParserEQUALS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(641)
		p.sql_expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_statementContext is an interface to support dynamic dispatch.
type IInsert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// GetTarget_columns returns the target_columns rule contexts.
	GetTarget_columns() IIdentifier_listContext

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// SetTarget_columns sets the target_columns rule contexts.
	SetTarget_columns(IIdentifier_listContext)

	// Getter signatures
	INSERT() antlr.TerminalNode
	INTO() antlr.TerminalNode
	VALUES() antlr.TerminalNode
	AllLPAREN() []antlr.TerminalNode
	LPAREN(i int) antlr.TerminalNode
	AllSql_expr_list() []ISql_expr_listContext
	Sql_expr_list(i int) ISql_expr_listContext
	AllRPAREN() []antlr.TerminalNode
	RPAREN(i int) antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	Upsert_clause() IUpsert_clauseContext
	Identifier_list() IIdentifier_listContext
	AS() antlr.TerminalNode

	// IsInsert_statementContext differentiates from other interfaces.
	IsInsert_statementContext()
}

type Insert_statementContext struct {
	antlr.BaseParserRuleContext
	parser         antlr.Parser
	table_name     IIdentifierContext
	alias          IIdentifierContext
	target_columns IIdentifier_listContext
}

func NewEmptyInsert_statementContext() *Insert_statementContext {
	var p = new(Insert_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_insert_statement
	return p
}

func InitEmptyInsert_statementContext(p *Insert_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_insert_statement
}

func (*Insert_statementContext) IsInsert_statementContext() {}

func NewInsert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statementContext {
	var p = new(Insert_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_insert_statement

	return p
}

func (s *Insert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statementContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Insert_statementContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Insert_statementContext) GetTarget_columns() IIdentifier_listContext {
	return s.target_columns
}

func (s *Insert_statementContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Insert_statementContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Insert_statementContext) SetTarget_columns(v IIdentifier_listContext) { s.target_columns = v }

func (s *Insert_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINSERT, 0)
}

func (s *Insert_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserINTO, 0)
}

func (s *Insert_statementContext) VALUES() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVALUES, 0)
}

func (s *Insert_statementContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserLPAREN)
}

func (s *Insert_statementContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, i)
}

func (s *Insert_statementContext) AllSql_expr_list() []ISql_expr_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			len++
		}
	}

	tst := make([]ISql_expr_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_expr_listContext); ok {
			tst[i] = t.(ISql_expr_listContext)
			i++
		}
	}

	return tst
}

func (s *Insert_statementContext) Sql_expr_list(i int) ISql_expr_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *Insert_statementContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserRPAREN)
}

func (s *Insert_statementContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, i)
}

func (s *Insert_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Insert_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Insert_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Insert_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Insert_statementContext) Upsert_clause() IUpsert_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpsert_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpsert_clauseContext)
}

func (s *Insert_statementContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Insert_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Insert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitInsert_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Insert_statement() (localctx IInsert_statementContext) {
	localctx = NewInsert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, KuneiformParserRULE_insert_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(643)
		p.Match(KuneiformParserINSERT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(644)
		p.Match(KuneiformParserINTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(645)

		var _x = p.Identifier()

		localctx.(*Insert_statementContext).table_name = _x
	}
	p.SetState(650)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserDOUBLE_QUOTE || _la == KuneiformParserAS || _la == KuneiformParserIDENTIFIER {
		p.SetState(647)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserAS {
			{
				p.SetState(646)
				p.Match(KuneiformParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(649)

			var _x = p.Identifier()

			localctx.(*Insert_statementContext).alias = _x
		}

	}
	p.SetState(656)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLPAREN {
		{
			p.SetState(652)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(653)

			var _x = p.Identifier_list()

			localctx.(*Insert_statementContext).target_columns = _x
		}
		{
			p.SetState(654)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(658)
		p.Match(KuneiformParserVALUES)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(659)
		p.Match(KuneiformParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(660)
		p.Sql_expr_list()
	}
	{
		p.SetState(661)
		p.Match(KuneiformParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(669)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(662)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(663)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(664)
			p.Sql_expr_list()
		}
		{
			p.SetState(665)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(671)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserON {
		{
			p.SetState(672)
			p.Upsert_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpsert_clauseContext is an interface to support dynamic dispatch.
type IUpsert_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConflict_columns returns the conflict_columns rule contexts.
	GetConflict_columns() IIdentifier_listContext

	// GetConflict_where returns the conflict_where rule contexts.
	GetConflict_where() ISql_exprContext

	// GetUpdate_where returns the update_where rule contexts.
	GetUpdate_where() ISql_exprContext

	// SetConflict_columns sets the conflict_columns rule contexts.
	SetConflict_columns(IIdentifier_listContext)

	// SetConflict_where sets the conflict_where rule contexts.
	SetConflict_where(ISql_exprContext)

	// SetUpdate_where sets the update_where rule contexts.
	SetUpdate_where(ISql_exprContext)

	// Getter signatures
	ON() antlr.TerminalNode
	CONFLICT() antlr.TerminalNode
	DO() antlr.TerminalNode
	NOTHING() antlr.TerminalNode
	UPDATE() antlr.TerminalNode
	SET() antlr.TerminalNode
	AllUpdate_set_clause() []IUpdate_set_clauseContext
	Update_set_clause(i int) IUpdate_set_clauseContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllWHERE() []antlr.TerminalNode
	WHERE(i int) antlr.TerminalNode
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext

	// IsUpsert_clauseContext differentiates from other interfaces.
	IsUpsert_clauseContext()
}

type Upsert_clauseContext struct {
	antlr.BaseParserRuleContext
	parser           antlr.Parser
	conflict_columns IIdentifier_listContext
	conflict_where   ISql_exprContext
	update_where     ISql_exprContext
}

func NewEmptyUpsert_clauseContext() *Upsert_clauseContext {
	var p = new(Upsert_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_upsert_clause
	return p
}

func InitEmptyUpsert_clauseContext(p *Upsert_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_upsert_clause
}

func (*Upsert_clauseContext) IsUpsert_clauseContext() {}

func NewUpsert_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Upsert_clauseContext {
	var p = new(Upsert_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_upsert_clause

	return p
}

func (s *Upsert_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Upsert_clauseContext) GetConflict_columns() IIdentifier_listContext {
	return s.conflict_columns
}

func (s *Upsert_clauseContext) GetConflict_where() ISql_exprContext { return s.conflict_where }

func (s *Upsert_clauseContext) GetUpdate_where() ISql_exprContext { return s.update_where }

func (s *Upsert_clauseContext) SetConflict_columns(v IIdentifier_listContext) { s.conflict_columns = v }

func (s *Upsert_clauseContext) SetConflict_where(v ISql_exprContext) { s.conflict_where = v }

func (s *Upsert_clauseContext) SetUpdate_where(v ISql_exprContext) { s.update_where = v }

func (s *Upsert_clauseContext) ON() antlr.TerminalNode {
	return s.GetToken(KuneiformParserON, 0)
}

func (s *Upsert_clauseContext) CONFLICT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONFLICT, 0)
}

func (s *Upsert_clauseContext) DO() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDO, 0)
}

func (s *Upsert_clauseContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOTHING, 0)
}

func (s *Upsert_clauseContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUPDATE, 0)
}

func (s *Upsert_clauseContext) SET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSET, 0)
}

func (s *Upsert_clauseContext) AllUpdate_set_clause() []IUpdate_set_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdate_set_clauseContext); ok {
			len++
		}
	}

	tst := make([]IUpdate_set_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdate_set_clauseContext); ok {
			tst[i] = t.(IUpdate_set_clauseContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Update_set_clause(i int) IUpdate_set_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_set_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_set_clauseContext)
}

func (s *Upsert_clauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Upsert_clauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Upsert_clauseContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Upsert_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Upsert_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Upsert_clauseContext) AllWHERE() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserWHERE)
}

func (s *Upsert_clauseContext) WHERE(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHERE, i)
}

func (s *Upsert_clauseContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Upsert_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Upsert_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Upsert_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUpsert_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Upsert_clause() (localctx IUpsert_clauseContext) {
	localctx = NewUpsert_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, KuneiformParserRULE_upsert_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(675)
		p.Match(KuneiformParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(676)
		p.Match(KuneiformParserCONFLICT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(684)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserLPAREN {
		{
			p.SetState(677)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(678)

			var _x = p.Identifier_list()

			localctx.(*Upsert_clauseContext).conflict_columns = _x
		}
		{
			p.SetState(679)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(682)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserWHERE {
			{
				p.SetState(680)
				p.Match(KuneiformParserWHERE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(681)

				var _x = p.sql_expr(0)

				localctx.(*Upsert_clauseContext).conflict_where = _x
			}

		}

	}
	{
		p.SetState(686)
		p.Match(KuneiformParserDO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(702)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case KuneiformParserNOTHING:
		{
			p.SetState(687)
			p.Match(KuneiformParserNOTHING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case KuneiformParserUPDATE:
		{
			p.SetState(688)
			p.Match(KuneiformParserUPDATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(689)
			p.Match(KuneiformParserSET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(690)
			p.Update_set_clause()
		}
		p.SetState(695)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserCOMMA {
			{
				p.SetState(691)
				p.Match(KuneiformParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(692)
				p.Update_set_clause()
			}

			p.SetState(697)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(700)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserWHERE {
			{
				p.SetState(698)
				p.Match(KuneiformParserWHERE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(699)

				var _x = p.sql_expr(0)

				localctx.(*Upsert_clauseContext).update_where = _x
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDelete_statementContext is an interface to support dynamic dispatch.
type IDelete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// GetWhere returns the where rule contexts.
	GetWhere() ISql_exprContext

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// SetWhere sets the where rule contexts.
	SetWhere(ISql_exprContext)

	// Getter signatures
	DELETE() antlr.TerminalNode
	FROM() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	WHERE() antlr.TerminalNode
	Sql_expr() ISql_exprContext
	AS() antlr.TerminalNode

	// IsDelete_statementContext differentiates from other interfaces.
	IsDelete_statementContext()
}

type Delete_statementContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	table_name IIdentifierContext
	alias      IIdentifierContext
	where      ISql_exprContext
}

func NewEmptyDelete_statementContext() *Delete_statementContext {
	var p = new(Delete_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_delete_statement
	return p
}

func InitEmptyDelete_statementContext(p *Delete_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_delete_statement
}

func (*Delete_statementContext) IsDelete_statementContext() {}

func NewDelete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statementContext {
	var p = new(Delete_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_delete_statement

	return p
}

func (s *Delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statementContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Delete_statementContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Delete_statementContext) GetWhere() ISql_exprContext { return s.where }

func (s *Delete_statementContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Delete_statementContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Delete_statementContext) SetWhere(v ISql_exprContext) { s.where = v }

func (s *Delete_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDELETE, 0)
}

func (s *Delete_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Delete_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Delete_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Delete_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHERE, 0)
}

func (s *Delete_statementContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Delete_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAS, 0)
}

func (s *Delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitDelete_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Delete_statement() (localctx IDelete_statementContext) {
	localctx = NewDelete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, KuneiformParserRULE_delete_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(704)
		p.Match(KuneiformParserDELETE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(705)
		p.Match(KuneiformParserFROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(706)

		var _x = p.Identifier()

		localctx.(*Delete_statementContext).table_name = _x
	}
	p.SetState(711)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserDOUBLE_QUOTE || _la == KuneiformParserAS || _la == KuneiformParserIDENTIFIER {
		p.SetState(708)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserAS {
			{
				p.SetState(707)
				p.Match(KuneiformParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(710)

			var _x = p.Identifier()

			localctx.(*Delete_statementContext).alias = _x
		}

	}
	p.SetState(715)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == KuneiformParserWHERE {
		{
			p.SetState(713)
			p.Match(KuneiformParserWHERE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(714)

			var _x = p.sql_expr(0)

			localctx.(*Delete_statementContext).where = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_exprContext is an interface to support dynamic dispatch.
type ISql_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSql_exprContext differentiates from other interfaces.
	IsSql_exprContext()
}

type Sql_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_exprContext() *Sql_exprContext {
	var p = new(Sql_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_expr
	return p
}

func InitEmptySql_exprContext(p *Sql_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_expr
}

func (*Sql_exprContext) IsSql_exprContext() {}

func NewSql_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_exprContext {
	var p = new(Sql_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql_expr

	return p
}

func (s *Sql_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_exprContext) CopyAll(ctx *Sql_exprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Column_sql_exprContext struct {
	Sql_exprContext
	table  IIdentifierContext
	column IIdentifierContext
}

func NewColumn_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Column_sql_exprContext {
	var p = new(Column_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Column_sql_exprContext) GetTable() IIdentifierContext { return s.table }

func (s *Column_sql_exprContext) GetColumn() IIdentifierContext { return s.column }

func (s *Column_sql_exprContext) SetTable(v IIdentifierContext) { s.table = v }

func (s *Column_sql_exprContext) SetColumn(v IIdentifierContext) { s.column = v }

func (s *Column_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_sql_exprContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Column_sql_exprContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_sql_exprContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Column_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Column_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitColumn_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Logical_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewLogical_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Logical_sql_exprContext {
	var p = new(Logical_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Logical_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Logical_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Logical_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Logical_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Logical_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Logical_sql_exprContext) AND() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAND, 0)
}

func (s *Logical_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Logical_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Logical_sql_exprContext) OR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOR, 0)
}

func (s *Logical_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLogical_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Array_access_sql_exprContext struct {
	Sql_exprContext
}

func NewArray_access_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Array_access_sql_exprContext {
	var p = new(Array_access_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Array_access_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_access_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Array_access_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Array_access_sql_exprContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *Array_access_sql_exprContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *Array_access_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Array_access_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitArray_access_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Field_access_sql_exprContext struct {
	Sql_exprContext
}

func NewField_access_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Field_access_sql_exprContext {
	var p = new(Field_access_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Field_access_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Field_access_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Field_access_sql_exprContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Field_access_sql_exprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Field_access_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Field_access_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitField_access_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Comparison_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewComparison_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Comparison_sql_exprContext {
	var p = new(Comparison_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Comparison_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Comparison_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Comparison_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Comparison_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Comparison_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Comparison_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Comparison_sql_exprContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, 0)
}

func (s *Comparison_sql_exprContext) EQUATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUATE, 0)
}

func (s *Comparison_sql_exprContext) NEQ() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNEQ, 0)
}

func (s *Comparison_sql_exprContext) LT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLT, 0)
}

func (s *Comparison_sql_exprContext) LTE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLTE, 0)
}

func (s *Comparison_sql_exprContext) GT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGT, 0)
}

func (s *Comparison_sql_exprContext) GTE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGTE, 0)
}

func (s *Comparison_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitComparison_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Literal_sql_exprContext struct {
	Sql_exprContext
}

func NewLiteral_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Literal_sql_exprContext {
	var p = new(Literal_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Literal_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Literal_sql_exprContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *Literal_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Literal_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLiteral_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Between_sql_exprContext struct {
	Sql_exprContext
	element ISql_exprContext
	lower   ISql_exprContext
	upper   ISql_exprContext
}

func NewBetween_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Between_sql_exprContext {
	var p = new(Between_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Between_sql_exprContext) GetElement() ISql_exprContext { return s.element }

func (s *Between_sql_exprContext) GetLower() ISql_exprContext { return s.lower }

func (s *Between_sql_exprContext) GetUpper() ISql_exprContext { return s.upper }

func (s *Between_sql_exprContext) SetElement(v ISql_exprContext) { s.element = v }

func (s *Between_sql_exprContext) SetLower(v ISql_exprContext) { s.lower = v }

func (s *Between_sql_exprContext) SetUpper(v ISql_exprContext) { s.upper = v }

func (s *Between_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Between_sql_exprContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBETWEEN, 0)
}

func (s *Between_sql_exprContext) AND() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAND, 0)
}

func (s *Between_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Between_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Between_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Between_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitBetween_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Function_call_sql_exprContext struct {
	Sql_exprContext
}

func NewFunction_call_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Function_call_sql_exprContext {
	var p = new(Function_call_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Function_call_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_sql_exprContext) Sql_function_call() ISql_function_callContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_function_callContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_function_callContext)
}

func (s *Function_call_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Function_call_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitFunction_call_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Paren_sql_exprContext struct {
	Sql_exprContext
}

func NewParen_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Paren_sql_exprContext {
	var p = new(Paren_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Paren_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Paren_sql_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Paren_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Paren_sql_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Paren_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Paren_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitParen_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Collate_sql_exprContext struct {
	Sql_exprContext
}

func NewCollate_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Collate_sql_exprContext {
	var p = new(Collate_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Collate_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collate_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Collate_sql_exprContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOLLATE, 0)
}

func (s *Collate_sql_exprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Collate_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCollate_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Variable_sql_exprContext struct {
	Sql_exprContext
}

func NewVariable_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Variable_sql_exprContext {
	var p = new(Variable_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Variable_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_sql_exprContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Variable_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Variable_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitVariable_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Is_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewIs_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Is_sql_exprContext {
	var p = new(Is_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Is_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Is_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Is_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Is_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Is_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Is_sql_exprContext) IS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIS, 0)
}

func (s *Is_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Is_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Is_sql_exprContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Is_sql_exprContext) TRUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTRUE, 0)
}

func (s *Is_sql_exprContext) FALSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFALSE, 0)
}

func (s *Is_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Is_sql_exprContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDISTINCT, 0)
}

func (s *Is_sql_exprContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Is_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIs_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Like_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewLike_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Like_sql_exprContext {
	var p = new(Like_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Like_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Like_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Like_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Like_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Like_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Like_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Like_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Like_sql_exprContext) LIKE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLIKE, 0)
}

func (s *Like_sql_exprContext) ILIKE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserILIKE, 0)
}

func (s *Like_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Like_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLike_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Arithmetic_sql_exprContext struct {
	Sql_exprContext
	left  ISql_exprContext
	right ISql_exprContext
}

func NewArithmetic_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Arithmetic_sql_exprContext {
	var p = new(Arithmetic_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Arithmetic_sql_exprContext) GetLeft() ISql_exprContext { return s.left }

func (s *Arithmetic_sql_exprContext) GetRight() ISql_exprContext { return s.right }

func (s *Arithmetic_sql_exprContext) SetLeft(v ISql_exprContext) { s.left = v }

func (s *Arithmetic_sql_exprContext) SetRight(v ISql_exprContext) { s.right = v }

func (s *Arithmetic_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arithmetic_sql_exprContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONCAT, 0)
}

func (s *Arithmetic_sql_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Arithmetic_sql_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Arithmetic_sql_exprContext) STAR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTAR, 0)
}

func (s *Arithmetic_sql_exprContext) DIV() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIV, 0)
}

func (s *Arithmetic_sql_exprContext) MOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMOD, 0)
}

func (s *Arithmetic_sql_exprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Arithmetic_sql_exprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Arithmetic_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitArithmetic_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Subquery_sql_exprContext struct {
	Sql_exprContext
}

func NewSubquery_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Subquery_sql_exprContext {
	var p = new(Subquery_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Subquery_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subquery_sql_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Subquery_sql_exprContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Subquery_sql_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Subquery_sql_exprContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXISTS, 0)
}

func (s *Subquery_sql_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Subquery_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Subquery_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSubquery_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Unary_sql_exprContext struct {
	Sql_exprContext
}

func NewUnary_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Unary_sql_exprContext {
	var p = new(Unary_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Unary_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Unary_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Unary_sql_exprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Unary_sql_exprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Unary_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUnary_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Case_exprContext struct {
	Sql_exprContext
	case_clause ISql_exprContext
	else_clause ISql_exprContext
}

func NewCase_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Case_exprContext {
	var p = new(Case_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *Case_exprContext) GetCase_clause() ISql_exprContext { return s.case_clause }

func (s *Case_exprContext) GetElse_clause() ISql_exprContext { return s.else_clause }

func (s *Case_exprContext) SetCase_clause(v ISql_exprContext) { s.case_clause = v }

func (s *Case_exprContext) SetElse_clause(v ISql_exprContext) { s.else_clause = v }

func (s *Case_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_exprContext) CASE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCASE, 0)
}

func (s *Case_exprContext) END() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEND, 0)
}

func (s *Case_exprContext) AllWhen_then_clause() []IWhen_then_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWhen_then_clauseContext); ok {
			len++
		}
	}

	tst := make([]IWhen_then_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWhen_then_clauseContext); ok {
			tst[i] = t.(IWhen_then_clauseContext)
			i++
		}
	}

	return tst
}

func (s *Case_exprContext) When_then_clause(i int) IWhen_then_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhen_then_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhen_then_clauseContext)
}

func (s *Case_exprContext) ELSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserELSE, 0)
}

func (s *Case_exprContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Case_exprContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Case_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitCase_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type In_sql_exprContext struct {
	Sql_exprContext
}

func NewIn_sql_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *In_sql_exprContext {
	var p = new(In_sql_exprContext)

	InitEmptySql_exprContext(&p.Sql_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_exprContext))

	return p
}

func (s *In_sql_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *In_sql_exprContext) Sql_expr() ISql_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *In_sql_exprContext) IN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIN, 0)
}

func (s *In_sql_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *In_sql_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *In_sql_exprContext) Sql_expr_list() ISql_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *In_sql_exprContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *In_sql_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *In_sql_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIn_sql_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql_expr() (localctx ISql_exprContext) {
	return p.sql_expr(0)
}

func (p *KuneiformParser) sql_expr(_p int) (localctx ISql_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewSql_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISql_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 88
	p.EnterRecursionRule(localctx, 88, KuneiformParserRULE_sql_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(774)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 107, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLiteral_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(718)
			p.Literal()
		}
		p.SetState(720)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(719)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		localctx = NewFunction_call_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(722)
			p.Sql_function_call()
		}
		p.SetState(724)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(723)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		localctx = NewVariable_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(726)
			p.Variable()
		}
		p.SetState(728)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(727)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		localctx = NewColumn_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(733)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(730)

				var _x = p.Identifier()

				localctx.(*Column_sql_exprContext).table = _x
			}
			{
				p.SetState(731)
				p.Match(KuneiformParserPERIOD)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(735)

			var _x = p.Identifier()

			localctx.(*Column_sql_exprContext).column = _x
		}
		p.SetState(737)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(736)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 5:
		localctx = NewParen_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(739)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(740)
			p.sql_expr(0)
		}
		{
			p.SetState(741)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(743)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(742)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 6:
		localctx = NewUnary_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(745)
			_la = p.GetTokenStream().LA(1)

			if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&144115188079001600) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(746)
			p.sql_expr(10)
		}

	case 7:
		localctx = NewCase_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(747)
			p.Match(KuneiformParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(749)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&148618792001339520) != 0) || ((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&4043950990402519041) != 0) {
			{
				p.SetState(748)

				var _x = p.sql_expr(0)

				localctx.(*Case_exprContext).case_clause = _x
			}

		}
		p.SetState(752)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == KuneiformParserWHEN {
			{
				p.SetState(751)
				p.When_then_clause()
			}

			p.SetState(754)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(758)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserELSE {
			{
				p.SetState(756)
				p.Match(KuneiformParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(757)

				var _x = p.sql_expr(0)

				localctx.(*Case_exprContext).else_clause = _x
			}

		}
		{
			p.SetState(760)
			p.Match(KuneiformParserEND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		localctx = NewSubquery_sql_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(766)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserNOT || _la == KuneiformParserEXISTS {
			p.SetState(763)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == KuneiformParserNOT {
				{
					p.SetState(762)
					p.Match(KuneiformParserNOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(765)
				p.Match(KuneiformParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(768)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(769)
			p.Select_statement()
		}
		{
			p.SetState(770)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(772)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(771)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(852)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(850)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 116, p.GetParserRuleContext()) {
			case 1:
				localctx = NewComparison_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Comparison_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(776)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(777)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&260145152) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(778)

					var _x = p.sql_expr(14)

					localctx.(*Comparison_sql_exprContext).right = _x
				}

			case 2:
				localctx = NewLike_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Like_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(779)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				p.SetState(781)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(780)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(783)
					_la = p.GetTokenStream().LA(1)

					if !(_la == KuneiformParserLIKE || _la == KuneiformParserILIKE) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(784)

					var _x = p.sql_expr(12)

					localctx.(*Like_sql_exprContext).right = _x
				}

			case 3:
				localctx = NewBetween_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Between_sql_exprContext).element = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(785)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				p.SetState(787)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(786)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(789)
					p.Match(KuneiformParserBETWEEN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(790)

					var _x = p.sql_expr(0)

					localctx.(*Between_sql_exprContext).lower = _x
				}
				{
					p.SetState(791)
					p.Match(KuneiformParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(792)

					var _x = p.sql_expr(10)

					localctx.(*Between_sql_exprContext).upper = _x
				}

			case 4:
				localctx = NewArithmetic_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Arithmetic_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(794)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(795)
					p.Match(KuneiformParserCONCAT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(796)

					var _x = p.sql_expr(6)

					localctx.(*Arithmetic_sql_exprContext).right = _x
				}

			case 5:
				localctx = NewArithmetic_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Arithmetic_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(797)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(798)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4734976) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(799)

					var _x = p.sql_expr(5)

					localctx.(*Arithmetic_sql_exprContext).right = _x
				}

			case 6:
				localctx = NewArithmetic_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Arithmetic_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(800)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(801)
					_la = p.GetTokenStream().LA(1)

					if !(_la == KuneiformParserPLUS || _la == KuneiformParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(802)

					var _x = p.sql_expr(4)

					localctx.(*Arithmetic_sql_exprContext).right = _x
				}

			case 7:
				localctx = NewLogical_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Logical_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(803)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(804)
					p.Match(KuneiformParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(805)

					var _x = p.sql_expr(3)

					localctx.(*Logical_sql_exprContext).right = _x
				}

			case 8:
				localctx = NewLogical_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Logical_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(806)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(807)
					p.Match(KuneiformParserOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(808)

					var _x = p.sql_expr(2)

					localctx.(*Logical_sql_exprContext).right = _x
				}

			case 9:
				localctx = NewCollate_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(809)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(810)
					p.Match(KuneiformParserCOLLATE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(811)
					p.Identifier()
				}

			case 10:
				localctx = NewArray_access_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(812)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(813)
					p.Match(KuneiformParserLBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(814)
					p.sql_expr(0)
				}
				{
					p.SetState(815)
					p.Match(KuneiformParserRBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(817)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(816)
						p.Type_cast()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 11:
				localctx = NewField_access_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(819)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				{
					p.SetState(820)
					p.Match(KuneiformParserPERIOD)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(821)
					p.Identifier()
				}
				p.SetState(823)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(822)
						p.Type_cast()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 12:
				localctx = NewIn_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(825)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				p.SetState(827)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(826)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(829)
					p.Match(KuneiformParserIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(830)
					p.Match(KuneiformParserLPAREN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(833)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case KuneiformParserLPAREN, KuneiformParserPLUS, KuneiformParserMINUS, KuneiformParserDOUBLE_QUOTE, KuneiformParserNULL, KuneiformParserNOT, KuneiformParserEXISTS, KuneiformParserCASE, KuneiformParserSTRING_, KuneiformParserTRUE, KuneiformParserFALSE, KuneiformParserDIGITS_, KuneiformParserBINARY_, KuneiformParserIDENTIFIER, KuneiformParserVARIABLE, KuneiformParserCONTEXTUAL_VARIABLE:
					{
						p.SetState(831)
						p.Sql_expr_list()
					}

				case KuneiformParserSELECT:
					{
						p.SetState(832)
						p.Select_statement()
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}
				{
					p.SetState(835)
					p.Match(KuneiformParserRPAREN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 13:
				localctx = NewIs_sql_exprContext(p, NewSql_exprContext(p, _parentctx, _parentState))
				localctx.(*Is_sql_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_sql_expr)
				p.SetState(837)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(838)
					p.Match(KuneiformParserIS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(840)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(839)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(848)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case KuneiformParserDISTINCT:
					{
						p.SetState(842)
						p.Match(KuneiformParserDISTINCT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(843)
						p.Match(KuneiformParserFROM)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(844)

						var _x = p.sql_expr(0)

						localctx.(*Is_sql_exprContext).right = _x
					}

				case KuneiformParserNULL:
					{
						p.SetState(845)
						p.Match(KuneiformParserNULL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case KuneiformParserTRUE:
					{
						p.SetState(846)
						p.Match(KuneiformParserTRUE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case KuneiformParserFALSE:
					{
						p.SetState(847)
						p.Match(KuneiformParserFALSE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(854)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhen_then_clauseContext is an interface to support dynamic dispatch.
type IWhen_then_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhen_condition returns the when_condition rule contexts.
	GetWhen_condition() ISql_exprContext

	// GetThen returns the then rule contexts.
	GetThen() ISql_exprContext

	// SetWhen_condition sets the when_condition rule contexts.
	SetWhen_condition(ISql_exprContext)

	// SetThen sets the then rule contexts.
	SetThen(ISql_exprContext)

	// Getter signatures
	WHEN() antlr.TerminalNode
	THEN() antlr.TerminalNode
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext

	// IsWhen_then_clauseContext differentiates from other interfaces.
	IsWhen_then_clauseContext()
}

type When_then_clauseContext struct {
	antlr.BaseParserRuleContext
	parser         antlr.Parser
	when_condition ISql_exprContext
	then           ISql_exprContext
}

func NewEmptyWhen_then_clauseContext() *When_then_clauseContext {
	var p = new(When_then_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_when_then_clause
	return p
}

func InitEmptyWhen_then_clauseContext(p *When_then_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_when_then_clause
}

func (*When_then_clauseContext) IsWhen_then_clauseContext() {}

func NewWhen_then_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *When_then_clauseContext {
	var p = new(When_then_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_when_then_clause

	return p
}

func (s *When_then_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *When_then_clauseContext) GetWhen_condition() ISql_exprContext { return s.when_condition }

func (s *When_then_clauseContext) GetThen() ISql_exprContext { return s.then }

func (s *When_then_clauseContext) SetWhen_condition(v ISql_exprContext) { s.when_condition = v }

func (s *When_then_clauseContext) SetThen(v ISql_exprContext) { s.then = v }

func (s *When_then_clauseContext) WHEN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserWHEN, 0)
}

func (s *When_then_clauseContext) THEN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTHEN, 0)
}

func (s *When_then_clauseContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *When_then_clauseContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *When_then_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *When_then_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *When_then_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitWhen_then_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) When_then_clause() (localctx IWhen_then_clauseContext) {
	localctx = NewWhen_then_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, KuneiformParserRULE_when_then_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(855)
		p.Match(KuneiformParserWHEN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(856)

		var _x = p.sql_expr(0)

		localctx.(*When_then_clauseContext).when_condition = _x
	}
	{
		p.SetState(857)
		p.Match(KuneiformParserTHEN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(858)

		var _x = p.sql_expr(0)

		localctx.(*When_then_clauseContext).then = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_expr_listContext is an interface to support dynamic dispatch.
type ISql_expr_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSql_expr() []ISql_exprContext
	Sql_expr(i int) ISql_exprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSql_expr_listContext differentiates from other interfaces.
	IsSql_expr_listContext()
}

type Sql_expr_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_expr_listContext() *Sql_expr_listContext {
	var p = new(Sql_expr_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_expr_list
	return p
}

func InitEmptySql_expr_listContext(p *Sql_expr_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_expr_list
}

func (*Sql_expr_listContext) IsSql_expr_listContext() {}

func NewSql_expr_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_expr_listContext {
	var p = new(Sql_expr_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql_expr_list

	return p
}

func (s *Sql_expr_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_expr_listContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Sql_expr_listContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Sql_expr_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Sql_expr_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Sql_expr_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_expr_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_expr_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSql_expr_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql_expr_list() (localctx ISql_expr_listContext) {
	localctx = NewSql_expr_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, KuneiformParserRULE_sql_expr_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(860)
		p.sql_expr(0)
	}
	p.SetState(865)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(861)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(862)
			p.sql_expr(0)
		}

		p.SetState(867)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_function_callContext is an interface to support dynamic dispatch.
type ISql_function_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSql_function_callContext differentiates from other interfaces.
	IsSql_function_callContext()
}

type Sql_function_callContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_function_callContext() *Sql_function_callContext {
	var p = new(Sql_function_callContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_function_call
	return p
}

func InitEmptySql_function_callContext(p *Sql_function_callContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_sql_function_call
}

func (*Sql_function_callContext) IsSql_function_callContext() {}

func NewSql_function_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_function_callContext {
	var p = new(Sql_function_callContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_sql_function_call

	return p
}

func (s *Sql_function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_function_callContext) CopyAll(ctx *Sql_function_callContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Sql_function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Normal_call_sqlContext struct {
	Sql_function_callContext
}

func NewNormal_call_sqlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Normal_call_sqlContext {
	var p = new(Normal_call_sqlContext)

	InitEmptySql_function_callContext(&p.Sql_function_callContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_function_callContext))

	return p
}

func (s *Normal_call_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Normal_call_sqlContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Normal_call_sqlContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Normal_call_sqlContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Normal_call_sqlContext) Sql_expr_list() ISql_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *Normal_call_sqlContext) STAR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTAR, 0)
}

func (s *Normal_call_sqlContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDISTINCT, 0)
}

func (s *Normal_call_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitNormal_call_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

type Foreign_call_sqlContext struct {
	Sql_function_callContext
	dbid      ISql_exprContext
	procedure ISql_exprContext
}

func NewForeign_call_sqlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Foreign_call_sqlContext {
	var p = new(Foreign_call_sqlContext)

	InitEmptySql_function_callContext(&p.Sql_function_callContext)
	p.parser = parser
	p.CopyAll(ctx.(*Sql_function_callContext))

	return p
}

func (s *Foreign_call_sqlContext) GetDbid() ISql_exprContext { return s.dbid }

func (s *Foreign_call_sqlContext) GetProcedure() ISql_exprContext { return s.procedure }

func (s *Foreign_call_sqlContext) SetDbid(v ISql_exprContext) { s.dbid = v }

func (s *Foreign_call_sqlContext) SetProcedure(v ISql_exprContext) { s.procedure = v }

func (s *Foreign_call_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_call_sqlContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Foreign_call_sqlContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *Foreign_call_sqlContext) COMMA() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, 0)
}

func (s *Foreign_call_sqlContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *Foreign_call_sqlContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Foreign_call_sqlContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Foreign_call_sqlContext) AllSql_expr() []ISql_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_exprContext); ok {
			len++
		}
	}

	tst := make([]ISql_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_exprContext); ok {
			tst[i] = t.(ISql_exprContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_call_sqlContext) Sql_expr(i int) ISql_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_exprContext)
}

func (s *Foreign_call_sqlContext) Sql_expr_list() ISql_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_expr_listContext)
}

func (s *Foreign_call_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitForeign_call_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Sql_function_call() (localctx ISql_function_callContext) {
	localctx = NewSql_function_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, KuneiformParserRULE_sql_function_call)
	var _la int

	p.SetState(891)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext()) {
	case 1:
		localctx = NewNormal_call_sqlContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(868)
			p.Identifier()
		}
		{
			p.SetState(869)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(875)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case KuneiformParserLPAREN, KuneiformParserPLUS, KuneiformParserMINUS, KuneiformParserDOUBLE_QUOTE, KuneiformParserNULL, KuneiformParserNOT, KuneiformParserEXISTS, KuneiformParserCASE, KuneiformParserDISTINCT, KuneiformParserSTRING_, KuneiformParserTRUE, KuneiformParserFALSE, KuneiformParserDIGITS_, KuneiformParserBINARY_, KuneiformParserIDENTIFIER, KuneiformParserVARIABLE, KuneiformParserCONTEXTUAL_VARIABLE:
			p.SetState(871)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == KuneiformParserDISTINCT {
				{
					p.SetState(870)
					p.Match(KuneiformParserDISTINCT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(873)
				p.Sql_expr_list()
			}

		case KuneiformParserSTAR:
			{
				p.SetState(874)
				p.Match(KuneiformParserSTAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case KuneiformParserRPAREN:

		default:
		}
		{
			p.SetState(877)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewForeign_call_sqlContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(879)
			p.Identifier()
		}
		{
			p.SetState(880)
			p.Match(KuneiformParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(881)

			var _x = p.sql_expr(0)

			localctx.(*Foreign_call_sqlContext).dbid = _x
		}
		{
			p.SetState(882)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(883)

			var _x = p.sql_expr(0)

			localctx.(*Foreign_call_sqlContext).procedure = _x
		}
		{
			p.SetState(884)
			p.Match(KuneiformParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(885)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(887)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&148618792001339520) != 0) || ((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&4043950990402519041) != 0) {
			{
				p.SetState(886)
				p.Sql_expr_list()
			}

		}
		{
			p.SetState(889)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_blockContext is an interface to support dynamic dispatch.
type IAction_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAction_statement() []IAction_statementContext
	Action_statement(i int) IAction_statementContext
	AllSCOL() []antlr.TerminalNode
	SCOL(i int) antlr.TerminalNode

	// IsAction_blockContext differentiates from other interfaces.
	IsAction_blockContext()
}

type Action_blockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAction_blockContext() *Action_blockContext {
	var p = new(Action_blockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_block
	return p
}

func InitEmptyAction_blockContext(p *Action_blockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_block
}

func (*Action_blockContext) IsAction_blockContext() {}

func NewAction_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_blockContext {
	var p = new(Action_blockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_action_block

	return p
}

func (s *Action_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_blockContext) AllAction_statement() []IAction_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_statementContext); ok {
			len++
		}
	}

	tst := make([]IAction_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_statementContext); ok {
			tst[i] = t.(IAction_statementContext)
			i++
		}
	}

	return tst
}

func (s *Action_blockContext) Action_statement(i int) IAction_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_statementContext)
}

func (s *Action_blockContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserSCOL)
}

func (s *Action_blockContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, i)
}

func (s *Action_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Action_blockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitAction_block(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Action_block() (localctx IAction_blockContext) {
	localctx = NewAction_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, KuneiformParserRULE_action_block)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(898)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserDELETE || _la == KuneiformParserUPDATE || ((int64((_la-84)) & ^0x3f) == 0 && ((int64(1)<<(_la-84))&15393162790401) != 0) {
		{
			p.SetState(893)
			p.Action_statement()
		}
		{
			p.SetState(894)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(900)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_statementContext is an interface to support dynamic dispatch.
type IAction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAction_statementContext differentiates from other interfaces.
	IsAction_statementContext()
}

type Action_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAction_statementContext() *Action_statementContext {
	var p = new(Action_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_statement
	return p
}

func InitEmptyAction_statementContext(p *Action_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_action_statement
}

func (*Action_statementContext) IsAction_statementContext() {}

func NewAction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_statementContext {
	var p = new(Action_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_action_statement

	return p
}

func (s *Action_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_statementContext) CopyAll(ctx *Action_statementContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Action_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Extension_actionContext struct {
	Action_statementContext
}

func NewExtension_actionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Extension_actionContext {
	var p = new(Extension_actionContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Extension_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extension_actionContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserIDENTIFIER)
}

func (s *Extension_actionContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, i)
}

func (s *Extension_actionContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Extension_actionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Extension_actionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Extension_actionContext) Variable_list() IVariable_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariable_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariable_listContext)
}

func (s *Extension_actionContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, 0)
}

func (s *Extension_actionContext) Procedure_expr_list() IProcedure_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_expr_listContext)
}

func (s *Extension_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitExtension_action(s)

	default:
		return t.VisitChildren(s)
	}
}

type Local_actionContext struct {
	Action_statementContext
}

func NewLocal_actionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Local_actionContext {
	var p = new(Local_actionContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Local_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Local_actionContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Local_actionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Local_actionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Local_actionContext) Procedure_expr_list() IProcedure_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_expr_listContext)
}

func (s *Local_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLocal_action(s)

	default:
		return t.VisitChildren(s)
	}
}

type Sql_actionContext struct {
	Action_statementContext
}

func NewSql_actionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Sql_actionContext {
	var p = new(Sql_actionContext)

	InitEmptyAction_statementContext(&p.Action_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Action_statementContext))

	return p
}

func (s *Sql_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_actionContext) Sql_statement() ISql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Sql_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitSql_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Action_statement() (localctx IAction_statementContext) {
	localctx = NewAction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, KuneiformParserRULE_action_statement)
	var _la int

	p.SetState(921)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSql_actionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(901)
			p.Sql_statement()
		}

	case 2:
		localctx = NewLocal_actionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(902)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(903)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(905)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4503599630518408) != 0) || ((int64((_la-114)) & ^0x3f) == 0 && ((int64(1)<<(_la-114))&14367) != 0) {
			{
				p.SetState(904)
				p.Procedure_expr_list()
			}

		}
		{
			p.SetState(907)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewExtension_actionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(911)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserVARIABLE || _la == KuneiformParserCONTEXTUAL_VARIABLE {
			{
				p.SetState(908)
				p.Variable_list()
			}
			{
				p.SetState(909)
				p.Match(KuneiformParserEQUALS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(913)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(914)
			p.Match(KuneiformParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(915)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(916)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(918)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4503599630518408) != 0) || ((int64((_la-114)) & ^0x3f) == 0 && ((int64(1)<<(_la-114))&14367) != 0) {
			{
				p.SetState(917)
				p.Procedure_expr_list()
			}

		}
		{
			p.SetState(920)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_blockContext is an interface to support dynamic dispatch.
type IProcedure_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllProc_statement() []IProc_statementContext
	Proc_statement(i int) IProc_statementContext

	// IsProcedure_blockContext differentiates from other interfaces.
	IsProcedure_blockContext()
}

type Procedure_blockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_blockContext() *Procedure_blockContext {
	var p = new(Procedure_blockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_block
	return p
}

func InitEmptyProcedure_blockContext(p *Procedure_blockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_block
}

func (*Procedure_blockContext) IsProcedure_blockContext() {}

func NewProcedure_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_blockContext {
	var p = new(Procedure_blockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_procedure_block

	return p
}

func (s *Procedure_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_blockContext) AllProc_statement() []IProc_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProc_statementContext); ok {
			len++
		}
	}

	tst := make([]IProc_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProc_statementContext); ok {
			tst[i] = t.(IProc_statementContext)
			i++
		}
	}

	return tst
}

func (s *Procedure_blockContext) Proc_statement(i int) IProc_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProc_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProc_statementContext)
}

func (s *Procedure_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_blockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitProcedure_block(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Procedure_block() (localctx IProcedure_blockContext) {
	localctx = NewProcedure_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, KuneiformParserRULE_procedure_block)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(926)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&31525197931612296) != 0) || ((int64((_la-84)) & ^0x3f) == 0 && ((int64(1)<<(_la-84))&15426876605953) != 0) {
		{
			p.SetState(923)
			p.Proc_statement()
		}

		p.SetState(928)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_exprContext is an interface to support dynamic dispatch.
type IProcedure_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsProcedure_exprContext differentiates from other interfaces.
	IsProcedure_exprContext()
}

type Procedure_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_exprContext() *Procedure_exprContext {
	var p = new(Procedure_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_expr
	return p
}

func InitEmptyProcedure_exprContext(p *Procedure_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_expr
}

func (*Procedure_exprContext) IsProcedure_exprContext() {}

func NewProcedure_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_exprContext {
	var p = new(Procedure_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_procedure_expr

	return p
}

func (s *Procedure_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_exprContext) CopyAll(ctx *Procedure_exprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Field_access_procedure_exprContext struct {
	Procedure_exprContext
}

func NewField_access_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Field_access_procedure_exprContext {
	var p = new(Field_access_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Field_access_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Field_access_procedure_exprContext) Procedure_expr() IProcedure_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Field_access_procedure_exprContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPERIOD, 0)
}

func (s *Field_access_procedure_exprContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Field_access_procedure_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Field_access_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitField_access_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Literal_procedure_exprContext struct {
	Procedure_exprContext
}

func NewLiteral_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Literal_procedure_exprContext {
	var p = new(Literal_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Literal_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Literal_procedure_exprContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *Literal_procedure_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Literal_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLiteral_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Paren_procedure_exprContext struct {
	Procedure_exprContext
}

func NewParen_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Paren_procedure_exprContext {
	var p = new(Paren_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Paren_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Paren_procedure_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Paren_procedure_exprContext) Procedure_expr() IProcedure_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Paren_procedure_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Paren_procedure_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Paren_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitParen_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Variable_procedure_exprContext struct {
	Procedure_exprContext
}

func NewVariable_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Variable_procedure_exprContext {
	var p = new(Variable_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Variable_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_procedure_exprContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Variable_procedure_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Variable_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitVariable_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Make_array_procedure_exprContext struct {
	Procedure_exprContext
}

func NewMake_array_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Make_array_procedure_exprContext {
	var p = new(Make_array_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Make_array_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Make_array_procedure_exprContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *Make_array_procedure_exprContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *Make_array_procedure_exprContext) Procedure_expr_list() IProcedure_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_expr_listContext)
}

func (s *Make_array_procedure_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Make_array_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitMake_array_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Is_procedure_exprContext struct {
	Procedure_exprContext
	left  IProcedure_exprContext
	right IProcedure_exprContext
}

func NewIs_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Is_procedure_exprContext {
	var p = new(Is_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Is_procedure_exprContext) GetLeft() IProcedure_exprContext { return s.left }

func (s *Is_procedure_exprContext) GetRight() IProcedure_exprContext { return s.right }

func (s *Is_procedure_exprContext) SetLeft(v IProcedure_exprContext) { s.left = v }

func (s *Is_procedure_exprContext) SetRight(v IProcedure_exprContext) { s.right = v }

func (s *Is_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Is_procedure_exprContext) IS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIS, 0)
}

func (s *Is_procedure_exprContext) AllProcedure_expr() []IProcedure_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_exprContext); ok {
			tst[i] = t.(IProcedure_exprContext)
			i++
		}
	}

	return tst
}

func (s *Is_procedure_exprContext) Procedure_expr(i int) IProcedure_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Is_procedure_exprContext) NULL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNULL, 0)
}

func (s *Is_procedure_exprContext) TRUE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserTRUE, 0)
}

func (s *Is_procedure_exprContext) FALSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFALSE, 0)
}

func (s *Is_procedure_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNOT, 0)
}

func (s *Is_procedure_exprContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDISTINCT, 0)
}

func (s *Is_procedure_exprContext) FROM() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFROM, 0)
}

func (s *Is_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIs_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Procedure_expr_arithmeticContext struct {
	Procedure_exprContext
}

func NewProcedure_expr_arithmeticContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Procedure_expr_arithmeticContext {
	var p = new(Procedure_expr_arithmeticContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Procedure_expr_arithmeticContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_expr_arithmeticContext) AllProcedure_expr() []IProcedure_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_exprContext); ok {
			tst[i] = t.(IProcedure_exprContext)
			i++
		}
	}

	return tst
}

func (s *Procedure_expr_arithmeticContext) Procedure_expr(i int) IProcedure_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Procedure_expr_arithmeticContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCONCAT, 0)
}

func (s *Procedure_expr_arithmeticContext) STAR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSTAR, 0)
}

func (s *Procedure_expr_arithmeticContext) DIV() antlr.TerminalNode {
	return s.GetToken(KuneiformParserDIV, 0)
}

func (s *Procedure_expr_arithmeticContext) MOD() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMOD, 0)
}

func (s *Procedure_expr_arithmeticContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Procedure_expr_arithmeticContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Procedure_expr_arithmeticContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitProcedure_expr_arithmetic(s)

	default:
		return t.VisitChildren(s)
	}
}

type Unary_procedure_exprContext struct {
	Procedure_exprContext
}

func NewUnary_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Unary_procedure_exprContext {
	var p = new(Unary_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Unary_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_procedure_exprContext) Procedure_expr() IProcedure_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Unary_procedure_exprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserMINUS, 0)
}

func (s *Unary_procedure_exprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserPLUS, 0)
}

func (s *Unary_procedure_exprContext) EXCL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEXCL, 0)
}

func (s *Unary_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitUnary_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Comparison_procedure_exprContext struct {
	Procedure_exprContext
}

func NewComparison_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Comparison_procedure_exprContext {
	var p = new(Comparison_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Comparison_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_procedure_exprContext) AllProcedure_expr() []IProcedure_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_exprContext); ok {
			tst[i] = t.(IProcedure_exprContext)
			i++
		}
	}

	return tst
}

func (s *Comparison_procedure_exprContext) Procedure_expr(i int) IProcedure_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Comparison_procedure_exprContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUALS, 0)
}

func (s *Comparison_procedure_exprContext) EQUATE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserEQUATE, 0)
}

func (s *Comparison_procedure_exprContext) NEQ() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNEQ, 0)
}

func (s *Comparison_procedure_exprContext) LT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLT, 0)
}

func (s *Comparison_procedure_exprContext) LTE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLTE, 0)
}

func (s *Comparison_procedure_exprContext) GT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGT, 0)
}

func (s *Comparison_procedure_exprContext) GTE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserGTE, 0)
}

func (s *Comparison_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitComparison_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Function_call_procedure_exprContext struct {
	Procedure_exprContext
}

func NewFunction_call_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Function_call_procedure_exprContext {
	var p = new(Function_call_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Function_call_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_procedure_exprContext) Procedure_function_call() IProcedure_function_callContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_function_callContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_function_callContext)
}

func (s *Function_call_procedure_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Function_call_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitFunction_call_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Logical_procedure_exprContext struct {
	Procedure_exprContext
}

func NewLogical_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Logical_procedure_exprContext {
	var p = new(Logical_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Logical_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Logical_procedure_exprContext) AllProcedure_expr() []IProcedure_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_exprContext); ok {
			tst[i] = t.(IProcedure_exprContext)
			i++
		}
	}

	return tst
}

func (s *Logical_procedure_exprContext) Procedure_expr(i int) IProcedure_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Logical_procedure_exprContext) AND() antlr.TerminalNode {
	return s.GetToken(KuneiformParserAND, 0)
}

func (s *Logical_procedure_exprContext) OR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserOR, 0)
}

func (s *Logical_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitLogical_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Array_access_procedure_exprContext struct {
	Procedure_exprContext
}

func NewArray_access_procedure_exprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Array_access_procedure_exprContext {
	var p = new(Array_access_procedure_exprContext)

	InitEmptyProcedure_exprContext(&p.Procedure_exprContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_exprContext))

	return p
}

func (s *Array_access_procedure_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_access_procedure_exprContext) AllProcedure_expr() []IProcedure_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_exprContext); ok {
			tst[i] = t.(IProcedure_exprContext)
			i++
		}
	}

	return tst
}

func (s *Array_access_procedure_exprContext) Procedure_expr(i int) IProcedure_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Array_access_procedure_exprContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *Array_access_procedure_exprContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *Array_access_procedure_exprContext) Type_cast() IType_castContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_castContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_castContext)
}

func (s *Array_access_procedure_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitArray_access_procedure_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Procedure_expr() (localctx IProcedure_exprContext) {
	return p.procedure_expr(0)
}

func (p *KuneiformParser) procedure_expr(_p int) (localctx IProcedure_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewProcedure_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IProcedure_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 102
	p.EnterRecursionRule(localctx, 102, KuneiformParserRULE_procedure_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(958)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 135, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLiteral_procedure_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(930)
			p.Literal()
		}
		p.SetState(932)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(931)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		localctx = NewFunction_call_procedure_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(934)
			p.Procedure_function_call()
		}
		p.SetState(936)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(935)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		localctx = NewVariable_procedure_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(938)
			p.Variable()
		}
		p.SetState(940)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(939)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		localctx = NewMake_array_procedure_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(942)
			p.Match(KuneiformParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(944)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4503599630518408) != 0) || ((int64((_la-114)) & ^0x3f) == 0 && ((int64(1)<<(_la-114))&14367) != 0) {
			{
				p.SetState(943)
				p.Procedure_expr_list()
			}

		}
		{
			p.SetState(946)
			p.Match(KuneiformParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(948)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 133, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(947)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 5:
		localctx = NewParen_procedure_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(950)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(951)
			p.procedure_expr(0)
		}
		{
			p.SetState(952)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(954)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 134, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(953)
				p.Type_cast()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 6:
		localctx = NewUnary_procedure_exprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(956)
			_la = p.GetTokenStream().LA(1)

			if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&3147776) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(957)
			p.procedure_expr(6)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1003)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 141, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1001)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext()) {
			case 1:
				localctx = NewComparison_procedure_exprContext(p, NewProcedure_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_procedure_expr)
				p.SetState(960)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(961)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&260145152) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(962)
					p.procedure_expr(8)
				}

			case 2:
				localctx = NewLogical_procedure_exprContext(p, NewProcedure_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_procedure_expr)
				p.SetState(963)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(964)
					_la = p.GetTokenStream().LA(1)

					if !(_la == KuneiformParserAND || _la == KuneiformParserOR) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(965)
					p.procedure_expr(5)
				}

			case 3:
				localctx = NewProcedure_expr_arithmeticContext(p, NewProcedure_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_procedure_expr)
				p.SetState(966)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(967)
					p.Match(KuneiformParserCONCAT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(968)
					p.procedure_expr(4)
				}

			case 4:
				localctx = NewProcedure_expr_arithmeticContext(p, NewProcedure_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_procedure_expr)
				p.SetState(969)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(970)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4734976) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(971)
					p.procedure_expr(3)
				}

			case 5:
				localctx = NewProcedure_expr_arithmeticContext(p, NewProcedure_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_procedure_expr)
				p.SetState(972)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(973)
					_la = p.GetTokenStream().LA(1)

					if !(_la == KuneiformParserPLUS || _la == KuneiformParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(974)
					p.procedure_expr(2)
				}

			case 6:
				localctx = NewArray_access_procedure_exprContext(p, NewProcedure_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_procedure_expr)
				p.SetState(975)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				{
					p.SetState(976)
					p.Match(KuneiformParserLBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(977)
					p.procedure_expr(0)
				}
				{
					p.SetState(978)
					p.Match(KuneiformParserRBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(980)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 136, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(979)
						p.Type_cast()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 7:
				localctx = NewField_access_procedure_exprContext(p, NewProcedure_exprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_procedure_expr)
				p.SetState(982)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(983)
					p.Match(KuneiformParserPERIOD)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(984)
					p.Match(KuneiformParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(986)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 137, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(985)
						p.Type_cast()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 8:
				localctx = NewIs_procedure_exprContext(p, NewProcedure_exprContext(p, _parentctx, _parentState))
				localctx.(*Is_procedure_exprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, KuneiformParserRULE_procedure_expr)
				p.SetState(988)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(989)
					p.Match(KuneiformParserIS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(991)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == KuneiformParserNOT {
					{
						p.SetState(990)
						p.Match(KuneiformParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(999)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case KuneiformParserDISTINCT:
					{
						p.SetState(993)
						p.Match(KuneiformParserDISTINCT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(994)
						p.Match(KuneiformParserFROM)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(995)

						var _x = p.procedure_expr(0)

						localctx.(*Is_procedure_exprContext).right = _x
					}

				case KuneiformParserNULL:
					{
						p.SetState(996)
						p.Match(KuneiformParserNULL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case KuneiformParserTRUE:
					{
						p.SetState(997)
						p.Match(KuneiformParserTRUE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case KuneiformParserFALSE:
					{
						p.SetState(998)
						p.Match(KuneiformParserFALSE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1005)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 141, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_expr_listContext is an interface to support dynamic dispatch.
type IProcedure_expr_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllProcedure_expr() []IProcedure_exprContext
	Procedure_expr(i int) IProcedure_exprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsProcedure_expr_listContext differentiates from other interfaces.
	IsProcedure_expr_listContext()
}

type Procedure_expr_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_expr_listContext() *Procedure_expr_listContext {
	var p = new(Procedure_expr_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_expr_list
	return p
}

func InitEmptyProcedure_expr_listContext(p *Procedure_expr_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_expr_list
}

func (*Procedure_expr_listContext) IsProcedure_expr_listContext() {}

func NewProcedure_expr_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_expr_listContext {
	var p = new(Procedure_expr_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_procedure_expr_list

	return p
}

func (s *Procedure_expr_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_expr_listContext) AllProcedure_expr() []IProcedure_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_exprContext); ok {
			tst[i] = t.(IProcedure_exprContext)
			i++
		}
	}

	return tst
}

func (s *Procedure_expr_listContext) Procedure_expr(i int) IProcedure_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Procedure_expr_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Procedure_expr_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Procedure_expr_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_expr_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_expr_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitProcedure_expr_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Procedure_expr_list() (localctx IProcedure_expr_listContext) {
	localctx = NewProcedure_expr_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, KuneiformParserRULE_procedure_expr_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1006)
		p.procedure_expr(0)
	}
	p.SetState(1011)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == KuneiformParserCOMMA {
		{
			p.SetState(1007)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1008)
			p.procedure_expr(0)
		}

		p.SetState(1013)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProc_statementContext is an interface to support dynamic dispatch.
type IProc_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsProc_statementContext differentiates from other interfaces.
	IsProc_statementContext()
}

type Proc_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProc_statementContext() *Proc_statementContext {
	var p = new(Proc_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_proc_statement
	return p
}

func InitEmptyProc_statementContext(p *Proc_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_proc_statement
}

func (*Proc_statementContext) IsProc_statementContext() {}

func NewProc_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Proc_statementContext {
	var p = new(Proc_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_proc_statement

	return p
}

func (s *Proc_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Proc_statementContext) CopyAll(ctx *Proc_statementContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Proc_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Proc_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Stmt_ifContext struct {
	Proc_statementContext
}

func NewStmt_ifContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_ifContext {
	var p = new(Stmt_ifContext)

	InitEmptyProc_statementContext(&p.Proc_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Proc_statementContext))

	return p
}

func (s *Stmt_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_ifContext) IF() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIF, 0)
}

func (s *Stmt_ifContext) AllIf_then_block() []IIf_then_blockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIf_then_blockContext); ok {
			len++
		}
	}

	tst := make([]IIf_then_blockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIf_then_blockContext); ok {
			tst[i] = t.(IIf_then_blockContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_ifContext) If_then_block(i int) IIf_then_blockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_then_blockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_then_blockContext)
}

func (s *Stmt_ifContext) AllELSEIF() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserELSEIF)
}

func (s *Stmt_ifContext) ELSEIF(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserELSEIF, i)
}

func (s *Stmt_ifContext) ELSE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserELSE, 0)
}

func (s *Stmt_ifContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Stmt_ifContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Stmt_ifContext) AllProc_statement() []IProc_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProc_statementContext); ok {
			len++
		}
	}

	tst := make([]IProc_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProc_statementContext); ok {
			tst[i] = t.(IProc_statementContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_ifContext) Proc_statement(i int) IProc_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProc_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProc_statementContext)
}

func (s *Stmt_ifContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_if(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_breakContext struct {
	Proc_statementContext
}

func NewStmt_breakContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_breakContext {
	var p = new(Stmt_breakContext)

	InitEmptyProc_statementContext(&p.Proc_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Proc_statementContext))

	return p
}

func (s *Stmt_breakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_breakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(KuneiformParserBREAK, 0)
}

func (s *Stmt_breakContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_breakContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_break(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_variable_declarationContext struct {
	Proc_statementContext
}

func NewStmt_variable_declarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_variable_declarationContext {
	var p = new(Stmt_variable_declarationContext)

	InitEmptyProc_statementContext(&p.Proc_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Proc_statementContext))

	return p
}

func (s *Stmt_variable_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_variable_declarationContext) VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVARIABLE, 0)
}

func (s *Stmt_variable_declarationContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Stmt_variable_declarationContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_variable_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_variable_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_return_nextContext struct {
	Proc_statementContext
}

func NewStmt_return_nextContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_return_nextContext {
	var p = new(Stmt_return_nextContext)

	InitEmptyProc_statementContext(&p.Proc_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Proc_statementContext))

	return p
}

func (s *Stmt_return_nextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_return_nextContext) RETURN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRETURN, 0)
}

func (s *Stmt_return_nextContext) NEXT() antlr.TerminalNode {
	return s.GetToken(KuneiformParserNEXT, 0)
}

func (s *Stmt_return_nextContext) Procedure_expr_list() IProcedure_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_expr_listContext)
}

func (s *Stmt_return_nextContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_return_nextContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_return_next(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_for_loopContext struct {
	Proc_statementContext
	receiver        antlr.Token
	target_variable IVariableContext
}

func NewStmt_for_loopContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_for_loopContext {
	var p = new(Stmt_for_loopContext)

	InitEmptyProc_statementContext(&p.Proc_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Proc_statementContext))

	return p
}

func (s *Stmt_for_loopContext) GetReceiver() antlr.Token { return s.receiver }

func (s *Stmt_for_loopContext) SetReceiver(v antlr.Token) { s.receiver = v }

func (s *Stmt_for_loopContext) GetTarget_variable() IVariableContext { return s.target_variable }

func (s *Stmt_for_loopContext) SetTarget_variable(v IVariableContext) { s.target_variable = v }

func (s *Stmt_for_loopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_for_loopContext) FOR() antlr.TerminalNode {
	return s.GetToken(KuneiformParserFOR, 0)
}

func (s *Stmt_for_loopContext) IN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIN, 0)
}

func (s *Stmt_for_loopContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *Stmt_for_loopContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *Stmt_for_loopContext) VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVARIABLE, 0)
}

func (s *Stmt_for_loopContext) Range_() IRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRangeContext)
}

func (s *Stmt_for_loopContext) Sql_statement() ISql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Stmt_for_loopContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Stmt_for_loopContext) AllProc_statement() []IProc_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProc_statementContext); ok {
			len++
		}
	}

	tst := make([]IProc_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProc_statementContext); ok {
			tst[i] = t.(IProc_statementContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_for_loopContext) Proc_statement(i int) IProc_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProc_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProc_statementContext)
}

func (s *Stmt_for_loopContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_for_loop(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_returnContext struct {
	Proc_statementContext
}

func NewStmt_returnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_returnContext {
	var p = new(Stmt_returnContext)

	InitEmptyProc_statementContext(&p.Proc_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Proc_statementContext))

	return p
}

func (s *Stmt_returnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_returnContext) RETURN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRETURN, 0)
}

func (s *Stmt_returnContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_returnContext) Procedure_expr_list() IProcedure_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_expr_listContext)
}

func (s *Stmt_returnContext) Sql_statement() ISql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Stmt_returnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_return(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_procedure_callContext struct {
	Proc_statementContext
}

func NewStmt_procedure_callContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_procedure_callContext {
	var p = new(Stmt_procedure_callContext)

	InitEmptyProc_statementContext(&p.Proc_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Proc_statementContext))

	return p
}

func (s *Stmt_procedure_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_procedure_callContext) Procedure_function_call() IProcedure_function_callContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_function_callContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_function_callContext)
}

func (s *Stmt_procedure_callContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_procedure_callContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserASSIGN, 0)
}

func (s *Stmt_procedure_callContext) AllVariable_or_underscore() []IVariable_or_underscoreContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariable_or_underscoreContext); ok {
			len++
		}
	}

	tst := make([]IVariable_or_underscoreContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariable_or_underscoreContext); ok {
			tst[i] = t.(IVariable_or_underscoreContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_procedure_callContext) Variable_or_underscore(i int) IVariable_or_underscoreContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariable_or_underscoreContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariable_or_underscoreContext)
}

func (s *Stmt_procedure_callContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KuneiformParserCOMMA)
}

func (s *Stmt_procedure_callContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, i)
}

func (s *Stmt_procedure_callContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_procedure_call(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_variable_assignmentContext struct {
	Proc_statementContext
}

func NewStmt_variable_assignmentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_variable_assignmentContext {
	var p = new(Stmt_variable_assignmentContext)

	InitEmptyProc_statementContext(&p.Proc_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Proc_statementContext))

	return p
}

func (s *Stmt_variable_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_variable_assignmentContext) AllProcedure_expr() []IProcedure_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_exprContext); ok {
			tst[i] = t.(IProcedure_exprContext)
			i++
		}
	}

	return tst
}

func (s *Stmt_variable_assignmentContext) Procedure_expr(i int) IProcedure_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Stmt_variable_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserASSIGN, 0)
}

func (s *Stmt_variable_assignmentContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_variable_assignmentContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Stmt_variable_assignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_variable_assignment(s)

	default:
		return t.VisitChildren(s)
	}
}

type Stmt_sqlContext struct {
	Proc_statementContext
}

func NewStmt_sqlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Stmt_sqlContext {
	var p = new(Stmt_sqlContext)

	InitEmptyProc_statementContext(&p.Proc_statementContext)
	p.parser = parser
	p.CopyAll(ctx.(*Proc_statementContext))

	return p
}

func (s *Stmt_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stmt_sqlContext) Sql_statement() ISql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Stmt_sqlContext) SCOL() antlr.TerminalNode {
	return s.GetToken(KuneiformParserSCOL, 0)
}

func (s *Stmt_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitStmt_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Proc_statement() (localctx IProc_statementContext) {
	localctx = NewProc_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, KuneiformParserRULE_proc_statement)
	var _la int

	p.SetState(1094)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 152, p.GetParserRuleContext()) {
	case 1:
		localctx = NewStmt_variable_declarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1014)
			p.Match(KuneiformParserVARIABLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1015)
			p.Type_()
		}
		{
			p.SetState(1016)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewStmt_procedure_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1028)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserUNDERSCORE || _la == KuneiformParserVARIABLE {
			{
				p.SetState(1018)
				p.Variable_or_underscore()
			}

			p.SetState(1023)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == KuneiformParserCOMMA {
				{
					p.SetState(1019)
					p.Match(KuneiformParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				{
					p.SetState(1020)
					p.Variable_or_underscore()
				}

				p.SetState(1025)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1026)
				p.Match(KuneiformParserASSIGN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1030)
			p.Procedure_function_call()
		}
		{
			p.SetState(1031)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewStmt_variable_assignmentContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1033)
			p.procedure_expr(0)
		}
		p.SetState(1035)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserIDENTIFIER {
			{
				p.SetState(1034)
				p.Type_()
			}

		}
		{
			p.SetState(1037)
			p.Match(KuneiformParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1038)
			p.procedure_expr(0)
		}
		{
			p.SetState(1039)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewStmt_for_loopContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1041)
			p.Match(KuneiformParserFOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1042)

			var _m = p.Match(KuneiformParserVARIABLE)

			localctx.(*Stmt_for_loopContext).receiver = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1043)
			p.Match(KuneiformParserIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1047)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 146, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1044)
				p.Range_()
			}

		case 2:
			{
				p.SetState(1045)

				var _x = p.Variable()

				localctx.(*Stmt_for_loopContext).target_variable = _x
			}

		case 3:
			{
				p.SetState(1046)
				p.Sql_statement()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(1049)
			p.Match(KuneiformParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1053)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&31525197931612296) != 0) || ((int64((_la-84)) & ^0x3f) == 0 && ((int64(1)<<(_la-84))&15426876605953) != 0) {
			{
				p.SetState(1050)
				p.Proc_statement()
			}

			p.SetState(1055)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1056)
			p.Match(KuneiformParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewStmt_ifContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1058)
			p.Match(KuneiformParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1059)
			p.If_then_block()
		}
		p.SetState(1064)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == KuneiformParserELSEIF {
			{
				p.SetState(1060)
				p.Match(KuneiformParserELSEIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1061)
				p.If_then_block()
			}

			p.SetState(1066)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1076)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == KuneiformParserELSE {
			{
				p.SetState(1067)
				p.Match(KuneiformParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1068)
				p.Match(KuneiformParserLBRACE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1072)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&31525197931612296) != 0) || ((int64((_la-84)) & ^0x3f) == 0 && ((int64(1)<<(_la-84))&15426876605953) != 0) {
				{
					p.SetState(1069)
					p.Proc_statement()
				}

				p.SetState(1074)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1075)
				p.Match(KuneiformParserRBRACE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 6:
		localctx = NewStmt_sqlContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1078)
			p.Sql_statement()
		}
		{
			p.SetState(1079)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		localctx = NewStmt_breakContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1081)
			p.Match(KuneiformParserBREAK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1082)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		localctx = NewStmt_returnContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1083)
			p.Match(KuneiformParserRETURN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1086)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case KuneiformParserLBRACKET, KuneiformParserLPAREN, KuneiformParserEXCL, KuneiformParserPLUS, KuneiformParserMINUS, KuneiformParserNULL, KuneiformParserSTRING_, KuneiformParserTRUE, KuneiformParserFALSE, KuneiformParserDIGITS_, KuneiformParserBINARY_, KuneiformParserIDENTIFIER, KuneiformParserVARIABLE, KuneiformParserCONTEXTUAL_VARIABLE:
			{
				p.SetState(1084)
				p.Procedure_expr_list()
			}

		case KuneiformParserDELETE, KuneiformParserUPDATE, KuneiformParserWITH, KuneiformParserSELECT, KuneiformParserINSERT:
			{
				p.SetState(1085)
				p.Sql_statement()
			}

		case KuneiformParserSCOL:

		default:
		}
		{
			p.SetState(1088)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		localctx = NewStmt_return_nextContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1089)
			p.Match(KuneiformParserRETURN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1090)
			p.Match(KuneiformParserNEXT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1091)
			p.Procedure_expr_list()
		}
		{
			p.SetState(1092)
			p.Match(KuneiformParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariable_or_underscoreContext is an interface to support dynamic dispatch.
type IVariable_or_underscoreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VARIABLE() antlr.TerminalNode
	UNDERSCORE() antlr.TerminalNode

	// IsVariable_or_underscoreContext differentiates from other interfaces.
	IsVariable_or_underscoreContext()
}

type Variable_or_underscoreContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_or_underscoreContext() *Variable_or_underscoreContext {
	var p = new(Variable_or_underscoreContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable_or_underscore
	return p
}

func InitEmptyVariable_or_underscoreContext(p *Variable_or_underscoreContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_variable_or_underscore
}

func (*Variable_or_underscoreContext) IsVariable_or_underscoreContext() {}

func NewVariable_or_underscoreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_or_underscoreContext {
	var p = new(Variable_or_underscoreContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_variable_or_underscore

	return p
}

func (s *Variable_or_underscoreContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_or_underscoreContext) VARIABLE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserVARIABLE, 0)
}

func (s *Variable_or_underscoreContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserUNDERSCORE, 0)
}

func (s *Variable_or_underscoreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_or_underscoreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_or_underscoreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitVariable_or_underscore(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Variable_or_underscore() (localctx IVariable_or_underscoreContext) {
	localctx = NewVariable_or_underscoreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, KuneiformParserRULE_variable_or_underscore)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1096)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KuneiformParserUNDERSCORE || _la == KuneiformParserVARIABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_function_callContext is an interface to support dynamic dispatch.
type IProcedure_function_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsProcedure_function_callContext differentiates from other interfaces.
	IsProcedure_function_callContext()
}

type Procedure_function_callContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_function_callContext() *Procedure_function_callContext {
	var p = new(Procedure_function_callContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_function_call
	return p
}

func InitEmptyProcedure_function_callContext(p *Procedure_function_callContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_procedure_function_call
}

func (*Procedure_function_callContext) IsProcedure_function_callContext() {}

func NewProcedure_function_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_function_callContext {
	var p = new(Procedure_function_callContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_procedure_function_call

	return p
}

func (s *Procedure_function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_function_callContext) CopyAll(ctx *Procedure_function_callContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *Procedure_function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Foreign_call_procedureContext struct {
	Procedure_function_callContext
	dbid      IProcedure_exprContext
	procedure IProcedure_exprContext
}

func NewForeign_call_procedureContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Foreign_call_procedureContext {
	var p = new(Foreign_call_procedureContext)

	InitEmptyProcedure_function_callContext(&p.Procedure_function_callContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_function_callContext))

	return p
}

func (s *Foreign_call_procedureContext) GetDbid() IProcedure_exprContext { return s.dbid }

func (s *Foreign_call_procedureContext) GetProcedure() IProcedure_exprContext { return s.procedure }

func (s *Foreign_call_procedureContext) SetDbid(v IProcedure_exprContext) { s.dbid = v }

func (s *Foreign_call_procedureContext) SetProcedure(v IProcedure_exprContext) { s.procedure = v }

func (s *Foreign_call_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_call_procedureContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Foreign_call_procedureContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACKET, 0)
}

func (s *Foreign_call_procedureContext) COMMA() antlr.TerminalNode {
	return s.GetToken(KuneiformParserCOMMA, 0)
}

func (s *Foreign_call_procedureContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACKET, 0)
}

func (s *Foreign_call_procedureContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Foreign_call_procedureContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Foreign_call_procedureContext) AllProcedure_expr() []IProcedure_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_exprContext); ok {
			tst[i] = t.(IProcedure_exprContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_call_procedureContext) Procedure_expr(i int) IProcedure_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *Foreign_call_procedureContext) Procedure_expr_list() IProcedure_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_expr_listContext)
}

func (s *Foreign_call_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitForeign_call_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}

type Normal_call_procedureContext struct {
	Procedure_function_callContext
}

func NewNormal_call_procedureContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Normal_call_procedureContext {
	var p = new(Normal_call_procedureContext)

	InitEmptyProcedure_function_callContext(&p.Procedure_function_callContext)
	p.parser = parser
	p.CopyAll(ctx.(*Procedure_function_callContext))

	return p
}

func (s *Normal_call_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Normal_call_procedureContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(KuneiformParserIDENTIFIER, 0)
}

func (s *Normal_call_procedureContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLPAREN, 0)
}

func (s *Normal_call_procedureContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRPAREN, 0)
}

func (s *Normal_call_procedureContext) Procedure_expr_list() IProcedure_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_expr_listContext)
}

func (s *Normal_call_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitNormal_call_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Procedure_function_call() (localctx IProcedure_function_callContext) {
	localctx = NewProcedure_function_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, KuneiformParserRULE_procedure_function_call)
	var _la int

	p.SetState(1116)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 155, p.GetParserRuleContext()) {
	case 1:
		localctx = NewNormal_call_procedureContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1098)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1099)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1101)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4503599630518408) != 0) || ((int64((_la-114)) & ^0x3f) == 0 && ((int64(1)<<(_la-114))&14367) != 0) {
			{
				p.SetState(1100)
				p.Procedure_expr_list()
			}

		}
		{
			p.SetState(1103)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewForeign_call_procedureContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1104)
			p.Match(KuneiformParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1105)
			p.Match(KuneiformParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1106)

			var _x = p.procedure_expr(0)

			localctx.(*Foreign_call_procedureContext).dbid = _x
		}
		{
			p.SetState(1107)
			p.Match(KuneiformParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1108)

			var _x = p.procedure_expr(0)

			localctx.(*Foreign_call_procedureContext).procedure = _x
		}
		{
			p.SetState(1109)
			p.Match(KuneiformParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1110)
			p.Match(KuneiformParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1112)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4503599630518408) != 0) || ((int64((_la-114)) & ^0x3f) == 0 && ((int64(1)<<(_la-114))&14367) != 0) {
			{
				p.SetState(1111)
				p.Procedure_expr_list()
			}

		}
		{
			p.SetState(1114)
			p.Match(KuneiformParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIf_then_blockContext is an interface to support dynamic dispatch.
type IIf_then_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Procedure_expr() IProcedure_exprContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllProc_statement() []IProc_statementContext
	Proc_statement(i int) IProc_statementContext

	// IsIf_then_blockContext differentiates from other interfaces.
	IsIf_then_blockContext()
}

type If_then_blockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_then_blockContext() *If_then_blockContext {
	var p = new(If_then_blockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_if_then_block
	return p
}

func InitEmptyIf_then_blockContext(p *If_then_blockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_if_then_block
}

func (*If_then_blockContext) IsIf_then_blockContext() {}

func NewIf_then_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_then_blockContext {
	var p = new(If_then_blockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_if_then_block

	return p
}

func (s *If_then_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *If_then_blockContext) Procedure_expr() IProcedure_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *If_then_blockContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserLBRACE, 0)
}

func (s *If_then_blockContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRBRACE, 0)
}

func (s *If_then_blockContext) AllProc_statement() []IProc_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProc_statementContext); ok {
			len++
		}
	}

	tst := make([]IProc_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProc_statementContext); ok {
			tst[i] = t.(IProc_statementContext)
			i++
		}
	}

	return tst
}

func (s *If_then_blockContext) Proc_statement(i int) IProc_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProc_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProc_statementContext)
}

func (s *If_then_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_then_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_then_blockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitIf_then_block(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) If_then_block() (localctx IIf_then_blockContext) {
	localctx = NewIf_then_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, KuneiformParserRULE_if_then_block)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1118)
		p.procedure_expr(0)
	}
	{
		p.SetState(1119)
		p.Match(KuneiformParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1123)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&31525197931612296) != 0) || ((int64((_la-84)) & ^0x3f) == 0 && ((int64(1)<<(_la-84))&15426876605953) != 0) {
		{
			p.SetState(1120)
			p.Proc_statement()
		}

		p.SetState(1125)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1126)
		p.Match(KuneiformParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRangeContext is an interface to support dynamic dispatch.
type IRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllProcedure_expr() []IProcedure_exprContext
	Procedure_expr(i int) IProcedure_exprContext
	RANGE() antlr.TerminalNode

	// IsRangeContext differentiates from other interfaces.
	IsRangeContext()
}

type RangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeContext() *RangeContext {
	var p = new(RangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_range
	return p
}

func InitEmptyRangeContext(p *RangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = KuneiformParserRULE_range
}

func (*RangeContext) IsRangeContext() {}

func NewRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeContext {
	var p = new(RangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = KuneiformParserRULE_range

	return p
}

func (s *RangeContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeContext) AllProcedure_expr() []IProcedure_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_exprContext); ok {
			tst[i] = t.(IProcedure_exprContext)
			i++
		}
	}

	return tst
}

func (s *RangeContext) Procedure_expr(i int) IProcedure_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_exprContext)
}

func (s *RangeContext) RANGE() antlr.TerminalNode {
	return s.GetToken(KuneiformParserRANGE, 0)
}

func (s *RangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case KuneiformParserVisitor:
		return t.VisitRange(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *KuneiformParser) Range_() (localctx IRangeContext) {
	localctx = NewRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, KuneiformParserRULE_range)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1128)
		p.procedure_expr(0)
	}
	{
		p.SetState(1129)
		p.Match(KuneiformParserRANGE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1130)
		p.procedure_expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *KuneiformParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 44:
		var t *Sql_exprContext = nil
		if localctx != nil {
			t = localctx.(*Sql_exprContext)
		}
		return p.Sql_expr_Sempred(t, predIndex)

	case 51:
		var t *Procedure_exprContext = nil
		if localctx != nil {
			t = localctx.(*Procedure_exprContext)
		}
		return p.Procedure_expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *KuneiformParser) Sql_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 8)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *KuneiformParser) Procedure_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 13:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
