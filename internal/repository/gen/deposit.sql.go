// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: deposit.sql

package gen

import (
	"context"
)

const commitDeposits = `-- name: CommitDeposits :exec
WITH deleted_deposits AS (
    SELECT account_address, SUM(amount) as total_amount
    FROM deposits
    WHERE height <= $1
    GROUP BY account_address
)
INSERT INTO accounts (account_address, balance)
SELECT deleted_deposits.account_address, deleted_deposits.total_amount
FROM deleted_deposits
ON CONFLICT (account_address) WHERE (account_address is NOT NULL) DO UPDATE
SET balance = accounts.balance + (
    SELECT SUM(deleted_deposits.total_amount)
    FROM deleted_deposits
    WHERE accounts.account_address = deleted_deposits.account_address
)
`

func (q *Queries) CommitDeposits(ctx context.Context, height int64) error {
	_, err := q.exec(ctx, q.commitDepositsStmt, commitDeposits, height)
	return err
}

const deleteDeposits = `-- name: DeleteDeposits :exec
DELETE FROM deposits
WHERE height <= $1
`

func (q *Queries) DeleteDeposits(ctx context.Context, height int64) error {
	_, err := q.exec(ctx, q.deleteDepositsStmt, deleteDeposits, height)
	return err
}

const deposit = `-- name: Deposit :exec
INSERT INTO
    deposits (tx_hash, account_address, amount, height)
VALUES
    ($1, $2, $3, $4)
`

type DepositParams struct {
	TxHash         string
	AccountAddress string
	Amount         string
	Height         int64
}

func (q *Queries) Deposit(ctx context.Context, arg *DepositParams) error {
	_, err := q.exec(ctx, q.depositStmt, deposit,
		arg.TxHash,
		arg.AccountAddress,
		arg.Amount,
		arg.Height,
	)
	return err
}

const getDepositIdByTx = `-- name: GetDepositIdByTx :one
SELECT id
FROM deposits
WHERE tx_hash = $1
`

func (q *Queries) GetDepositIdByTx(ctx context.Context, txHash string) (int32, error) {
	row := q.queryRow(ctx, q.getDepositIdByTxStmt, getDepositIdByTx, txHash)
	var id int32
	err := row.Scan(&id)
	return id, err
}
