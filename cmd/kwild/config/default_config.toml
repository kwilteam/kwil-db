# The is an example config file for kwild.

# NOTE: Any path below can be absolute (e.g. "/var/myawesomeapp/data") or
# relative to the root directory (e.g. "data"). The root directory is
# "$HOME/.kwild" by default, but could be changed via $KWILD_HOME env variable
# or via --home command line flag.
# Order of preference: command line flag, env variable, default value.

# Root Directory Structure:
# RootDir/
#   |- config.toml    (app and chain configuration for running the kwild node)
#   |- abci/
#   |   |- config/
#   |   |   |- genesis.json   (genesis file for the network)
#   |   |   |- addrbook.json  (peer routable addresses for the kwild node)
#   |   |- data/
#   |   |   |- blockchain db files/dir (blockstore.db, state.db, etc)
#   |   |- info/            
#   |- application/wal        
#   |- snapshots/
#   |- signing/
#   |- rcvdSnaps/   (includes the chunks rcvd from the state sync module during db restoration process, its a temp dir)

# Only the config.toml and genesis file are required to run the kwild node in rootDir/abci/config
# The rest of the files & directories are created by the kwild node on startup

#######################################################################
###                      App Config Options                         ###
#######################################################################

[app]

# TCP address for the KWILD App's JSON-RPC server to listen on
jsonrpc_listen_addr = "0.0.0.0:8484"

# TCP address for the KWILD App's HTTP server to listen on
http_listen_addr = "0.0.0.0:8080"

# Unix socket or TCP address for the KWILD App's Admin GRPC server to listen on
admin_listen_addr = "/tmp/kwild.socket"

# Timeout on requests on the user RPC servers
rpc_timeout = "45s"

# Timeout on database reads initiated by the user RPC service
db_read_timeout = "5s"

# List of Extension endpoints to be enabled ex: ["localhost:50052", "169.198.102.34:50053"]
extension_endpoints = []

# PostgreSQL database host (UNIX socket path or IP address with no port)
pg_db_host = "127.0.0.1"

# PostgreSQL database port (may be omitted for UNIX socket hosts)
pg_db_port = "5432"

# PostgreSQL database user (should be a "superuser")
pg_db_user = "kwild"

# PostgreSQL database pass (may be omitted for some pg_hba.conf configurations)
pg_db_pass = ""

# PostgreSQL database name (override database name, default is "kwild")
pg_db_name = "kwild"

# The admin RPC server can require a password, if set. Ensure the connection is
# encrypted since the password is sent unencrypted in the HTTP Authorization
# header. Not needed if client authentication is done with mutual TLS (clients.pem).
admin_pass = ""

# Disable TLS on the admin service server. It is automatically disabled for a
# UNIX socket or loopback TCP listen address. This setting can disable it for
# any TCP listen address.
admin_notls = false

# The path to a file containing certificate that is used to create the HTTPS server.
# Might be either absolute path or path related to the kwild root directory.
# If the certificate is signed by a certificate authority,
# the certFile should be the concatenation of the server's certificate, any intermediates,
# and the CA's certificate.
# NOTE: both tls_cert_file and tls_key_file must be present for CometBFT to create HTTPS server.
# Otherwise, HTTP server is run.
tls_cert_file = ""

# The path to a file containing matching private key that is used to create the HTTPS server.
# Might be either absolute path or path related to the kwild root directory.
# NOTE: both tls_cert_file and tls_key_file must be present for CometBFT to create HTTPS server.
# Otherwise, HTTP server is run.
tls_key_file = ""

# Kwild Server hostname
hostname = ""

#######################################################################
###                     Extension Configuration                     ###
#######################################################################
[app.extensions]

#######################################################################
###                Snapshot store Config Options                    ###
#######################################################################
[app.snapshots]

# Toggle to enable snapshot store
# This would snapshot the application state at every recurring_height blocks
# and keep max_snapshots number of snapshots in the snapshot_dir
# Application state includes the databases deployed, accounts and the Validators db
enabled = false

# The height at which the snapshot is taken
recurring_height = 100000

# Maximum number of snapshots to be kept in the snapshot_dir.
# If max limit is reached, the oldest would be deleted and replaced by the latest snapshot
max_snapshots = 3

# The directory where the snapshots are stored. Can be absolute or relative to the kwild root directory
snapshot_dir = "snapshots"

# Max row size that can be parsed by the snapshot store
max_row_size = 4194304
#######################################################################
###                    Logging Config Options                       ###
#######################################################################
[log]

# Output level for logging, default is "info". Other options are "debug", "error", "warn", "trace"
level = "info"

# RPC systems' logging level. Must be higher than log.level.
rpc_level = "info"

# Consensus engine's logging level. Must be higher than log.level.
consensus_level = "warn"

# DB driver's logging level. Must be higher than log.level.
db_level = "info"

# Output paths for the logger, can be stdout or a file path
output_paths = ["stdout","kwild.log"]

# Output format: 'plain' or 'json'
format = "plain"

# Time format: "epochfloat" (default), "epochmilli", or "rfc3339milli"
# time_format = ""

#######################################################################
###                 Chain  Main Base Config Options                 ###
#######################################################################
[chain]
# A custom human readable name for this node
moniker = "validator-node-0"

#######################################################################
###                 Advanced Configuration Options                  ###
#######################################################################

#######################################################
###       RPC Server Configuration Options          ###
#######################################################
[chain.rpc]

# TCP or UNIX socket address for the RPC server to listen on
laddr = "tcp://0.0.0.0:26657"

# How long to wait for a tx to be committed during /broadcast_tx_commit.
# WARNING: Using a value larger than 10s will result in increasing the
# global HTTP write timeout, which applies to all connections and endpoints.
# See https://github.com/tendermint/tendermint/issues/3435
timeout_broadcast_tx_commit = "10s"

#######################################################
###         Consensus Configuration Options         ###
#######################################################
[chain.consensus]
# How long we wait for a proposal block before prevoting nil
timeout_propose = "3s"
# How long we wait after receiving +2/3 prevotes for “anything” (ie. not a single block or nil)
timeout_prevote = "2s"
# How long we wait after receiving +2/3 precommits for “anything” (ie. not a single block or nil)
timeout_precommit = "2s"
# How long we wait after committing a block, before starting on the new
# height (this gives us a chance to receive some more precommits, even
# though we already have +2/3).
timeout_commit = "6s"

#######################################################
###           P2P Configuration Options             ###
#######################################################
[chain.p2p]

# Address to listen for incoming connections
laddr = "tcp://0.0.0.0:26656"

# Address to advertise to peers for them to dial
# If empty, will use the same port as the laddr,
# and will introspect on the listener or use UPnP
# to figure out the address. ip and port are required
# example: 159.89.10.97:26656
external_address = ""

# Comma separated list of nodes to keep persistent connections to (used for bootstrapping)
# Example: "d128266b8b9f64c313de466cf29e0a6182dba54d@172.10.100.2:26656,9440f4a8059cf7ff31454973c4f9c68de65fe526@172.10.100.3:26656"
persistent_peers = ""

# Set true for strict address routability rules
# Set false for private or local networks
addr_book_strict = false

# Maximum number of inbound peers
max_num_inbound_peers = 40

# Maximum number of outbound peers to connect to, excluding persistent peers
max_num_outbound_peers = 10
  
# List of node IDs, to which a connection will be (re)established ignoring any existing limits
unconditional_peer_ids = ""

# Toggle to disable guard against peers connecting from the same ip.
allow_duplicate_ip = true

# Enable gossiping of peer information
pex = true

# Seed nodes used to obtain peer addresses. Only used if the peers in the
# address book are unreachable.
seeds = ""

# Seed mode, in which the node constantly crawls the network and looks for
# peers. If another node asks it for addresses, it responds and disconnects.
# This function is not for validator or sentry nodes. A seed node is to be
# operated to support other nodes via their `seeds` config.
#
# It is recommended to instead run a dedicated seeder like https://github.com/kwilteam/cometseed.
#
# Requires peer-exchange to be enabled.
seed_mode = false

#######################################################
###          Mempool Configuration Options          ###
#######################################################
[chain.mempool]
# Maximum number of transactions in the mempool
size = 5000

# Limit the total size of all txs in the mempool.
# This only accounts for raw transactions (e.g. given 1MB transactions and
# max_txs_bytes=5MB, mempool will only accept 5 transactions).
max_txs_bytes = 536870912

# Limit the size of any one transaction in mempool.
max_tx_bytes = 4194304

# Size of the cache (used to filter transactions we saw earlier) in transactions
cache_size = 10000

#######################################################
###         State Sync Configuration Options        ###
#######################################################
[chain.statesync]
# State sync rapidly bootstraps a new node by discovering, fetching, and restoring a state machine
# snapshot from peers instead of fetching and replaying historical blocks. Requires some peers in
# the network to take and serve state machine snapshots. State sync is not attempted if the node
# has any local state (LastBlockHeight > 0). The node will have a truncated block history,
# starting from the height of the snapshot.
enable = false

# RPC servers (comma-separated) for light client verification of the synced state machine and
# retrieval of state data for node bootstrapping. Also needs a trusted height and corresponding
# header hash obtained from a trusted source, and a period during which validators can be trusted.
#
# For Cosmos SDK-based chains, trust_period should usually be about 2/3 of the unbonding time (~2
# weeks) during which they can be financially punished (slashed) for misbehavior.
rpc_servers = ""

# Temporary directory for state sync snapshot chunks, defaults to the OS tempdir (typically /tmp).
# Will create a new, randomly named directory within, and remove it when done.
temp_dir = ""

# Time to spend discovering snapshots before initiating a restore.
discovery_time = "15s"

# The timeout duration before re-requesting a chunk, possibly from a different
# peer (default: 1 minute).
chunk_request_timeout = "10s"
