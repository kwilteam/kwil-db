// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kwil/ddl.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ddl struct {
	Index     string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Statement string `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
	Position  int64  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Final     bool   `protobuf:"varint,4,opt,name=final,proto3" json:"final,omitempty"`
}

func (m *Ddl) Reset()         { *m = Ddl{} }
func (m *Ddl) String() string { return proto.CompactTextString(m) }
func (*Ddl) ProtoMessage()    {}
func (*Ddl) Descriptor() ([]byte, []int) {
	return fileDescriptor_71e564ff4523f4b4, []int{0}
}
func (m *Ddl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ddl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ddl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ddl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ddl.Merge(m, src)
}
func (m *Ddl) XXX_Size() int {
	return m.Size()
}
func (m *Ddl) XXX_DiscardUnknown() {
	xxx_messageInfo_Ddl.DiscardUnknown(m)
}

var xxx_messageInfo_Ddl proto.InternalMessageInfo

func (m *Ddl) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Ddl) GetStatement() string {
	if m != nil {
		return m.Statement
	}
	return ""
}

func (m *Ddl) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Ddl) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func init() {
	proto.RegisterType((*Ddl)(nil), "kwil.kwil.Ddl")
}

func init() { proto.RegisterFile("kwil/ddl.proto", fileDescriptor_71e564ff4523f4b4) }

var fileDescriptor_71e564ff4523f4b4 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x2e, 0xcf, 0xcc,
	0xd1, 0x4f, 0x49, 0xc9, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0xf1, 0xf5, 0x40,
	0x84, 0x52, 0x36, 0x17, 0xb3, 0x4b, 0x4a, 0x8e, 0x90, 0x08, 0x17, 0x6b, 0x66, 0x5e, 0x4a, 0x6a,
	0x85, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x84, 0x23, 0x24, 0xc3, 0xc5, 0x59, 0x5c, 0x92,
	0x58, 0x92, 0x9a, 0x9b, 0x9a, 0x57, 0x22, 0xc1, 0x04, 0x96, 0x41, 0x08, 0x08, 0x49, 0x71, 0x71,
	0x14, 0xe4, 0x17, 0x67, 0x96, 0x64, 0xe6, 0xe7, 0x49, 0x30, 0x2b, 0x30, 0x6a, 0x30, 0x07, 0xc1,
	0xf9, 0x20, 0xf3, 0xd2, 0x32, 0xf3, 0x12, 0x73, 0x24, 0x58, 0x14, 0x18, 0x35, 0x38, 0x82, 0x20,
	0x1c, 0xa7, 0xa0, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71,
	0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xb2, 0x48, 0xcf,
	0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x07, 0xb9, 0xab, 0x24, 0x35, 0x11, 0xc2,
	0xd0, 0x4d, 0x49, 0xd2, 0x4f, 0xce, 0x4d, 0x81, 0xb0, 0x93, 0xf3, 0x8b, 0x73, 0xf3, 0x8b, 0xf5,
	0x2b, 0xc0, 0x3c, 0xfd, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x97, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xc7, 0x58, 0x66, 0x32, 0xe4, 0x00, 0x00, 0x00,
}

func (m *Ddl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ddl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ddl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Final {
		i--
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Position != 0 {
		i = encodeVarintDdl(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Statement) > 0 {
		i -= len(m.Statement)
		copy(dAtA[i:], m.Statement)
		i = encodeVarintDdl(dAtA, i, uint64(len(m.Statement)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintDdl(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDdl(dAtA []byte, offset int, v uint64) int {
	offset -= sovDdl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ddl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovDdl(uint64(l))
	}
	l = len(m.Statement)
	if l > 0 {
		n += 1 + l + sovDdl(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovDdl(uint64(m.Position))
	}
	if m.Final {
		n += 2
	}
	return n
}

func sovDdl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDdl(x uint64) (n int) {
	return sovDdl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ddl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDdl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ddl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ddl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDdl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDdl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDdl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDdl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDdl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDdl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDdl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDdl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDdl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDdl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDdl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDdl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDdl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDdl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDdl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDdl = fmt.Errorf("proto: unexpected end of group")
)
