version: "3"

services:
  # TODO: generate correspond number of nodes and exts by configuration
  node0:
    container_name: node0
    image: kwild:latest
    ports:
      - "8080:8080"
      - "50051:50051"
      - "26656:26656"
      - "26657:26657"
    env_file:
      - .env # docker compose by default will use this file if presented, here just make it explicit
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node0
        target: /app/kwil
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.100.2
    depends_on:
      ext1:
        condition: service_started
      pg0:
        condition: service_healthy
    command: |
      --root-dir=/app/kwil
      --log.format=plain
      --log.time-format=rfc3339milli
      --log.level=${LOG_LEVEL:-info}
      --app.extension-endpoints=ext1:50051
      --app.grpc-listen-addr=:50051
      --app.http-listen-addr=:8080
      --app.admin-listen-addr=unix:///tmp/admin.sock
      --chain.p2p.listen-addr=tcp://0.0.0.0:26656
      --chain.rpc.listen-addr=tcp://0.0.0.0:26657
      --app.pg_db_host=pg0
      --app.pg_db_port=5432
      --app.pg_db_user=kwild
      --app.pg_db_pass=kwild

  pg0:
    container_name: pg0
    image: postgres:16.1
    ports:
      - "5433:5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    command: |
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c max_prepared_transactions=2
    volumes: 
      - ./pginit.sql:/docker-entrypoint-initdb.d/create_user.sql
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.101.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 6s
      retries: 10

  node1:
    container_name: node1
    image: kwild:latest
    ports:
      - "8081:8080"
      - "50052:50051"
      - "26666:26656"
      - "26667:26657"
    env_file:
      - .env
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node1
        target: /app/kwil
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.100.3
    depends_on:
      ext1:
        condition: service_started
      pg1:
        condition: service_healthy
    command: |
      --root-dir=/app/kwil
      --log.format=plain
      --log.time-format=rfc3339milli
      --log.level=${LOG_LEVEL:-info}
      --app.extension-endpoints=ext1:50051
      --app.grpc-listen-addr=:50051
      --app.http-listen-addr=:8080
      --app.admin-listen-addr=unix:///tmp/admin.sock
      --chain.p2p.listen-addr=tcp://0.0.0.0:26656
      --chain.rpc.listen-addr=tcp://0.0.0.0:26657
      --app.pg_db_host=pg1
      --app.pg_db_port=5432
      --app.pg_db_user=kwild
      --app.pg_db_pass=kwild

  pg1:
    container_name: pg1
    image: postgres:16.1
    ports:
      - "5434:5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    command: |
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c max_prepared_transactions=2
    volumes: 
      - ./pginit.sql:/docker-entrypoint-initdb.d/create_user.sql
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.101.3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 6s
      retries: 10

  node2:
    container_name: node2
    image: kwild:latest
    ports:
      - "8082:8080"
      - "50053:50051"
      - "26676:26656"
      - "26677:26657"
    env_file:
      - .env
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node2
        target: /app/kwil
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.100.4
    depends_on:
      ext1:
        condition: service_started
      pg2:
        condition: service_healthy
    command: |
      --root-dir=/app/kwil
      --log.level=${LOG_LEVEL:-info}
      --log.format=plain
      --log.time-format=rfc3339milli
      --app.extension-endpoints=ext1:50051
      --app.grpc-listen-addr=:50051
      --app.http-listen-addr=:8080
      --app.admin-listen-addr=unix:///tmp/admin.sock
      --chain.p2p.listen-addr=tcp://0.0.0.0:26656
      --chain.rpc.listen-addr=tcp://0.0.0.0:26657
      --app.pg_db_host=pg2
      --app.pg_db_port=5432
      --app.pg_db_user=kwild
      --app.pg_db_pass=kwild

  pg2:
    container_name: pg2
    image: postgres:16.1
    ports:
      - "5435:5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    command: |
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c max_prepared_transactions=2
    volumes: 
      - ./pginit.sql:/docker-entrypoint-initdb.d/create_user.sql
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.101.4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 6s
      retries: 10

  # This node is used to test the scenario where new node join the network & sync the blocks
  # Removing the ext dependency as test-container docker compose creates a new project everytime we run
  # docker compose, and the ext is defined in a seperate project, so service lookup is hard.
  node3:
    container_name: node3
    image: kwild:latest
    ports:
      - "8083:8080"
      - "50054:50051"
      - "26686:26656"
      - "26687:26657"
    env_file:
      - .env
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node3
        target: /app/kwil
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.100.5
    depends_on:
      ext3:
        condition: service_started
      pg3:
        condition: service_healthy
    command: |
      --root-dir=/app/kwil
      --log.format=plain
      --log.time-format=rfc3339milli
      --log.level=${LOG_LEVEL:-info}
      --app.extension-endpoints=ext3:50051
      --app.grpc-listen-addr=:50051
      --app.http-listen-addr=:8080
      --chain.p2p.listen-addr=tcp://0.0.0.0:26656
      --app.admin-listen-addr=unix:///tmp/admin.sock
      --chain.rpc.listen-addr=tcp://0.0.0.0:26657
      --app.pg_db_host=pg3
      --app.pg_db_port=5432
      --app.pg_db_user=kwild
      --app.pg_db_pass=kwild

  pg3:
    container_name: pg3
    image: postgres:16.1
    ports:
      - "5436:5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    command: |
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c max_prepared_transactions=2
    volumes: 
      - ./pginit.sql:/docker-entrypoint-initdb.d/create_user.sql
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.101.5
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 6s
      retries: 10

  # this ext is shared by all nodes
  # we can make a separate ext for each node if we want
  ext1:
    container_name: math_ext1
    image: kwilbrennan/extensions-math:multi-arch
    ports:
      - "50061:50051"
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.100.101
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "50051" ]
      interval: 1s
      timeout: 6s
      retries: 20

  # this one is just for node3, which is started in a separate compose project in some tests
  ext3:
    container_name: math_ext3
    image: kwilbrennan/extensions-math:multi-arch
    ports:
      - "50071:50051"
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.100.102
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "50051" ]
      interval: 1s
      timeout: 6s
      retries: 20

  # for kgw tests, to run locally, you need to build this image in kgw repo
  kgw:
    container_name: kgw
    image: kgw:latest
    ports:
      - "8090:8090"
    env_file:
      - .env
    networks:
      kwil-int-testnet:
        ipv4_address: 172.10.100.10
    command: |
      --log-level ${LOG_LEVEL:-info}
      --cors-allow-origins *
      --backends node0:8080 node1:8080 node2:8080 node3:8080
      --domain http://localhost:8090
      --statement "Trust me ok?"
      --session-secret "kgwtest"
      --chain-id ${CHAIN_ID:-kwil-test-chain}
      --allow-deploy-db
      --allow-adhoc-query
      --devmode
      --schema-sync-interval 2
    # domain should not be changed, and client should use 'domain' value as the provider, otherwise the test will fail

networks:
  kwil-int-testnet:
    name: kwil-int-testnet
    ipam:
      driver: default
      config:
        - subnet: 172.10.0.0/16
