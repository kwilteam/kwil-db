version: "3"

services:
  # TODO: generate corresponding number of nodes and exts by configuration
  node0:
    image: {{ .DockerImage }}
    ports:
      - "{{with .ExposedRPCPorts}}{{index . 0}}:{{end}}8484"
      - "{{with .ExposedRPCPorts}}{{index . 0 | plus 100}}:{{end}}8584"
      - "6600:6600"
    #env_file:
      # NOTE: docker compose by default will use `.env` file if presented
    environment:
      GORACE: "halt_on_error=1 log_path=/app/kwil/datarace"
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node0
        target: /app/kwil
    networks:
      - {{ .Network }}
    depends_on:
      pg0:
        condition: service_healthy
    command: |
      --root=/app/kwil
      --log-format=plain
      --log-level=${LOG_LEVEL:-info}
      --admin.listen=/tmp/admin.socket
      --rpc.listen=0.0.0.0:8484
      --p2p.ip=0.0.0.0
      --p2p.port=6600
      --db.host=pg0
      --db.port=5432
      --db.user=kwild
      --db.pass=kwild
    healthcheck:
      test: ["CMD", "curl", "--fail-with-body", "-s", "http://127.0.0.1:8484/api/v1/health/user"]
      interval: 2s
      timeout: 6s
      retries: 10

  pg0:
    image: kwildb/postgres:16.5-1
    ports:
      - "5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: --data-checksums
    networks:
      - {{ .Network }}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 && sleep 1"]
      interval: 2s
      timeout: 6s
      retries: 10

  node1:
    image: {{ .DockerImage }}
    ports:
      - "{{with .ExposedRPCPorts}}{{index . 1}}:{{end}}8484"
      - "{{with .ExposedRPCPorts}}{{index . 1 | plus 100}}:{{end}}8584"
      - "6601:6600"
    environment:
      GORACE: "halt_on_error=1 log_path=/app/kwil/datarace"
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node1
        target: /app/kwil
    networks:
      - {{ .Network }}
    depends_on:
      pg1:
        condition: service_healthy
    command: |
      --root=/app/kwil
      --log-format=plain
      --log-level=${LOG_LEVEL:-info}
      --admin.listen=/tmp/admin.socket
      --rpc.listen=0.0.0.0:8484
      --p2p.ip=0.0.0.0
      --p2p.port=6600
      --db.host=pg1
      --db.port=5432
      --db.user=kwild
      --db.pass=kwild
    healthcheck:
      test: ["CMD", "curl", "--fail-with-body", "-s", "http://127.0.0.1:8484/api/v1/health/user"]
      interval: 2s
      timeout: 6s
      retries: 10

  pg1:
    image: kwildb/postgres:16.5-1
    ports:
      - "5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: --data-checksums
    networks:
      - {{ .Network }}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 && sleep 1"]
      interval: 2s
      timeout: 6s
      retries: 10

  node2:
    image: {{ .DockerImage }}
    ports:
      - "{{with .ExposedRPCPorts}}{{index . 2}}:{{end}}8484"
      - "{{with .ExposedRPCPorts}}{{index . 2 | plus 100}}:{{end}}8584"
      - "6602:6600"
    environment:
      GORACE: "halt_on_error=1 log_path=/app/kwil/datarace"
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node2
        target: /app/kwil
    networks:
      - {{ .Network }}
    depends_on:
      pg2:
        condition: service_healthy
    command: |
      --root=/app/kwil
      --log-format=plain
      --log-level=${LOG_LEVEL:-info}
      --admin.listen=/tmp/admin.socket
      --rpc.listen=0.0.0.0:8484
      --p2p.ip=0.0.0.0
      --p2p.port=6600
      --db.host=pg2
      --db.port=5432
      --db.user=kwild
      --db.pass=kwild
    healthcheck:
      test: ["CMD", "curl", "--fail-with-body", "-s", "http://127.0.0.1:8484/api/v1/health/user"]
      interval: 2s
      timeout: 6s
      retries: 10

  pg2:
    image: kwildb/postgres:16.5-1
    ports:
      - "5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: --data-checksums
    networks:
      - {{ .Network }}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 && sleep 1"]
      interval: 2s
      timeout: 6s
      retries: 10

  # This node is used to test the scenario where new node join the network & sync the blocks
  # Removing the ext dependency as test-container docker compose creates a new project everytime we run
  
  # docker compose, and the ext is defined in a seperate project, so service lookup is hard.
  node3:
    image: {{ .DockerImage }}
    ports:
      - "{{with .ExposedRPCPorts}}{{index . 3}}:{{end}}8484"
      - "{{with .ExposedRPCPorts}}{{index . 3 | plus 100}}:{{end}}8584"
      - "6603:6600"
    environment:
      GORACE: "halt_on_error=1 log_path=/app/kwil/datarace"
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node3
        target: /app/kwil
    networks:
      - {{ .Network }}
    depends_on:
      pg3:
        condition: service_healthy
    command: |
      --root=/app/kwil
      --log-format=plain
      --log-level=${LOG_LEVEL:-info}
      --admin.listen=/tmp/admin.socket
      --rpc.listen=0.0.0.0:8484
      --p2p.ip=0.0.0.0
      --p2p.port=6600
      --db.host=pg3
      --db.port=5432
      --db.user=kwild
      --db.pass=kwild
    healthcheck:
      test: ["CMD", "curl", "--fail-with-body", "-s", "http://127.0.0.1:8484/api/v1/health/user"]
      interval: 2s
      timeout: 6s
      retries: 10

  pg3:
    image: kwildb/postgres:16.5-1
    ports:
      - "5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: --data-checksums
    networks:
      - {{ .Network }}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 && sleep 1"]
      interval: 2s
      timeout: 6s
      retries: 10

  node4:
    image: {{ .DockerImage }}
    ports:
      - "{{with .ExposedRPCPorts}}{{index . 4}}:{{end}}8484"
      - "{{with .ExposedRPCPorts}}{{index . 4 | plus 100}}:{{end}}8584"
      - "6604:6600"
    environment:
      GORACE: "halt_on_error=1 log_path=/app/kwil/datarace"
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node4
        target: /app/kwil
    networks:
      - {{ .Network }}
    depends_on:
      pg4:
        condition: service_healthy
    command: |
      --root=/app/kwil
      --log-format=plain
      --log-level=${LOG_LEVEL:-info}
      --admin.listen=/tmp/admin.socket
      --rpc.listen=0.0.0.0:8484
      --p2p.ip=0.0.0.0
      --p2p.port=6600
      --db.host=pg4
      --db.port=5432
      --db.user=kwild
      --db.pass=kwild
    healthcheck:
      test: ["CMD", "curl", "--fail-with-body", "-s", "http://127.0.0.1:8484/api/v1/health/user"]
      interval: 2s
      timeout: 6s
      retries: 10

  pg4:
    image: kwildb/postgres:16.5-1
    ports:
      - "5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: --data-checksums
    networks:
      - {{ .Network }}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 && sleep 1"]
      interval: 2s
      timeout: 6s
      retries: 10

  node5:
    image: {{ .DockerImage }}
    ports:
      - "{{with .ExposedRPCPorts}}{{index . 5}}:{{end}}8484"
      - "{{with .ExposedRPCPorts}}{{index . 5 | plus 100}}:{{end}}8584"
      - "6605:6600"
    environment:
      GORACE: "halt_on_error=1 log_path=/app/kwil/datarace"
    volumes:
      - type: bind
        source: ${KWIL_HOME:-./.testnet}/node5
        target: /app/kwil
    networks:
      - {{ .Network }}
    depends_on:
        pg5:
          condition: service_healthy
    command: |
      --root=/app/kwil
      --log-format=plain
      --log-level=${LOG_LEVEL:-info}
      --admin.listen=/tmp/admin.socket
      --rpc.listen=0.0.0.0:8484
      --p2p.ip=0.0.0.0
      --p2p.port=6600
      --db.host=pg5
      --db.port=5432
      --db.user=kwild
      --db.pass=kwild
    healthcheck:
      test: ["CMD", "curl", "--fail-with-body", "-s", "http://127.0.0.1:8484/api/v1/health/user"]
      interval: 2s
      timeout: 6s
      retries: 10

  pg5:
    image: kwildb/postgres:16.5-1
    ports:
      - "5432"
    restart: always
    user: postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: --data-checksums
    networks:
      - {{ .Network }}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 && sleep 1"]
      interval: 2s
      timeout: 6s
      retries: 10

  # for kgw tests, to run locally, you need to build this image in kgw repo
  kgw:
    image: kgw:latest
    ports:
      - "8090:8090"
    networks:
      - {{ .Network }}
    volumes:
      - ${KWIL_HOME:-/tmp}:/app/kgwlog
    command: |
      --log-level ${LOG_LEVEL:-info}
      --log-outputs stdout /app/kgwlog/kgw.log
      --cors-allow-origins *
      --backends node0:8484 node1:8484 node2:8484 node3:8484
      --domain http://localhost:8090
      --statement "Trust me ok?"
      --session-secret "kgwtest"
      --chain-id ${CHAIN_ID:-kwil-test-chain}
      --allow-deploy-db
      --allow-adhoc-query
      --devmode
      --schema-sync-interval 2
    # domain should not be changed, and client should use 'domain' value as the provider, otherwise the test will fail

  hardhat:
    image: kwildb/hardhat:latest
    ports:
      - "8545"
    networks:
      - {{ .Network }}

networks:
  {{ .Network }}:
    external: true
