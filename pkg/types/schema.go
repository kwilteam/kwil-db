package types

import "github.com/kwilteam/kwil-db/pkg/serialize/rlp"

type Schema struct {
	Owner      string
	Name       string
	Tables     []*Table
	Actions    []*Action
	Extensions []*Extension
}

func (s *Schema) Bytes() ([]byte, error) {
	return rlp.Encode(s)
}

func (s *Schema) FromBytes(b []byte) error {
	result, err := rlp.Decode[Schema](b)
	if err != nil {
		return err
	}

	*s = *result
	return nil
}

type Extension struct {
	Name   string
	Config []*ExtensionConfig
	Alias  string
}

type ExtensionConfig struct {
	Argument string
	Value    string
}

type Table struct {
	Name        string
	Columns     []*Column
	Indexes     []*Index
	ForeignKeys []*ForeignKey
}

type Column struct {
	Name       string
	Type       string
	Attributes []*Attribute
}

type Attribute struct {
	Type  string
	Value string
}

type Action struct {
	Name   string
	Inputs []string
	// Mutability could be empty if the abi is generated by legacy version of kuneiform,
	// default to "update" for backward compatibility
	Mutability string
	// Auxiliaries are the auxiliary types that are required for the action, specifying extra characteristics of the action
	Auxiliaries []string
	Public      bool
	Statements  []string
}

type Index struct {
	Name    string
	Columns []string
	Type    string
}

type ForeignKey struct {
	// ChildKeys are the columns that are referencing another.
	// For example, in FOREIGN KEY (a) REFERENCES tbl2(b), "a" is the child key
	ChildKeys []string

	// ParentKeys are the columns that are being referred to.
	// For example, in FOREIGN KEY (a) REFERENCES tbl2(b), "tbl2.b" is the parent key
	ParentKeys []string

	// ParentTable is the table that holds the parent columns.
	// For example, in FOREIGN KEY (a) REFERENCES tbl2(b), "tbl2.b" is the parent table
	ParentTable string

	// Action refers to what the foreign key should do when the parent is altered.
	// This is NOT the same as a database action;
	// however sqlite's docs refer to these as actions,
	// so we should be consistent with that.
	// For example, ON DELETE CASCADE is a foreign key action
	Actions []*ForeignKeyAction
}

// ForeignKeyAction is used to specify what should occur
// if a parent key is updated or deleted
type ForeignKeyAction struct {
	// On can be either "UPDATE" or "DELETE"
	On string

	// Do specifies what a foreign key action should do
	Do string
}

// MutabilityType is the type of mutability
type MutabilityType string

func (t MutabilityType) String() string {
	return string(t)
}

const (
	MutabilityUpdate MutabilityType = "update"
	MutabilityView   MutabilityType = "view"
)

// AuxiliaryType is the type of auxiliary
type AuxiliaryType string

func (t AuxiliaryType) String() string {
	return string(t)
}

const (
	// AuxiliaryTypeMustSign is used to specify that an action need signature, it is used for `view` action.
	AuxiliaryTypeMustSign AuxiliaryType = "mustsign"
)
