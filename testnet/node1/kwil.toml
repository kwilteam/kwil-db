# log level
# possible values: 'debug', 'info', 'warn', and 'error'
log_level = 'info'
# log format
# possible values: 'json', 'text' (kv), and 'plain' (fmt-style)
log_format = 'plain'
# output paths for the log
log_output = ['stdout', 'kwild.log']
# profile mode (http, cpu, mem, mutex, or block)
# profile_mode = ''
# profile output file path (e.g. cpu.pprof)
# profile_file = ''
# path to the genesis state file, relative to the root directory
genesis_state = ''

# P2P related configuration
[p2p]
# IP address to listen on for P2P connections
ip = '0.0.0.0'
# port to listen on for P2P connections
port = 6600
# enable peer exchange
pex = true
# bootnodes to connect to on startup
bootnodes = ['0226b3ff29216dac187cea393f8af685ad419ac9644e55dce83d145c8b1af213bd#0@127.0.0.1:6600', '02c57268fc884fa88425c7e5c19d3af263d1c64dd8b8f3f8c0fb31bb622d1fdab8#0@127.0.0.1:6600', '021072159608e8bfa10102cc74d3e1b533dfdf1904538a61de42811cc3066de014#0@127.0.0.1:6600']
# operate in private mode using a node ID whitelist
private = false
# allowed node IDs when in private mode
whitelist = []

# Consensus related configuration
[consensus]
# timeout for proposing a block (applies to leader)
propose_timeout = '1s'
# max size of a block in bytes
max_block_size = 50000000
# max number of transactions per block
max_txs_per_block = 20000
# interval between block proposal reannouncements by the leader
block_proposal_interval = '1s'
# interval between block commit reannouncements by the leader, and votes reannouncements by validators
block_ann_interval = '3s'

# DB (PostgreSQL) related configuration
[db]
# postgres host name (IP or UNIX socket path)
host = '127.0.0.1'
# postgres TCP port (leave empty for UNIX socket)
port = '5432'
# postgres role/user name
user = 'kwild'
# postgres password if required for the user and host
pass = ''
# postgres database name
dbname = 'kwild'
# timeout on read transactions from user RPC calls and queries
read_timeout = '45s'
# maximum number of DB connections to permit
max_connections = 60

# User RPC service configuration
[rpc]
# address in host:port format on which the RPC server will listen
listen = '0.0.0.0:8484'
# user request duration limit after which it is cancelled
timeout = '20s'
# largest permissible user request size
max_req_size = 6000000
# enable private mode that requires challenge authentication for each call
private = false
# lifetime of a server-generated challenge
challenge_expiry = '30s'
# maximum number of challenges per second that a user can request
challenge_rate_limit = 10.0

# Admin RPC service configuration
[admin]
# enable the admin RPC service
enable = true
# address in host:port format or UNIX socket path on which the admin RPC server will listen
listen = '127.0.0.1:8584'
# optional password for the admin service
pass = ''
# disable TLS when the listen address is not a loopback IP or UNIX socket
notls = false
# TLS certificate for use with a non-loopback listen address when notls is not true
cert = 'admin.cert'
# TLS key for use with a non-loopback listen address when notls is not true
key = 'admin.key'

# Snapshot creation and provider configuration
[snapshots]
# enable creating and providing snapshots for peers using statesync
enable = false
# snapshot creation period in blocks
recurring_height = 14400
# number of snapshots to keep, after the oldest is removed when creating a new one
max_snapshots = 3

# Statesync configuration (vs block sync)
[state_sync]
# enable using statesync rather than blocksync
enable = false
# trusted snapshot providers in node ID format (see bootnodes)
trusted_providers = []
# how long to discover snapshots before selecting one to use
discovery_time = '30s'
# how many times to try after failing to apply a snapshot before switching to blocksync
max_retries = 3

# extension configuration
[extensions]

# zero downtime migration configuration
[migrations]
# enable zero downtime migrations
enable = false
# JSON-RPC listening address of the node to replicate the state from
migrate_from = ''
